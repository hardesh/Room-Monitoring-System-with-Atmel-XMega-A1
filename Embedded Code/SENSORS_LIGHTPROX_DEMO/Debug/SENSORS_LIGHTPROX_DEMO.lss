
SENSORS_LIGHTPROX_DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  000039c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000371e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001f2  00802000  0000371e  000037d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000002f  008021f2  008021f2  00003a08  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000478  00000000  00000000  00003aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001490c  00000000  00000000  00003f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000059b6  00000000  00000000  0001882c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009376  00000000  00000000  0001e1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dec  00000000  00000000  00027558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0003152f  00000000  00000000  00028344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007956  00000000  00000000  00059873  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000560  00000000  00000000  000611d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000b872  00000000  00000000  00061730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__ctors_end>
       2:	00 00       	nop
       4:	ac c1       	rjmp	.+856    	; 0x35e <__bad_interrupt>
       6:	00 00       	nop
       8:	aa c1       	rjmp	.+852    	; 0x35e <__bad_interrupt>
       a:	00 00       	nop
       c:	a8 c1       	rjmp	.+848    	; 0x35e <__bad_interrupt>
       e:	00 00       	nop
      10:	a6 c1       	rjmp	.+844    	; 0x35e <__bad_interrupt>
      12:	00 00       	nop
      14:	a4 c1       	rjmp	.+840    	; 0x35e <__bad_interrupt>
      16:	00 00       	nop
      18:	a2 c1       	rjmp	.+836    	; 0x35e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a0 c1       	rjmp	.+832    	; 0x35e <__bad_interrupt>
      1e:	00 00       	nop
      20:	9e c1       	rjmp	.+828    	; 0x35e <__bad_interrupt>
      22:	00 00       	nop
      24:	9c c1       	rjmp	.+824    	; 0x35e <__bad_interrupt>
      26:	00 00       	nop
      28:	9a c1       	rjmp	.+820    	; 0x35e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	98 c1       	rjmp	.+816    	; 0x35e <__bad_interrupt>
      2e:	00 00       	nop
      30:	96 c1       	rjmp	.+812    	; 0x35e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_13>
      38:	92 c1       	rjmp	.+804    	; 0x35e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	90 c1       	rjmp	.+800    	; 0x35e <__bad_interrupt>
      3e:	00 00       	nop
      40:	8e c1       	rjmp	.+796    	; 0x35e <__bad_interrupt>
      42:	00 00       	nop
      44:	8c c1       	rjmp	.+792    	; 0x35e <__bad_interrupt>
      46:	00 00       	nop
      48:	8a c1       	rjmp	.+788    	; 0x35e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	88 c1       	rjmp	.+784    	; 0x35e <__bad_interrupt>
      4e:	00 00       	nop
      50:	86 c1       	rjmp	.+780    	; 0x35e <__bad_interrupt>
      52:	00 00       	nop
      54:	84 c1       	rjmp	.+776    	; 0x35e <__bad_interrupt>
      56:	00 00       	nop
      58:	82 c1       	rjmp	.+772    	; 0x35e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	80 c1       	rjmp	.+768    	; 0x35e <__bad_interrupt>
      5e:	00 00       	nop
      60:	7e c1       	rjmp	.+764    	; 0x35e <__bad_interrupt>
      62:	00 00       	nop
      64:	7c c1       	rjmp	.+760    	; 0x35e <__bad_interrupt>
      66:	00 00       	nop
      68:	7a c1       	rjmp	.+756    	; 0x35e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	78 c1       	rjmp	.+752    	; 0x35e <__bad_interrupt>
      6e:	00 00       	nop
      70:	76 c1       	rjmp	.+748    	; 0x35e <__bad_interrupt>
      72:	00 00       	nop
      74:	74 c1       	rjmp	.+744    	; 0x35e <__bad_interrupt>
      76:	00 00       	nop
      78:	72 c1       	rjmp	.+740    	; 0x35e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	70 c1       	rjmp	.+736    	; 0x35e <__bad_interrupt>
      7e:	00 00       	nop
      80:	6e c1       	rjmp	.+732    	; 0x35e <__bad_interrupt>
      82:	00 00       	nop
      84:	6c c1       	rjmp	.+728    	; 0x35e <__bad_interrupt>
      86:	00 00       	nop
      88:	6a c1       	rjmp	.+724    	; 0x35e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	68 c1       	rjmp	.+720    	; 0x35e <__bad_interrupt>
      8e:	00 00       	nop
      90:	66 c1       	rjmp	.+716    	; 0x35e <__bad_interrupt>
      92:	00 00       	nop
      94:	64 c1       	rjmp	.+712    	; 0x35e <__bad_interrupt>
      96:	00 00       	nop
      98:	62 c1       	rjmp	.+708    	; 0x35e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	60 c1       	rjmp	.+704    	; 0x35e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5e c1       	rjmp	.+700    	; 0x35e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5c c1       	rjmp	.+696    	; 0x35e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5a c1       	rjmp	.+692    	; 0x35e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	58 c1       	rjmp	.+688    	; 0x35e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	56 c1       	rjmp	.+684    	; 0x35e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	54 c1       	rjmp	.+680    	; 0x35e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__vector_46>
      bc:	50 c1       	rjmp	.+672    	; 0x35e <__bad_interrupt>
      be:	00 00       	nop
      c0:	4e c1       	rjmp	.+668    	; 0x35e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4c c1       	rjmp	.+664    	; 0x35e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4a c1       	rjmp	.+660    	; 0x35e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	48 c1       	rjmp	.+656    	; 0x35e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	46 c1       	rjmp	.+652    	; 0x35e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	44 c1       	rjmp	.+648    	; 0x35e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	42 c1       	rjmp	.+644    	; 0x35e <__bad_interrupt>
      da:	00 00       	nop
      dc:	40 c1       	rjmp	.+640    	; 0x35e <__bad_interrupt>
      de:	00 00       	nop
      e0:	3e c1       	rjmp	.+636    	; 0x35e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3c c1       	rjmp	.+632    	; 0x35e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	3a c1       	rjmp	.+628    	; 0x35e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	38 c1       	rjmp	.+624    	; 0x35e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	36 c1       	rjmp	.+620    	; 0x35e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	34 c1       	rjmp	.+616    	; 0x35e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	32 c1       	rjmp	.+612    	; 0x35e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	30 c1       	rjmp	.+608    	; 0x35e <__bad_interrupt>
      fe:	00 00       	nop
     100:	2e c1       	rjmp	.+604    	; 0x35e <__bad_interrupt>
     102:	00 00       	nop
     104:	2c c1       	rjmp	.+600    	; 0x35e <__bad_interrupt>
     106:	00 00       	nop
     108:	2a c1       	rjmp	.+596    	; 0x35e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	28 c1       	rjmp	.+592    	; 0x35e <__bad_interrupt>
     10e:	00 00       	nop
     110:	26 c1       	rjmp	.+588    	; 0x35e <__bad_interrupt>
     112:	00 00       	nop
     114:	24 c1       	rjmp	.+584    	; 0x35e <__bad_interrupt>
     116:	00 00       	nop
     118:	22 c1       	rjmp	.+580    	; 0x35e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	20 c1       	rjmp	.+576    	; 0x35e <__bad_interrupt>
     11e:	00 00       	nop
     120:	1e c1       	rjmp	.+572    	; 0x35e <__bad_interrupt>
     122:	00 00       	nop
     124:	1c c1       	rjmp	.+568    	; 0x35e <__bad_interrupt>
     126:	00 00       	nop
     128:	1a c1       	rjmp	.+564    	; 0x35e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	18 c1       	rjmp	.+560    	; 0x35e <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_76>
     134:	14 c1       	rjmp	.+552    	; 0x35e <__bad_interrupt>
     136:	00 00       	nop
     138:	12 c1       	rjmp	.+548    	; 0x35e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	10 c1       	rjmp	.+544    	; 0x35e <__bad_interrupt>
     13e:	00 00       	nop
     140:	0e c1       	rjmp	.+540    	; 0x35e <__bad_interrupt>
     142:	00 00       	nop
     144:	0c c1       	rjmp	.+536    	; 0x35e <__bad_interrupt>
     146:	00 00       	nop
     148:	0a c1       	rjmp	.+532    	; 0x35e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	08 c1       	rjmp	.+528    	; 0x35e <__bad_interrupt>
     14e:	00 00       	nop
     150:	06 c1       	rjmp	.+524    	; 0x35e <__bad_interrupt>
     152:	00 00       	nop
     154:	04 c1       	rjmp	.+520    	; 0x35e <__bad_interrupt>
     156:	00 00       	nop
     158:	02 c1       	rjmp	.+516    	; 0x35e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	00 c1       	rjmp	.+512    	; 0x35e <__bad_interrupt>
     15e:	00 00       	nop
     160:	fe c0       	rjmp	.+508    	; 0x35e <__bad_interrupt>
     162:	00 00       	nop
     164:	fc c0       	rjmp	.+504    	; 0x35e <__bad_interrupt>
     166:	00 00       	nop
     168:	fa c0       	rjmp	.+500    	; 0x35e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f8 c0       	rjmp	.+496    	; 0x35e <__bad_interrupt>
     16e:	00 00       	nop
     170:	f6 c0       	rjmp	.+492    	; 0x35e <__bad_interrupt>
     172:	00 00       	nop
     174:	f4 c0       	rjmp	.+488    	; 0x35e <__bad_interrupt>
     176:	00 00       	nop
     178:	f2 c0       	rjmp	.+484    	; 0x35e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	f0 c0       	rjmp	.+480    	; 0x35e <__bad_interrupt>
     17e:	00 00       	nop
     180:	ee c0       	rjmp	.+476    	; 0x35e <__bad_interrupt>
     182:	00 00       	nop
     184:	ec c0       	rjmp	.+472    	; 0x35e <__bad_interrupt>
     186:	00 00       	nop
     188:	ea c0       	rjmp	.+468    	; 0x35e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e8 c0       	rjmp	.+464    	; 0x35e <__bad_interrupt>
     18e:	00 00       	nop
     190:	e6 c0       	rjmp	.+460    	; 0x35e <__bad_interrupt>
     192:	00 00       	nop
     194:	e4 c0       	rjmp	.+456    	; 0x35e <__bad_interrupt>
     196:	00 00       	nop
     198:	e2 c0       	rjmp	.+452    	; 0x35e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	e0 c0       	rjmp	.+448    	; 0x35e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	df c0       	rjmp	.+446    	; 0x360 <__vector_104>
     1a2:	00 00       	nop
     1a4:	dc c0       	rjmp	.+440    	; 0x35e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	da c0       	rjmp	.+436    	; 0x35e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__vector_107>
     1b0:	d6 c0       	rjmp	.+428    	; 0x35e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	d4 c0       	rjmp	.+424    	; 0x35e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	d2 c0       	rjmp	.+420    	; 0x35e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	d0 c0       	rjmp	.+416    	; 0x35e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ce c0       	rjmp	.+412    	; 0x35e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	cc c0       	rjmp	.+408    	; 0x35e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ca c0       	rjmp	.+404    	; 0x35e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c8 c0       	rjmp	.+400    	; 0x35e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	c6 c0       	rjmp	.+396    	; 0x35e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	c4 c0       	rjmp	.+392    	; 0x35e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	c2 c0       	rjmp	.+388    	; 0x35e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	c0 c0       	rjmp	.+384    	; 0x35e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	be c0       	rjmp	.+380    	; 0x35e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	bc c0       	rjmp	.+376    	; 0x35e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ba c0       	rjmp	.+372    	; 0x35e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b8 c0       	rjmp	.+368    	; 0x35e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	b6 c0       	rjmp	.+364    	; 0x35e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	35 06       	cpc	r3, r21
     1f6:	58 07       	cpc	r21, r24
     1f8:	77 05       	cpc	r23, r7
     1fa:	58 07       	cpc	r21, r24
     1fc:	58 07       	cpc	r21, r24
     1fe:	58 07       	cpc	r21, r24
     200:	d5 06       	cpc	r13, r21
     202:	58 07       	cpc	r21, r24
     204:	71 06       	cpc	r7, r17
     206:	ca 05       	cpc	r28, r10
     208:	58 07       	cpc	r21, r24
     20a:	58 07       	cpc	r21, r24
     20c:	b6 05       	cpc	r27, r6
     20e:	c0 05       	cpc	r28, r0

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e3       	ldi	r29, 0x3F	; 63
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60
     322:	18 be       	out	0x38, r1	; 56
     324:	19 be       	out	0x39, r1	; 57
     326:	1a be       	out	0x3a, r1	; 58
     328:	1b be       	out	0x3b, r1	; 59

0000032a <__do_copy_data>:
     32a:	11 e2       	ldi	r17, 0x21	; 33
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	b0 e2       	ldi	r27, 0x20	; 32
     330:	ee e1       	ldi	r30, 0x1E	; 30
     332:	f7 e3       	ldi	r31, 0x37	; 55
     334:	00 e0       	ldi	r16, 0x00	; 0
     336:	0b bf       	out	0x3b, r16	; 59
     338:	02 c0       	rjmp	.+4      	; 0x33e <__do_copy_data+0x14>
     33a:	07 90       	elpm	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	a2 3f       	cpi	r26, 0xF2	; 242
     340:	b1 07       	cpc	r27, r17
     342:	d9 f7       	brne	.-10     	; 0x33a <__do_copy_data+0x10>
     344:	1b be       	out	0x3b, r1	; 59

00000346 <__do_clear_bss>:
     346:	22 e2       	ldi	r18, 0x22	; 34
     348:	a2 ef       	ldi	r26, 0xF2	; 242
     34a:	b1 e2       	ldi	r27, 0x21	; 33
     34c:	01 c0       	rjmp	.+2      	; 0x350 <.do_clear_bss_start>

0000034e <.do_clear_bss_loop>:
     34e:	1d 92       	st	X+, r1

00000350 <.do_clear_bss_start>:
     350:	a1 32       	cpi	r26, 0x21	; 33
     352:	b2 07       	cpc	r27, r18
     354:	e1 f7       	brne	.-8      	; 0x34e <.do_clear_bss_loop>
     356:	0e 94 54 13 	call	0x26a8	; 0x26a8 <main>
     35a:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <_exit>

0000035e <__bad_interrupt>:
     35e:	50 ce       	rjmp	.-864    	; 0x0 <__vectors>

00000360 <__vector_104>:
 * the argument specified when the handler was installed..
 *
 * \return  Nothing.
 */
ISR(SENSOR_BOARD_PORT_vect)
{
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	0f 92       	push	r0
     368:	11 24       	eor	r1, r1
     36a:	08 b6       	in	r0, 0x38	; 56
     36c:	0f 92       	push	r0
     36e:	18 be       	out	0x38, r1	; 56
     370:	09 b6       	in	r0, 0x39	; 57
     372:	0f 92       	push	r0
     374:	19 be       	out	0x39, r1	; 57
     376:	0b b6       	in	r0, 0x3b	; 59
     378:	0f 92       	push	r0
     37a:	1b be       	out	0x3b, r1	; 59
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	af 93       	push	r26
     38e:	bf 93       	push	r27
     390:	ef 93       	push	r30
     392:	ff 93       	push	r31
	PORT_t *const port = &(SENSOR_BOARD_PORT);

	/* Call the interrupt handler (if any). */
	if (sensor_pin3_handler && (port->IN & PIN2_bm)) {
     394:	e0 91 fc 21 	lds	r30, 0x21FC	; 0x8021fc <sensor_pin3_handler>
     398:	f0 91 fd 21 	lds	r31, 0x21FD	; 0x8021fd <sensor_pin3_handler+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	51 f0       	breq	.+20     	; 0x3b4 <__vector_104+0x54>
     3a0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3a4:	82 ff       	sbrs	r24, 2
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <__vector_104+0x54>
		/* Note: header pin 3 = io port pin 2 */
		sensor_pin3_handler(sensor_pin3_arg);
     3a8:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <sensor_pin3_arg>
     3ac:	90 91 fb 21 	lds	r25, 0x21FB	; 0x8021fb <sensor_pin3_arg+0x1>
     3b0:	19 95       	eicall
     3b2:	1f c0       	rjmp	.+62     	; 0x3f2 <__vector_104+0x92>
	} else if (sensor_pin4_handler && (port->IN & PIN3_bm)) {
     3b4:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <sensor_pin4_handler>
     3b8:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <sensor_pin4_handler+0x1>
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	51 f0       	breq	.+20     	; 0x3d4 <__vector_104+0x74>
     3c0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3c4:	83 ff       	sbrs	r24, 3
     3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <__vector_104+0x74>
		/* Note: header pin 4 = io port pin 3 */
		sensor_pin4_handler(sensor_pin4_arg);
     3c8:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <sensor_pin4_arg>
     3cc:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <sensor_pin4_arg+0x1>
     3d0:	19 95       	eicall
     3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <__vector_104+0x92>
	} else if (sensor_pin5_handler && (port->IN & PIN4_bm)) {
     3d4:	e0 91 f4 21 	lds	r30, 0x21F4	; 0x8021f4 <sensor_pin5_handler>
     3d8:	f0 91 f5 21 	lds	r31, 0x21F5	; 0x8021f5 <sensor_pin5_handler+0x1>
     3dc:	30 97       	sbiw	r30, 0x00	; 0
     3de:	49 f0       	breq	.+18     	; 0x3f2 <__vector_104+0x92>
     3e0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
     3e4:	84 ff       	sbrs	r24, 4
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <__vector_104+0x92>
		/* Note: header pin 5 = io port pin 4 */
		sensor_pin5_handler(sensor_pin5_arg);
     3e8:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <__data_end>
     3ec:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <__data_end+0x1>
     3f0:	19 95       	eicall
	}

	/* Clear the port interrupt flag */
	port->INTFLAGS = PORT_INT0IF_bm;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <__TEXT_REGION_LENGTH__+0x7006ac>
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	0f 90       	pop	r0
     412:	0b be       	out	0x3b, r0	; 59
     414:	0f 90       	pop	r0
     416:	09 be       	out	0x39, r0	; 57
     418:	0f 90       	pop	r0
     41a:	08 be       	out	0x38, r0	; 56
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <sensor_board_irq_connect>:
 *
 * \return  bool        true if the call succeeds, else false.
 */
bool sensor_board_irq_connect(uint32_t gpio_pin,
		SENSOR_IRQ_HANDLER handler, void *arg)
{
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	00 d0       	rcall	.+0      	; 0x42c <sensor_board_irq_connect+0x6>
     42c:	1f 92       	push	r1
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	f9 01       	movw	r30, r18
	PORT_t *sensor_port;
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
     434:	41 15       	cp	r20, r1
     436:	51 05       	cpc	r21, r1
     438:	09 f4       	brne	.+2      	; 0x43c <sensor_board_irq_connect+0x16>
     43a:	6e c0       	rjmp	.+220    	; 0x518 <sensor_board_irq_connect+0xf2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     43c:	3f b7       	in	r19, 0x3f	; 63
     43e:	3c 83       	std	Y+4, r19	; 0x04
	cpu_irq_disable();
     440:	f8 94       	cli
	return flags;
     442:	3c 81       	ldd	r19, Y+4	; 0x04

	/* Save the interrupt flag state and disable MCU interrupts. */

	irqflags_t const irq_flags = cpu_irq_save();

	cpu_irq_disable();
     444:	f8 94       	cli

	/* Initialize an interrupt for a specified I/O pin. */

	if (SENSOR_BOARD_PIN3 == gpio_pin) {
     446:	6a 32       	cpi	r22, 0x2A	; 42
     448:	71 05       	cpc	r23, r1
     44a:	81 05       	cpc	r24, r1
     44c:	91 05       	cpc	r25, r1
     44e:	e9 f4       	brne	.+58     	; 0x48a <sensor_board_irq_connect+0x64>
		sensor_pin3_handler = handler;
     450:	40 93 fc 21 	sts	0x21FC, r20	; 0x8021fc <sensor_pin3_handler>
     454:	50 93 fd 21 	sts	0x21FD, r21	; 0x8021fd <sensor_pin3_handler+0x1>
		sensor_pin3_arg     = arg;
     458:	e0 93 fa 21 	sts	0x21FA, r30	; 0x8021fa <sensor_pin3_arg>
     45c:	f0 93 fb 21 	sts	0x21FB, r31	; 0x8021fb <sensor_pin3_arg+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN3_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN3);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     460:	e0 ea       	ldi	r30, 0xA0	; 160
     462:	f6 e0       	ldi	r31, 0x06	; 6
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN3);
     468:	82 85       	ldd	r24, Z+10	; 0x0a
     46a:	84 60       	ori	r24, 0x04	; 4
     46c:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     46e:	8f b7       	in	r24, 0x3f	; 63
     470:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     472:	f8 94       	cli
	return flags;
     474:	9b 81       	ldd	r25, Y+3	; 0x03
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     476:	e2 eb       	ldi	r30, 0xB2	; 178
     478:	f6 e0       	ldi	r31, 0x06	; 6
     47a:	80 81       	ld	r24, Z
     47c:	88 7f       	andi	r24, 0xF8	; 248
     47e:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     480:	80 81       	ld	r24, Z
     482:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     484:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN3,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	45 c0       	rjmp	.+138    	; 0x514 <sensor_board_irq_connect+0xee>
	} else if (SENSOR_BOARD_PIN4 == gpio_pin) {
     48a:	6b 32       	cpi	r22, 0x2B	; 43
     48c:	71 05       	cpc	r23, r1
     48e:	81 05       	cpc	r24, r1
     490:	91 05       	cpc	r25, r1
     492:	e9 f4       	brne	.+58     	; 0x4ce <sensor_board_irq_connect+0xa8>
		sensor_pin4_handler = handler;
     494:	40 93 f8 21 	sts	0x21F8, r20	; 0x8021f8 <sensor_pin4_handler>
     498:	50 93 f9 21 	sts	0x21F9, r21	; 0x8021f9 <sensor_pin4_handler+0x1>
		sensor_pin4_arg     = arg;
     49c:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <sensor_pin4_arg>
     4a0:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <sensor_pin4_arg+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN4_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN4);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     4a4:	e0 ea       	ldi	r30, 0xA0	; 160
     4a6:	f6 e0       	ldi	r31, 0x06	; 6
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN4);
     4ac:	82 85       	ldd	r24, Z+10	; 0x0a
     4ae:	88 60       	ori	r24, 0x08	; 8
     4b0:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4b2:	8f b7       	in	r24, 0x3f	; 63
     4b4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     4b6:	f8 94       	cli
	return flags;
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     4ba:	e3 eb       	ldi	r30, 0xB3	; 179
     4bc:	f6 e0       	ldi	r31, 0x06	; 6
     4be:	80 81       	ld	r24, Z
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     4c4:	80 81       	ld	r24, Z
     4c6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4c8:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN4,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	23 c0       	rjmp	.+70     	; 0x514 <sensor_board_irq_connect+0xee>
	} else if (SENSOR_BOARD_PIN5 == gpio_pin) {
     4ce:	6c 32       	cpi	r22, 0x2C	; 44
     4d0:	71 05       	cpc	r23, r1
     4d2:	81 05       	cpc	r24, r1
     4d4:	91 05       	cpc	r25, r1
     4d6:	e9 f4       	brne	.+58     	; 0x512 <sensor_board_irq_connect+0xec>
		sensor_pin5_handler = handler;
     4d8:	40 93 f4 21 	sts	0x21F4, r20	; 0x8021f4 <sensor_pin5_handler>
     4dc:	50 93 f5 21 	sts	0x21F5, r21	; 0x8021f5 <sensor_pin5_handler+0x1>
		sensor_pin5_arg     = arg;
     4e0:	e0 93 f2 21 	sts	0x21F2, r30	; 0x8021f2 <__data_end>
     4e4:	f0 93 f3 21 	sts	0x21F3, r31	; 0x8021f3 <__data_end+0x1>
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN5_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN5);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     4e8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ea:	f6 e0       	ldi	r31, 0x06	; 6
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN5);
     4f0:	82 85       	ldd	r24, Z+10	; 0x0a
     4f2:	80 61       	ori	r24, 0x10	; 16
     4f4:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4f6:	8f b7       	in	r24, 0x3f	; 63
     4f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4fa:	f8 94       	cli
	return flags;
     4fc:	99 81       	ldd	r25, Y+1	; 0x01
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     4fe:	e4 eb       	ldi	r30, 0xB4	; 180
     500:	f6 e0       	ldi	r31, 0x06	; 6
     502:	80 81       	ld	r24, Z
     504:	88 7f       	andi	r24, 0xF8	; 248
     506:	80 83       	st	Z, r24
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     508:	80 81       	ld	r24, Z
     50a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     50c:	9f bf       	out	0x3f, r25	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN5,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	01 c0       	rjmp	.+2      	; 0x514 <sensor_board_irq_connect+0xee>
 * \return  bool        true if the call succeeds, else false.
 */
bool sensor_board_irq_connect(uint32_t gpio_pin,
		SENSOR_IRQ_HANDLER handler, void *arg)
{
	bool status = false;
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	3f bf       	out	0x3f, r19	; 63

	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
     516:	01 c0       	rjmp	.+2      	; 0x51a <sensor_board_irq_connect+0xf4>
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
		return status;
     518:	80 e0       	ldi	r24, 0x00	; 0
	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
}
     51a:	24 96       	adiw	r28, 0x04	; 4
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	de bf       	out	0x3e, r29	; 62
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <sensor_board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	80 ea       	ldi	r24, 0xA0	; 160
     52e:	96 e0       	ldi	r25, 0x06	; 6
     530:	6e d0       	rcall	.+220    	; 0x60e <ioport_configure_port_pin>
#elif (EXT_BOARD == SENSORS_XPLAINED_BREADBOARD)
	gpio_configure_pin(SENSOR_BOARD_PIN4, PIN_INPUT_FLAGS);
#endif

	/* Global Interrupt Disable */
	cpu_irq_disable();
     532:	f8 94       	cli

	/* Initialize interrupt vector table support. */
	irq_initialize_vectors();
     534:	87 e0       	ldi	r24, 0x07	; 7
     536:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	/* Global Interrupt Enable */
	cpu_irq_enable();
     53a:	78 94       	sei
     53c:	08 95       	ret

0000053e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	00 d0       	rcall	.+0      	; 0x544 <sysclk_init+0x6>
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     54e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     552:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     556:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     55a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     55e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     562:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	81 e4       	ldi	r24, 0x41	; 65
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     570:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     574:	84 fd       	sbrc	r24, 4
     576:	20 c0       	rjmp	.+64     	; 0x5b8 <sysclk_init+0x7a>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     578:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     57c:	81 fd       	sbrc	r24, 1
     57e:	0d c0       	rjmp	.+26     	; 0x59a <sysclk_init+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     580:	8f b7       	in	r24, 0x3f	; 63
     582:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     584:	f8 94       	cli
	return flags;
     586:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     588:	e0 e5       	ldi	r30, 0x50	; 80
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	82 60       	ori	r24, 0x02	; 2
     590:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     592:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     594:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     596:	81 ff       	sbrs	r24, 1
     598:	fd cf       	rjmp	.-6      	; 0x594 <sysclk_init+0x56>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     59a:	8f b7       	in	r24, 0x3f	; 63
     59c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     59e:	f8 94       	cli
	return flags;
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     5a2:	e0 e5       	ldi	r30, 0x50	; 80
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	88 e8       	ldi	r24, 0x88	; 136
     5a8:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     5aa:	80 81       	ld	r24, Z
     5ac:	80 61       	ori	r24, 0x10	; 16
     5ae:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5b0:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     5b2:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     5b4:	84 ff       	sbrs	r24, 4
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <sysclk_init+0x74>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     5b8:	64 e0       	ldi	r22, 0x04	; 4
     5ba:	80 e4       	ldi	r24, 0x40	; 64
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5c2:	8f b7       	in	r24, 0x3f	; 63
     5c4:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     5c6:	f8 94       	cli
	return flags;
     5c8:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     5ca:	e0 e5       	ldi	r30, 0x50	; 80
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	80 81       	ld	r24, Z
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5d4:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     5d6:	23 96       	adiw	r28, 0x03	; 3
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5ec:	9f b7       	in	r25, 0x3f	; 63
     5ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     5f0:	f8 94       	cli
	return flags;
     5f2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     5f4:	e8 2f       	mov	r30, r24
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e0 59       	subi	r30, 0x90	; 144
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	60 95       	com	r22
     5fe:	80 81       	ld	r24, Z
     600:	68 23       	and	r22, r24
     602:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     604:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     606:	0f 90       	pop	r0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     618:	c6 2f       	mov	r28, r22
     61a:	d0 e0       	ldi	r29, 0x00	; 0
     61c:	de 01       	movw	r26, r28
     61e:	02 2e       	mov	r0, r18
     620:	02 c0       	rjmp	.+4      	; 0x626 <ioport_configure_port_pin+0x18>
     622:	b5 95       	asr	r27
     624:	a7 95       	ror	r26
     626:	0a 94       	dec	r0
     628:	e2 f7       	brpl	.-8      	; 0x622 <ioport_configure_port_pin+0x14>
     62a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     62c:	50 8b       	std	Z+16, r21	; 0x10
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     634:	28 30       	cpi	r18, 0x08	; 8
     636:	31 05       	cpc	r19, r1
     638:	89 f7       	brne	.-30     	; 0x61c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     63a:	40 ff       	sbrs	r20, 0
     63c:	0a c0       	rjmp	.+20     	; 0x652 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     63e:	41 ff       	sbrs	r20, 1
     640:	03 c0       	rjmp	.+6      	; 0x648 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     642:	fc 01       	movw	r30, r24
     644:	65 83       	std	Z+5, r22	; 0x05
     646:	02 c0       	rjmp	.+4      	; 0x64c <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     648:	fc 01       	movw	r30, r24
     64a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     64c:	fc 01       	movw	r30, r24
     64e:	61 83       	std	Z+1, r22	; 0x01
     650:	02 c0       	rjmp	.+4      	; 0x656 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     652:	fc 01       	movw	r30, r24
     654:	62 83       	std	Z+2, r22	; 0x02
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <sfh7770_event>:
 * @param  enable    Enable flag: true = enable event, false = disable event
 * @return bool      true if the call succeeds, else false is returned
 */
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
     65c:	af 92       	push	r10
     65e:	bf 92       	push	r11
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	1f 92       	push	r1
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	7b 01       	movw	r14, r22
     67a:	6a 01       	movw	r12, r20
     67c:	a2 2e       	mov	r10, r18
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;

	uint8_t int_set = sensor_bus_get(hal, SFH7770_INT_SET);
     67e:	fc 01       	movw	r30, r24
     680:	00 81       	ld	r16, Z
     682:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     684:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	ae 01       	movw	r20, r28
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	62 e9       	ldi	r22, 0x92	; 146
     692:	c8 01       	movw	r24, r16
     694:	0e 94 1e 0c 	call	0x183c	; 0x183c <bus_read>

	return data;
     698:	89 81       	ldd	r24, Y+1	; 0x01

	if (sensor_event & SENSOR_EVENT_NEAR_PROXIMITY) {
     69a:	f0 fe       	sbrs	r15, 0
     69c:	1a c0       	rjmp	.+52     	; 0x6d2 <sfh7770_event+0x76>
		if (callback) {
     69e:	c1 14       	cp	r12, r1
     6a0:	d1 04       	cpc	r13, r1
     6a2:	69 f0       	breq	.+26     	; 0x6be <sfh7770_event+0x62>
			event_cb[0] = *callback;
     6a4:	f6 01       	movw	r30, r12
     6a6:	40 81       	ld	r20, Z
     6a8:	51 81       	ldd	r21, Z+1	; 0x01
     6aa:	62 81       	ldd	r22, Z+2	; 0x02
     6ac:	73 81       	ldd	r23, Z+3	; 0x03
     6ae:	40 93 1b 20 	sts	0x201B, r20	; 0x80201b <event_cb>
     6b2:	50 93 1c 20 	sts	0x201C, r21	; 0x80201c <event_cb+0x1>
     6b6:	60 93 1d 20 	sts	0x201D, r22	; 0x80201d <event_cb+0x2>
     6ba:	70 93 1e 20 	sts	0x201E, r23	; 0x80201e <event_cb+0x3>
		}

		if (enable) {
     6be:	aa 20       	and	r10, r10
     6c0:	21 f0       	breq	.+8      	; 0x6ca <sfh7770_event+0x6e>
			int_set |= INT_MODE_PS;
     6c2:	81 60       	ori	r24, 0x01	; 1
		} else {
			int_set &= ~INT_MODE_PS;
		}

		status = true;
     6c4:	bb 24       	eor	r11, r11
     6c6:	b3 94       	inc	r11
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <sfh7770_event+0x78>
		}

		if (enable) {
			int_set |= INT_MODE_PS;
		} else {
			int_set &= ~INT_MODE_PS;
     6ca:	8e 7f       	andi	r24, 0xFE	; 254
		}

		status = true;
     6cc:	bb 24       	eor	r11, r11
     6ce:	b3 94       	inc	r11
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <sfh7770_event+0x78>
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     6d2:	b1 2c       	mov	r11, r1
		}

		status = true;
	}

	if (sensor_event & SENSOR_EVENT_LOW_LIGHT) {
     6d4:	f3 fe       	sbrs	r15, 3
     6d6:	19 c0       	rjmp	.+50     	; 0x70a <sfh7770_event+0xae>
		if (callback) {
     6d8:	c1 14       	cp	r12, r1
     6da:	d1 04       	cpc	r13, r1
     6dc:	69 f0       	breq	.+26     	; 0x6f8 <sfh7770_event+0x9c>
			event_cb[1] = *callback;
     6de:	f6 01       	movw	r30, r12
     6e0:	40 81       	ld	r20, Z
     6e2:	51 81       	ldd	r21, Z+1	; 0x01
     6e4:	62 81       	ldd	r22, Z+2	; 0x02
     6e6:	73 81       	ldd	r23, Z+3	; 0x03
     6e8:	40 93 1f 20 	sts	0x201F, r20	; 0x80201f <event_cb+0x4>
     6ec:	50 93 20 20 	sts	0x2020, r21	; 0x802020 <event_cb+0x5>
     6f0:	60 93 21 20 	sts	0x2021, r22	; 0x802021 <event_cb+0x6>
     6f4:	70 93 22 20 	sts	0x2022, r23	; 0x802022 <event_cb+0x7>
		}

		if (enable) {
     6f8:	aa 20       	and	r10, r10
     6fa:	21 f0       	breq	.+8      	; 0x704 <sfh7770_event+0xa8>
			int_set |= INT_MODE_ALS;
     6fc:	82 60       	ori	r24, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     6fe:	bb 24       	eor	r11, r11
     700:	b3 94       	inc	r11
     702:	03 c0       	rjmp	.+6      	; 0x70a <sfh7770_event+0xae>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     704:	8d 7f       	andi	r24, 0xFD	; 253
		}

		status = true;
     706:	bb 24       	eor	r11, r11
     708:	b3 94       	inc	r11
	}

	if (sensor_event & SENSOR_EVENT_HIGH_LIGHT) {
     70a:	f4 fe       	sbrs	r15, 4
     70c:	19 c0       	rjmp	.+50     	; 0x740 <sfh7770_event+0xe4>
		if (callback) {
     70e:	c1 14       	cp	r12, r1
     710:	d1 04       	cpc	r13, r1
     712:	69 f0       	breq	.+26     	; 0x72e <sfh7770_event+0xd2>
			event_cb[2] = *callback;
     714:	f6 01       	movw	r30, r12
     716:	40 81       	ld	r20, Z
     718:	51 81       	ldd	r21, Z+1	; 0x01
     71a:	62 81       	ldd	r22, Z+2	; 0x02
     71c:	73 81       	ldd	r23, Z+3	; 0x03
     71e:	40 93 23 20 	sts	0x2023, r20	; 0x802023 <event_cb+0x8>
     722:	50 93 24 20 	sts	0x2024, r21	; 0x802024 <event_cb+0x9>
     726:	60 93 25 20 	sts	0x2025, r22	; 0x802025 <event_cb+0xa>
     72a:	70 93 26 20 	sts	0x2026, r23	; 0x802026 <event_cb+0xb>
		}

		if (enable) {
     72e:	aa 20       	and	r10, r10
     730:	21 f0       	breq	.+8      	; 0x73a <sfh7770_event+0xde>
			int_set |= INT_MODE_ALS;
     732:	82 60       	ori	r24, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     734:	bb 24       	eor	r11, r11
     736:	b3 94       	inc	r11
     738:	03 c0       	rjmp	.+6      	; 0x740 <sfh7770_event+0xe4>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     73a:	8d 7f       	andi	r24, 0xFD	; 253
		}

		status = true;
     73c:	bb 24       	eor	r11, r11
     73e:	b3 94       	inc	r11
     740:	89 83       	std	Y+1, r24	; 0x01
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	ae 01       	movw	r20, r28
     748:	4f 5f       	subi	r20, 0xFF	; 255
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	62 e9       	ldi	r22, 0x92	; 146
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 5f 0c 	call	0x18be	; 0x18be <bus_write>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     754:	1a 82       	std	Y+2, r1	; 0x02
	bus_read(bus, addr, &data, sizeof(uint8_t));
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	ae 01       	movw	r20, r28
     75c:	4e 5f       	subi	r20, 0xFE	; 254
     75e:	5f 4f       	sbci	r21, 0xFF	; 255
     760:	62 e9       	ldi	r22, 0x92	; 146
     762:	c8 01       	movw	r24, r16
     764:	0e 94 1e 0c 	call	0x183c	; 0x183c <bus_read>
	sensor_bus_put(hal, SFH7770_INT_SET, int_set);

	int_set = sensor_bus_get(hal, SFH7770_INT_SET);

	return status;
}
     768:	8b 2d       	mov	r24, r11
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret

00000784 <sfh7770_read>:
 * @param data      The address where data values are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_read(sensor_t *sensor, sensor_read_t type,
		sensor_data_t *data)
{
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	00 d0       	rcall	.+0      	; 0x78e <sfh7770_read+0xa>
     78e:	1f 92       	push	r1
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	fc 01       	movw	r30, r24
     796:	8a 01       	movw	r16, r20
	sensor_hal_t *const hal = sensor->hal;
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01

	switch (type) {
     79c:	65 30       	cpi	r22, 0x05	; 5
     79e:	31 f0       	breq	.+12     	; 0x7ac <sfh7770_read+0x28>
     7a0:	67 30       	cpi	r22, 0x07	; 7
     7a2:	09 f1       	breq	.+66     	; 0x7e6 <sfh7770_read+0x62>
     7a4:	63 30       	cpi	r22, 0x03	; 3
     7a6:	09 f0       	breq	.+2      	; 0x7aa <sfh7770_read+0x26>
     7a8:	95 c0       	rjmp	.+298    	; 0x8d4 <sfh7770_read+0x150>
     7aa:	76 c0       	rjmp	.+236    	; 0x898 <sfh7770_read+0x114>
	light_data;

	/* Read and combine two light level data registers
	 *   NOTE:  LSB register must be read first!
	 */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_DATA_LSB,
     7ac:	22 e0       	ldi	r18, 0x02	; 2
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	ae 01       	movw	r20, r28
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
     7b4:	5f 4f       	sbci	r21, 0xFF	; 255
     7b6:	6c e8       	ldi	r22, 0x8C	; 140
     7b8:	0e 94 1e 0c 	call	0x183c	; 0x183c <bus_read>
			(uint8_t *)&light_data, sizeof(light_data));

	/* Device uses lux for internal values, so raw is the same as scaled */
	data->light.value = (uint32_t)((light_data.msb << 8) | light_data.lsb);
     7bc:	4a 81       	ldd	r20, Y+2	; 0x02
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	54 2f       	mov	r21, r20
     7c2:	44 27       	eor	r20, r20
     7c4:	29 81       	ldd	r18, Y+1	; 0x01
     7c6:	42 2b       	or	r20, r18
     7c8:	05 2e       	mov	r0, r21
     7ca:	00 0c       	add	r0, r0
     7cc:	66 0b       	sbc	r22, r22
     7ce:	77 0b       	sbc	r23, r23
     7d0:	f8 01       	movw	r30, r16
     7d2:	40 83       	st	Z, r20
     7d4:	51 83       	std	Z+1, r21	; 0x01
     7d6:	62 83       	std	Z+2, r22	; 0x02
     7d8:	73 83       	std	Z+3, r23	; 0x03

	return (count == sizeof(light_data));
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	02 97       	sbiw	r24, 0x02	; 2
     7de:	09 f4       	brne	.+2      	; 0x7e2 <sfh7770_read+0x5e>
     7e0:	7e c0       	rjmp	.+252    	; 0x8de <sfh7770_read+0x15a>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
{
	sensor_hal_t *const hal = sensor->hal;

	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);
     7e4:	7c c0       	rjmp	.+248    	; 0x8de <sfh7770_read+0x15a>
		uint8_t ps_data_led3;
	}
	regs;

	/* Read three LED proximity measurements + status */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_PS_STATUS,
     7e6:	24 e0       	ldi	r18, 0x04	; 4
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	ae 01       	movw	r20, r28
     7ec:	4f 5f       	subi	r20, 0xFF	; 255
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255
     7f0:	6e e8       	ldi	r22, 0x8E	; 142
     7f2:	0e 94 1e 0c 	call	0x183c	; 0x183c <bus_read>
			(uint8_t *)&regs, sizeof(regs));

	/* Fill in return values based on "scaled" or raw selection */
	if (data->scaled) {
     7f6:	f8 01       	movw	r30, r16
     7f8:	20 89       	ldd	r18, Z+16	; 0x10
     7fa:	22 23       	and	r18, r18
     7fc:	79 f1       	breq	.+94     	; 0x85c <sfh7770_read+0xd8>
		/* Use internal device threshold status to determine values */
		data->proximity.value[0]
			= (regs.als_ps_status & PS_LED1_THRESH) ?
     7fe:	29 81       	ldd	r18, Y+1	; 0x01
     800:	21 fd       	sbrc	r18, 1
     802:	04 c0       	rjmp	.+8      	; 0x80c <sfh7770_read+0x88>
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	ba 01       	movw	r22, r20
     80a:	04 c0       	rjmp	.+8      	; 0x814 <sfh7770_read+0x90>
     80c:	43 e0       	ldi	r20, 0x03	; 3
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	f8 01       	movw	r30, r16
     816:	40 83       	st	Z, r20
     818:	51 83       	std	Z+1, r21	; 0x01
     81a:	62 83       	std	Z+2, r22	; 0x02
     81c:	73 83       	std	Z+3, r23	; 0x03
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[1]
			= (regs.als_ps_status & PS_LED2_THRESH) ?
     81e:	23 fd       	sbrc	r18, 3
     820:	04 c0       	rjmp	.+8      	; 0x82a <sfh7770_read+0xa6>
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	ba 01       	movw	r22, r20
     828:	04 c0       	rjmp	.+8      	; 0x832 <sfh7770_read+0xae>
     82a:	43 e0       	ldi	r20, 0x03	; 3
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	f8 01       	movw	r30, r16
     834:	44 83       	std	Z+4, r20	; 0x04
     836:	55 83       	std	Z+5, r21	; 0x05
     838:	66 83       	std	Z+6, r22	; 0x06
     83a:	77 83       	std	Z+7, r23	; 0x07
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[2]
			= (regs.als_ps_status & PS_LED3_THRESH) ?
     83c:	25 fd       	sbrc	r18, 5
     83e:	04 c0       	rjmp	.+8      	; 0x848 <sfh7770_read+0xc4>
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	ba 01       	movw	r22, r20
     846:	04 c0       	rjmp	.+8      	; 0x850 <sfh7770_read+0xcc>
     848:	43 e0       	ldi	r20, 0x03	; 3
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	f8 01       	movw	r30, r16
     852:	40 87       	std	Z+8, r20	; 0x08
     854:	51 87       	std	Z+9, r21	; 0x09
     856:	62 87       	std	Z+10, r22	; 0x0a
     858:	73 87       	std	Z+11, r23	; 0x0b
     85a:	19 c0       	rjmp	.+50     	; 0x88e <sfh7770_read+0x10a>
				PROXIMITY_NEAR : PROXIMITY_NONE;
	} else {
		/* Use internal raw values */
		data->proximity.value[0] = (int32_t)regs.ps_data_led1;
     85c:	4a 81       	ldd	r20, Y+2	; 0x02
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	f8 01       	movw	r30, r16
     866:	40 83       	st	Z, r20
     868:	51 83       	std	Z+1, r21	; 0x01
     86a:	62 83       	std	Z+2, r22	; 0x02
     86c:	73 83       	std	Z+3, r23	; 0x03
		data->proximity.value[1] = (int32_t)regs.ps_data_led2;
     86e:	4b 81       	ldd	r20, Y+3	; 0x03
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	44 83       	std	Z+4, r20	; 0x04
     878:	55 83       	std	Z+5, r21	; 0x05
     87a:	66 83       	std	Z+6, r22	; 0x06
     87c:	77 83       	std	Z+7, r23	; 0x07
		data->proximity.value[2] = (int32_t)regs.ps_data_led3;
     87e:	4c 81       	ldd	r20, Y+4	; 0x04
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	40 87       	std	Z+8, r20	; 0x08
     888:	51 87       	std	Z+9, r21	; 0x09
     88a:	62 87       	std	Z+10, r22	; 0x0a
     88c:	73 87       	std	Z+11, r23	; 0x0b
	}

	return (count == sizeof(regs));
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	04 97       	sbiw	r24, 0x04	; 4
     892:	29 f1       	breq	.+74     	; 0x8de <sfh7770_read+0x15a>
     894:	20 e0       	ldi	r18, 0x00	; 0
	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);
     896:	23 c0       	rjmp	.+70     	; 0x8de <sfh7770_read+0x15a>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     898:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	ae 01       	movw	r20, r28
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	6a e8       	ldi	r22, 0x8A	; 138
     8a6:	ca d7       	rcall	.+3988   	; 0x183c <bus_read>

	return data;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
 */
static bool sfh7770_device_id(sensor_hal_t *hal, sensor_data_t *data)
{
	uint8_t const part_id = sensor_bus_get(hal, SFH7770_PART_ID);

	data->device.id = (uint32_t)(part_id & PART_ID_MASK) >> PART_ID_SHIFT;
     8aa:	48 2f       	mov	r20, r24
     8ac:	42 95       	swap	r20
     8ae:	4f 70       	andi	r20, 0x0F	; 15
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	f8 01       	movw	r30, r16
     8b8:	40 83       	st	Z, r20
     8ba:	51 83       	std	Z+1, r21	; 0x01
     8bc:	62 83       	std	Z+2, r22	; 0x02
     8be:	73 83       	std	Z+3, r23	; 0x03
	data->device.version = (uint32_t)(part_id & PART_REV_MASK);
     8c0:	8f 70       	andi	r24, 0x0F	; 15
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	84 83       	std	Z+4, r24	; 0x04
     8ca:	95 83       	std	Z+5, r25	; 0x05
     8cc:	a6 83       	std	Z+6, r26	; 0x06
     8ce:	b7 83       	std	Z+7, r27	; 0x07

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);

	case SENSOR_READ_ID:
		return sfh7770_device_id(hal, data);
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <sfh7770_read+0x15a>

	default:
		sensor->err = SENSOR_ERR_FUNCTION;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	92 e8       	ldi	r25, 0x82	; 130
     8d8:	87 83       	std	Z+7, r24	; 0x07
     8da:	90 87       	std	Z+8, r25	; 0x08
		return false;
     8dc:	20 e0       	ldi	r18, 0x00	; 0
	}
}
     8de:	82 2f       	mov	r24, r18
     8e0:	24 96       	adiw	r28, 0x04	; 4
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <sfh7770_isr>:
 *
 * @param arg       The address of the driver sensor_hal_t descriptor.
 * @return Nothing.
 */
static void sfh7770_isr(volatile void *arg)
{
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	27 97       	sbiw	r28, 0x07	; 7
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	de bf       	out	0x3e, r29	; 62
     902:	8c 01       	movw	r16, r24
		uint8_t int_set;        /* interrupt status */
	}
	regs;

	/* Do not wait for a busy bus when reading data. */
	hal->bus.no_wait = true;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	f8 01       	movw	r30, r16
     908:	86 83       	std	Z+6, r24	; 0x06
	sensor_bus_read(hal, hal->burst_addr, (uint8_t *)&regs, sizeof(regs));
     90a:	27 e0       	ldi	r18, 0x07	; 7
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	ae 01       	movw	r20, r28
     910:	4f 5f       	subi	r20, 0xFF	; 255
     912:	5f 4f       	sbci	r21, 0xFF	; 255
     914:	67 81       	ldd	r22, Z+7	; 0x07
     916:	c8 01       	movw	r24, r16
     918:	91 d7       	rcall	.+3874   	; 0x183c <bus_read>
	hal->bus.no_wait = false;
     91a:	f8 01       	movw	r30, r16
     91c:	16 82       	std	Z+6, r1	; 0x06

	if (STATUS_OK == hal->bus.status) {
     91e:	85 81       	ldd	r24, Z+5	; 0x05
     920:	81 11       	cpse	r24, r1
     922:	bc c0       	rjmp	.+376    	; 0xa9c <sfh7770_isr+0x1ac>
		static sensor_event_data_t event_data = {.data.scaled = true};

		event_data.data.timestamp = sensor_timestamp();
     924:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <sensor_timestamp>
     928:	e6 e0       	ldi	r30, 0x06	; 6
     92a:	f0 e2       	ldi	r31, 0x20	; 32
     92c:	60 8b       	std	Z+16, r22	; 0x10
     92e:	71 8b       	std	Z+17, r23	; 0x11
     930:	82 8b       	std	Z+18, r24	; 0x12
     932:	93 8b       	std	Z+19, r25	; 0x13
		event_data.event = SENSOR_EVENT_UNKNOWN;
     934:	10 82       	st	Z, r1
     936:	11 82       	std	Z+1, r1	; 0x01

		/*
		 * Determine the interrupt source then combine measurement
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);
     938:	8f 81       	ldd	r24, Y+7	; 0x07
     93a:	80 76       	andi	r24, 0x60	; 96

		uint16_t const light_level
			= ((regs.als_data_msb << 8) | regs.als_data_lsb);

		switch (int_source) {
     93c:	80 32       	cpi	r24, 0x20	; 32
     93e:	09 f4       	brne	.+2      	; 0x942 <sfh7770_isr+0x52>
     940:	4e c0       	rjmp	.+156    	; 0x9de <sfh7770_isr+0xee>
     942:	18 f4       	brcc	.+6      	; 0x94a <sfh7770_isr+0x5a>
     944:	88 23       	and	r24, r24
     946:	41 f0       	breq	.+16     	; 0x958 <sfh7770_isr+0x68>
     948:	a9 c0       	rjmp	.+338    	; 0xa9c <sfh7770_isr+0x1ac>
     94a:	80 34       	cpi	r24, 0x40	; 64
     94c:	09 f4       	brne	.+2      	; 0x950 <sfh7770_isr+0x60>
     94e:	47 c0       	rjmp	.+142    	; 0x9de <sfh7770_isr+0xee>
     950:	80 36       	cpi	r24, 0x60	; 96
     952:	09 f0       	breq	.+2      	; 0x956 <sfh7770_isr+0x66>
     954:	a3 c0       	rjmp	.+326    	; 0xa9c <sfh7770_isr+0x1ac>
     956:	43 c0       	rjmp	.+134    	; 0x9de <sfh7770_isr+0xee>
		 * Determine the interrupt source then combine measurement
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);

		uint16_t const light_level
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	98 2f       	mov	r25, r24
     95e:	88 27       	eor	r24, r24
     960:	29 81       	ldd	r18, Y+1	; 0x01
     962:	82 2b       	or	r24, r18

		switch (int_source) {
		case INT_SOURCE_ALS:

			/* Determine if low or high light interrupt */
			if (light_level >= high_light_threshold) {
     964:	20 91 04 22 	lds	r18, 0x2204	; 0x802204 <high_light_threshold>
     968:	30 91 05 22 	lds	r19, 0x2205	; 0x802205 <high_light_threshold+0x1>
     96c:	82 17       	cp	r24, r18
     96e:	93 07       	cpc	r25, r19
     970:	b8 f0       	brcs	.+46     	; 0x9a0 <sfh7770_isr+0xb0>
				event_data.event = SENSOR_EVENT_HIGH_LIGHT;
     972:	e6 e0       	ldi	r30, 0x06	; 6
     974:	f0 e2       	ldi	r31, 0x20	; 32
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e1       	ldi	r19, 0x10	; 16
     97a:	20 83       	st	Z, r18
     97c:	31 83       	std	Z+1, r19	; 0x01
				event_data.data.light.value = light_level;
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	84 83       	std	Z+4, r24	; 0x04
     984:	95 83       	std	Z+5, r25	; 0x05
     986:	a6 83       	std	Z+6, r26	; 0x06
     988:	b7 83       	std	Z+7, r27	; 0x07

				(event_cb[2].handler)(&event_data,
     98a:	eb e1       	ldi	r30, 0x1B	; 27
     98c:	f0 e2       	ldi	r31, 0x20	; 32
     98e:	62 85       	ldd	r22, Z+10	; 0x0a
     990:	73 85       	ldd	r23, Z+11	; 0x0b
     992:	00 84       	ldd	r0, Z+8	; 0x08
     994:	f1 85       	ldd	r31, Z+9	; 0x09
     996:	e0 2d       	mov	r30, r0
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	90 e2       	ldi	r25, 0x20	; 32
     99c:	19 95       	eicall
     99e:	7e c0       	rjmp	.+252    	; 0xa9c <sfh7770_isr+0x1ac>
						event_cb[2].arg);
			} else if (light_level <= low_light_threshold) {
     9a0:	20 91 02 22 	lds	r18, 0x2202	; 0x802202 <low_light_threshold>
     9a4:	30 91 03 22 	lds	r19, 0x2203	; 0x802203 <low_light_threshold+0x1>
     9a8:	28 17       	cp	r18, r24
     9aa:	39 07       	cpc	r19, r25
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <sfh7770_isr+0xc0>
     9ae:	76 c0       	rjmp	.+236    	; 0xa9c <sfh7770_isr+0x1ac>
				event_data.event = SENSOR_EVENT_LOW_LIGHT;
     9b0:	e6 e0       	ldi	r30, 0x06	; 6
     9b2:	f0 e2       	ldi	r31, 0x20	; 32
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	38 e0       	ldi	r19, 0x08	; 8
     9b8:	20 83       	st	Z, r18
     9ba:	31 83       	std	Z+1, r19	; 0x01
				event_data.data.light.value = light_level;
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	84 83       	std	Z+4, r24	; 0x04
     9c2:	95 83       	std	Z+5, r25	; 0x05
     9c4:	a6 83       	std	Z+6, r26	; 0x06
     9c6:	b7 83       	std	Z+7, r27	; 0x07

				(event_cb[1].handler)(&event_data,
     9c8:	eb e1       	ldi	r30, 0x1B	; 27
     9ca:	f0 e2       	ldi	r31, 0x20	; 32
     9cc:	66 81       	ldd	r22, Z+6	; 0x06
     9ce:	77 81       	ldd	r23, Z+7	; 0x07
     9d0:	04 80       	ldd	r0, Z+4	; 0x04
     9d2:	f5 81       	ldd	r31, Z+5	; 0x05
     9d4:	e0 2d       	mov	r30, r0
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	90 e2       	ldi	r25, 0x20	; 32
     9da:	19 95       	eicall
     9dc:	5f c0       	rjmp	.+190    	; 0xa9c <sfh7770_isr+0x1ac>

		case INT_SOURCE_LED1:
		case INT_SOURCE_LED2:
		case INT_SOURCE_LED3:

			event_data.event = SENSOR_EVENT_NEAR_PROXIMITY;
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	31 e0       	ldi	r19, 0x01	; 1
     9e2:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <event_data.6305>
     9e6:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <event_data.6305+0x1>

			if (int_source == INT_SOURCE_LED1) {
     9ea:	80 32       	cpi	r24, 0x20	; 32
     9ec:	39 f4       	brne	.+14     	; 0x9fc <sfh7770_isr+0x10c>
				event_data.channel = 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <event_data.6305+0x2>
     9f6:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <event_data.6305+0x3>
     9fa:	0f c0       	rjmp	.+30     	; 0xa1a <sfh7770_isr+0x12a>
			} else if (int_source == INT_SOURCE_LED2) {
     9fc:	80 34       	cpi	r24, 0x40	; 64
     9fe:	39 f4       	brne	.+14     	; 0xa0e <sfh7770_isr+0x11e>
				event_data.channel = 2;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <event_data.6305+0x2>
     a08:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <event_data.6305+0x3>
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <sfh7770_isr+0x12a>
			} else { /* INT_SOURCE_LED3 */
				event_data.channel = 3;
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <event_data.6305+0x2>
     a16:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <event_data.6305+0x3>

			/* Use internal device threshold status to
			 * determine scaled values.
			 */
			event_data.data.proximity.value[0]
				= (regs.als_ps_status & PS_LED1_THRESH) ?
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	81 fd       	sbrc	r24, 1
     a1e:	04 c0       	rjmp	.+8      	; 0xa28 <sfh7770_isr+0x138>
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	ba 01       	movw	r22, r20
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <sfh7770_isr+0x140>
     a28:	43 e0       	ldi	r20, 0x03	; 3
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	40 93 0a 20 	sts	0x200A, r20	; 0x80200a <event_data.6305+0x4>
     a34:	50 93 0b 20 	sts	0x200B, r21	; 0x80200b <event_data.6305+0x5>
     a38:	60 93 0c 20 	sts	0x200C, r22	; 0x80200c <event_data.6305+0x6>
     a3c:	70 93 0d 20 	sts	0x200D, r23	; 0x80200d <event_data.6305+0x7>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[1]
				= (regs.als_ps_status & PS_LED2_THRESH) ?
     a40:	83 fd       	sbrc	r24, 3
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <sfh7770_isr+0x15c>
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	ba 01       	movw	r22, r20
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <sfh7770_isr+0x164>
     a4c:	43 e0       	ldi	r20, 0x03	; 3
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <event_data.6305+0x8>
     a58:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <event_data.6305+0x9>
     a5c:	60 93 10 20 	sts	0x2010, r22	; 0x802010 <event_data.6305+0xa>
     a60:	70 93 11 20 	sts	0x2011, r23	; 0x802011 <event_data.6305+0xb>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[2]
				= (regs.als_ps_status & PS_LED3_THRESH) ?
     a64:	85 fd       	sbrc	r24, 5
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <sfh7770_isr+0x180>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	dc 01       	movw	r26, r24
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <sfh7770_isr+0x188>
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <event_data.6305+0xc>
     a7c:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <event_data.6305+0xd>
     a80:	a0 93 14 20 	sts	0x2014, r26	; 0x802014 <event_data.6305+0xe>
     a84:	b0 93 15 20 	sts	0x2015, r27	; 0x802015 <event_data.6305+0xf>
					PROXIMITY_NEAR : PROXIMITY_NONE;

			(event_cb[0].handler)(&event_data, event_cb[0].arg);
     a88:	eb e1       	ldi	r30, 0x1B	; 27
     a8a:	f0 e2       	ldi	r31, 0x20	; 32
     a8c:	62 81       	ldd	r22, Z+2	; 0x02
     a8e:	73 81       	ldd	r23, Z+3	; 0x03
     a90:	01 90       	ld	r0, Z+
     a92:	f0 81       	ld	r31, Z
     a94:	e0 2d       	mov	r30, r0
     a96:	86 e0       	ldi	r24, 0x06	; 6
     a98:	90 e2       	ldi	r25, 0x20	; 32
     a9a:	19 95       	eicall
		}
	}
}
     a9c:	27 96       	adiw	r28, 0x07	; 7
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <sfh7770_ioctl>:
 * @param  cmd   Command to execute
 * @param  arg   Argument for command (varies)
 * @return bool  true if the call succeeds, else false is returned.
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	2c 97       	sbiw	r28, 0x0c	; 12
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	9c 01       	movw	r18, r24
	sensor_hal_t *const hal = sensor->hal;
     ac8:	fc 01       	movw	r30, r24
     aca:	00 81       	ld	r16, Z
     acc:	11 81       	ldd	r17, Z+1	; 0x01

	bool status = false;

	switch (cmd) {
     ace:	86 2f       	mov	r24, r22
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	3e 97       	sbiw	r30, 0x0e	; 14
     ad6:	ee 30       	cpi	r30, 0x0E	; 14
     ad8:	f1 05       	cpc	r31, r1
     ada:	08 f0       	brcs	.+2      	; 0xade <sfh7770_ioctl+0x32>
     adc:	e9 c1       	rjmp	.+978    	; 0xeb0 <sfh7770_ioctl+0x404>
     ade:	7a 01       	movw	r14, r20
     ae0:	d9 01       	movw	r26, r18
     ae2:	88 27       	eor	r24, r24
     ae4:	e6 50       	subi	r30, 0x06	; 6
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	8f 4f       	sbci	r24, 0xFF	; 255
     aea:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__tablejump2__>
	case SENSOR_SET_STATE:
		status
			= sfh7770_set_state(hal, sensor->type,
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	2d 91       	ld	r18, X+
     af2:	3c 91       	ld	r19, X
     af4:	15 97       	sbiw	r26, 0x05	; 5
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_state(sensor_hal_t *hal, sensor_type_t type,
		sensor_state_t state)
{
	switch (state) {
     af6:	fa 01       	movw	r30, r20
     af8:	80 81       	ld	r24, Z
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	e1 f0       	breq	.+56     	; 0xb36 <sfh7770_ioctl+0x8a>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	09 f0       	breq	.+2      	; 0xb04 <sfh7770_ioctl+0x58>
     b02:	dd c1       	rjmp	.+954    	; 0xebe <sfh7770_ioctl+0x412>
	case SENSOR_STATE_SLEEP:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     b04:	20 32       	cpi	r18, 0x20	; 32
     b06:	31 05       	cpc	r19, r1
     b08:	59 f4       	brne	.+22     	; 0xb20 <sfh7770_ioctl+0x74>
     b0a:	19 86       	std	Y+9, r1	; 0x09
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	ae 01       	movw	r20, r28
     b12:	47 5f       	subi	r20, 0xF7	; 247
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	60 e8       	ldi	r22, 0x80	; 128
     b18:	c8 01       	movw	r24, r16
     b1a:	d1 d6       	rcall	.+3490   	; 0x18be <bus_write>

	default:
		return false;
	}

	return true;
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	e4 c1       	rjmp	.+968    	; 0xee8 <sfh7770_ioctl+0x43c>
     b20:	1a 86       	std	Y+10, r1	; 0x0a
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	ae 01       	movw	r20, r28
     b28:	46 5f       	subi	r20, 0xF6	; 246
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	61 e8       	ldi	r22, 0x81	; 129
     b2e:	c8 01       	movw	r24, r16
     b30:	c6 d6       	rcall	.+3468   	; 0x18be <bus_write>
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	d9 c1       	rjmp	.+946    	; 0xee8 <sfh7770_ioctl+0x43c>
		}

		break;

	case SENSOR_STATE_NORMAL:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     b36:	20 32       	cpi	r18, 0x20	; 32
     b38:	31 05       	cpc	r19, r1
     b3a:	61 f4       	brne	.+24     	; 0xb54 <sfh7770_ioctl+0xa8>
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	8b 87       	std	Y+11, r24	; 0x0b
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	ae 01       	movw	r20, r28
     b46:	45 5f       	subi	r20, 0xF5	; 245
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	60 e8       	ldi	r22, 0x80	; 128
     b4c:	c8 01       	movw	r24, r16
     b4e:	b7 d6       	rcall	.+3438   	; 0x18be <bus_write>

	default:
		return false;
	}

	return true;
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	ca c1       	rjmp	.+916    	; 0xee8 <sfh7770_ioctl+0x43c>
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	8c 87       	std	Y+12, r24	; 0x0c
     b58:	21 e0       	ldi	r18, 0x01	; 1
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	ae 01       	movw	r20, r28
     b5e:	44 5f       	subi	r20, 0xF4	; 244
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	61 e8       	ldi	r22, 0x81	; 129
     b64:	c8 01       	movw	r24, r16
     b66:	ab d6       	rcall	.+3414   	; 0x18be <bus_write>
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	be c1       	rjmp	.+892    	; 0xee8 <sfh7770_ioctl+0x43c>
				*((sensor_state_t *)arg));
		break;

	case SENSOR_ENABLE_EVENT:
		status
			= sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     b6c:	fa 01       	movw	r30, r20
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	21 e0       	ldi	r18, 0x01	; 1
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	cd 01       	movw	r24, r26
     b7a:	70 dd       	rcall	.-1312   	; 0x65c <sfh7770_event>
     b7c:	28 2f       	mov	r18, r24
				true);
		break;
     b7e:	b4 c1       	rjmp	.+872    	; 0xee8 <sfh7770_ioctl+0x43c>

	case SENSOR_DISABLE_EVENT:
		status = sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     b80:	fa 01       	movw	r30, r20
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	cd 01       	movw	r24, r26
     b8e:	66 dd       	rcall	.-1332   	; 0x65c <sfh7770_event>
     b90:	28 2f       	mov	r18, r24
				false);
		break;
     b92:	aa c1       	rjmp	.+852    	; 0xee8 <sfh7770_ioctl+0x43c>

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
     b94:	19 96       	adiw	r26, 0x09	; 9
     b96:	cd 90       	ld	r12, X+
     b98:	dc 90       	ld	r13, X
     b9a:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	reg_thresh;

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;
     b9c:	fa 01       	movw	r30, r20
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	22 81       	ldd	r18, Z+2	; 0x02
     ba2:	9b 83       	std	Y+3, r25	; 0x03

	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     ba4:	80 81       	ld	r24, Z
     ba6:	89 30       	cpi	r24, 0x09	; 9
     ba8:	09 f4       	brne	.+2      	; 0xbac <sfh7770_ioctl+0x100>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <sfh7770_ioctl+0x18e>
     bac:	8a 30       	cpi	r24, 0x0A	; 10
     bae:	21 f0       	breq	.+8      	; 0xbb8 <sfh7770_ioctl+0x10c>
     bb0:	88 30       	cpi	r24, 0x08	; 8
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <sfh7770_ioctl+0x10a>
     bb4:	56 c0       	rjmp	.+172    	; 0xc62 <sfh7770_ioctl+0x1b6>
     bb6:	2d c0       	rjmp	.+90     	; 0xc12 <sfh7770_ioctl+0x166>
		                                 **/

		/* Write to sensor register based on current channel (LED
		 * selection)
		 */
		switch (channel) {
     bb8:	ff ef       	ldi	r31, 0xFF	; 255
     bba:	cf 16       	cp	r12, r31
     bbc:	df 06       	cpc	r13, r31
     bbe:	51 f0       	breq	.+20     	; 0xbd4 <sfh7770_ioctl+0x128>
     bc0:	0c f4       	brge	.+2      	; 0xbc4 <sfh7770_ioctl+0x118>
     bc2:	51 c0       	rjmp	.+162    	; 0xc66 <sfh7770_ioctl+0x1ba>
     bc4:	c6 01       	movw	r24, r12
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	03 97       	sbiw	r24, 0x03	; 3
     bca:	08 f0       	brcs	.+2      	; 0xbce <sfh7770_ioctl+0x122>
     bcc:	4c c0       	rjmp	.+152    	; 0xc66 <sfh7770_ioctl+0x1ba>

		case 1:
		case 2:
		case 3:
			led_count = 1;
			index = channel - 1;
     bce:	ca 94       	dec	r12

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <sfh7770_ioctl+0x12c>
     bd4:	82 e0       	ldi	r24, 0x02	; 2
		 * selection)
		 */
		switch (channel) {
		case SENSOR_CHANNEL_ALL:    /* "channel -1" = all 3 LEDs */
			led_count = 3;
			index = 0;
     bd6:	c1 2c       	mov	r12, r1

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     bd8:	dc 2c       	mov	r13, r12
     bda:	c8 0e       	add	r12, r24
     bdc:	c3 94       	inc	r12
     bde:	f7 01       	movw	r30, r14
     be0:	81 81       	ldd	r24, Z+1	; 0x01
     be2:	88 87       	std	Y+8, r24	; 0x08
     be4:	63 e9       	ldi	r22, 0x93	; 147
     be6:	6d 0d       	add	r22, r13
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	ae 01       	movw	r20, r28
     bee:	48 5f       	subi	r20, 0xF8	; 248
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	c8 01       	movw	r24, r16
     bf4:	64 d6       	rcall	.+3272   	; 0x18be <bus_write>
			sensor_bus_put(hal, (SFH7770_PS_THR_LED1 + index),
					(uint8_t)threshold->value);

			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
     bf6:	8d 2d       	mov	r24, r13
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	be 01       	movw	r22, r28
     c00:	6d 5f       	subi	r22, 0xFD	; 253
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	48 96       	adiw	r24, 0x18	; 24
     c06:	9c d6       	rcall	.+3384   	; 0x1940 <nvram_write>
			++index;
     c08:	d3 94       	inc	r13

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     c0a:	dc 10       	cpse	r13, r12
     c0c:	e8 cf       	rjmp	.-48     	; 0xbde <sfh7770_ioctl+0x132>
			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
			++index;
		}

		result = true;
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	6b c1       	rjmp	.+726    	; 0xee8 <sfh7770_ioctl+0x43c>
		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:         /* lower light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     c12:	99 83       	std	Y+1, r25	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     c14:	2a 83       	std	Y+2, r18	; 0x02
		low_light_threshold = (uint16_t)threshold->value;
     c16:	90 93 02 22 	sts	0x2202, r25	; 0x802202 <low_light_threshold>
     c1a:	20 93 03 22 	sts	0x2203, r18	; 0x802203 <low_light_threshold+0x1>
		if (sensor_bus_write(hal, SFH7770_ALS_LO_THR_LSB, &reg_thresh,
     c1e:	22 e0       	ldi	r18, 0x02	; 2
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	ae 01       	movw	r20, r28
     c24:	4f 5f       	subi	r20, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	68 e9       	ldi	r22, 0x98	; 152
     c2a:	c8 01       	movw	r24, r16
     c2c:	48 d6       	rcall	.+3216   	; 0x18be <bus_write>
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	02 97       	sbiw	r24, 0x02	; 2
     c32:	09 f4       	brne	.+2      	; 0xc36 <sfh7770_ioctl+0x18a>
     c34:	59 c1       	rjmp	.+690    	; 0xee8 <sfh7770_ioctl+0x43c>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	57 c1       	rjmp	.+686    	; 0xee8 <sfh7770_ioctl+0x43c>

		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT:        /* upper light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     c3a:	99 83       	std	Y+1, r25	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     c3c:	2a 83       	std	Y+2, r18	; 0x02
		high_light_threshold = (uint16_t)threshold->value;
     c3e:	90 93 04 22 	sts	0x2204, r25	; 0x802204 <high_light_threshold>
     c42:	20 93 05 22 	sts	0x2205, r18	; 0x802205 <high_light_threshold+0x1>
		if (sensor_bus_write(hal, SFH7770_ALS_UP_THR_LSB, &reg_thresh,
     c46:	22 e0       	ldi	r18, 0x02	; 2
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	ae 01       	movw	r20, r28
     c4c:	4f 5f       	subi	r20, 0xFF	; 255
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	66 e9       	ldi	r22, 0x96	; 150
     c52:	c8 01       	movw	r24, r16
     c54:	34 d6       	rcall	.+3176   	; 0x18be <bus_write>
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	02 97       	sbiw	r24, 0x02	; 2
     c5a:	09 f4       	brne	.+2      	; 0xc5e <sfh7770_ioctl+0x1b2>
     c5c:	45 c1       	rjmp	.+650    	; 0xee8 <sfh7770_ioctl+0x43c>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	43 c1       	rjmp	.+646    	; 0xee8 <sfh7770_ioctl+0x43c>

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;

	bool result = false;
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	41 c1       	rjmp	.+642    	; 0xee8 <sfh7770_ioctl+0x43c>
			led_count = 1;
			index = channel - 1;
			break;

		default:
			return false;   /* invalid channel selection */
     c66:	20 e0       	ldi	r18, 0x00	; 0
		break;

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;
     c68:	3f c1       	rjmp	.+638    	; 0xee8 <sfh7770_ioctl+0x43c>
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     c6a:	fa 01       	movw	r30, r20
     c6c:	80 81       	ld	r24, Z
     c6e:	89 30       	cpi	r24, 0x09	; 9
     c70:	79 f1       	breq	.+94     	; 0xcd0 <sfh7770_ioctl+0x224>
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	21 f0       	breq	.+8      	; 0xc7e <sfh7770_ioctl+0x1d2>
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	09 f0       	breq	.+2      	; 0xc7c <sfh7770_ioctl+0x1d0>
     c7a:	23 c1       	rjmp	.+582    	; 0xec2 <sfh7770_ioctl+0x416>
     c7c:	20 c0       	rjmp	.+64     	; 0xcbe <sfh7770_ioctl+0x212>
		status = sfh7770_set_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;

	case SENSOR_GET_THRESHOLD:
		status = sfh7770_get_threshold(hal, sensor->channel,
     c7e:	19 96       	adiw	r26, 0x09	; 9
     c80:	6d 91       	ld	r22, X+
     c82:	7c 91       	ld	r23, X
     c84:	1a 97       	sbiw	r26, 0x0a	; 10
{
	bool result = false;

	switch (threshold->type) {  /* check threshold type */
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
     c86:	6f 3f       	cpi	r22, 0xFF	; 255
     c88:	ff ef       	ldi	r31, 0xFF	; 255
     c8a:	7f 07       	cpc	r23, r31
     c8c:	31 f0       	breq	.+12     	; 0xc9a <sfh7770_ioctl+0x1ee>
			/* if "all channels", just use chan #1 value */
			channel = 1;
		}

		if ((channel >= 1) && (channel <= 3)) {
     c8e:	cb 01       	movw	r24, r22
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	03 97       	sbiw	r24, 0x03	; 3
     c94:	08 f0       	brcs	.+2      	; 0xc98 <sfh7770_ioctl+0x1ec>
     c96:	17 c1       	rjmp	.+558    	; 0xec6 <sfh7770_ioctl+0x41a>
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <sfh7770_ioctl+0x1f2>

	switch (threshold->type) {  /* check threshold type */
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
			/* if "all channels", just use chan #1 value */
			channel = 1;
     c9a:	61 e0       	ldi	r22, 0x01	; 1
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     c9c:	70 e0       	ldi	r23, 0x00	; 0
	bus_read(bus, addr, &data, sizeof(uint8_t));
     c9e:	19 82       	std	Y+1, r1	; 0x01
     ca0:	6e 56       	subi	r22, 0x6E	; 110
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	ae 01       	movw	r20, r28
     ca8:	4f 5f       	subi	r20, 0xFF	; 255
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	c8 01       	movw	r24, r16
     cae:	c6 d5       	rcall	.+2956   	; 0x183c <bus_read>

	return data;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
		}

		if ((channel >= 1) && (channel <= 3)) {
			/* Read corresponding register for LED channel */
			threshold->value = (uint16_t)sensor_bus_get(hal,
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	f7 01       	movw	r30, r14
     cb6:	81 83       	std	Z+1, r24	; 0x01
     cb8:	92 83       	std	Z+2, r25	; 0x02
					(SFH7770_PS_THR_LED1 + channel - 1));
			result = true;
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	15 c1       	rjmp	.+554    	; 0xee8 <sfh7770_ioctl+0x43c>
		}

		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:  /* low light level threshold */
		threshold->value = low_light_threshold;
     cbe:	80 91 02 22 	lds	r24, 0x2202	; 0x802202 <low_light_threshold>
     cc2:	90 91 03 22 	lds	r25, 0x2203	; 0x802203 <low_light_threshold+0x1>
     cc6:	fa 01       	movw	r30, r20
     cc8:	81 83       	std	Z+1, r24	; 0x01
     cca:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	0c c1       	rjmp	.+536    	; 0xee8 <sfh7770_ioctl+0x43c>
		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT: /* high light level threshold */
		threshold->value = high_light_threshold;
     cd0:	80 91 04 22 	lds	r24, 0x2204	; 0x802204 <high_light_threshold>
     cd4:	90 91 05 22 	lds	r25, 0x2205	; 0x802205 <high_light_threshold+0x1>
     cd8:	fa 01       	movw	r30, r20
     cda:	81 83       	std	Z+1, r24	; 0x01
     cdc:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	03 c1       	rjmp	.+518    	; 0xee8 <sfh7770_ioctl+0x43c>
				(sensor_threshold_desc_t *)arg);
		break;

	case SENSOR_SET_SAMPLE_RATE:
		status
			= sfh7770_set_rate(hal, sensor->type,
     ce2:	fa 01       	movw	r30, r20
     ce4:	e0 80       	ld	r14, Z
     ce6:	f1 80       	ldd	r15, Z+1	; 0x01
     ce8:	14 96       	adiw	r26, 0x04	; 4
     cea:	cd 90       	ld	r12, X+
     cec:	dc 90       	ld	r13, X
     cee:	15 97       	sbiw	r26, 0x05	; 5
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
     cf0:	c5 fe       	sbrs	r12, 5
     cf2:	f7 c0       	rjmp	.+494    	; 0xee2 <sfh7770_ioctl+0x436>
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
			if (light_rate_table[i].rate == rate_hz) {
     cf4:	e1 14       	cp	r14, r1
     cf6:	f1 04       	cpc	r15, r1
     cf8:	e1 f0       	breq	.+56     	; 0xd32 <sfh7770_ioctl+0x286>
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	ef 16       	cp	r14, r31
     cfe:	f1 04       	cpc	r15, r1
     d00:	79 f0       	breq	.+30     	; 0xd20 <sfh7770_ioctl+0x274>
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	e8 16       	cp	r14, r24
     d06:	f1 04       	cpc	r15, r1
     d08:	71 f0       	breq	.+28     	; 0xd26 <sfh7770_ioctl+0x27a>
     d0a:	95 e0       	ldi	r25, 0x05	; 5
     d0c:	e9 16       	cp	r14, r25
     d0e:	f1 04       	cpc	r15, r1
     d10:	69 f0       	breq	.+26     	; 0xd2c <sfh7770_ioctl+0x280>
     d12:	ea e0       	ldi	r30, 0x0A	; 10
     d14:	ee 16       	cp	r14, r30
     d16:	f1 04       	cpc	r15, r1
     d18:	11 f5       	brne	.+68     	; 0xd5e <sfh7770_ioctl+0x2b2>
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <sfh7770_ioctl+0x28a>
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 c0       	rjmp	.+16     	; 0xd36 <sfh7770_ioctl+0x28a>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <sfh7770_ioctl+0x28a>
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <sfh7770_ioctl+0x28a>
			if (light_rate_table[i].rate == rate_hz) {
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
				sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
     d36:	fc 01       	movw	r30, r24
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	8e 0f       	add	r24, r30
     d3e:	9f 1f       	adc	r25, r31
     d40:	fc 01       	movw	r30, r24
     d42:	e5 53       	subi	r30, 0x35	; 53
     d44:	ff 4d       	sbci	r31, 0xDF	; 223
     d46:	82 81       	ldd	r24, Z+2	; 0x02
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	ae 01       	movw	r20, r28
     d50:	49 5f       	subi	r20, 0xF9	; 249
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	66 e8       	ldi	r22, 0x86	; 134
     d56:	c8 01       	movw	r24, r16
     d58:	b2 d5       	rcall	.+2916   	; 0x18be <bus_write>
						light_rate_table[i].reg_val);
				status = true;
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	c3 c0       	rjmp	.+390    	; 0xee4 <sfh7770_ioctl+0x438>
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     d5e:	d0 fc       	sbrc	r13, 0
     d60:	ba c0       	rjmp	.+372    	; 0xed6 <sfh7770_ioctl+0x42a>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	c1 c0       	rjmp	.+386    	; 0xee8 <sfh7770_ioctl+0x43c>
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
			if (prox_rate_table[i].rate == rate_hz) {
     d66:	43 81       	ldd	r20, Z+3	; 0x03
     d68:	54 81       	ldd	r21, Z+4	; 0x04
     d6a:	e4 16       	cp	r14, r20
     d6c:	f5 06       	cpc	r15, r21
     d6e:	b9 f4       	brne	.+46     	; 0xd9e <sfh7770_ioctl+0x2f2>
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <sfh7770_ioctl+0x2ca>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
				sensor_bus_put(hal, SFH7770_PS_INTERVAL,
     d76:	fc 01       	movw	r30, r24
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	8e 0f       	add	r24, r30
     d7e:	9f 1f       	adc	r25, r31
     d80:	fc 01       	movw	r30, r24
     d82:	e3 55       	subi	r30, 0x53	; 83
     d84:	ff 4d       	sbci	r31, 0xDF	; 223
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	8e 83       	std	Y+6, r24	; 0x06
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	ae 01       	movw	r20, r28
     d90:	4a 5f       	subi	r20, 0xFA	; 250
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	65 e8       	ldi	r22, 0x85	; 133
     d96:	c8 01       	movw	r24, r16
     d98:	92 d5       	rcall	.+2852   	; 0x18be <bus_write>
						prox_rate_table[i].reg_val);
				status = true;
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	a5 c0       	rjmp	.+330    	; 0xee8 <sfh7770_ioctl+0x43c>
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	33 96       	adiw	r30, 0x03	; 3
     da2:	8a 30       	cpi	r24, 0x0A	; 10
     da4:	91 05       	cpc	r25, r1
     da6:	f9 f6       	brne	.-66     	; 0xd66 <sfh7770_ioctl+0x2ba>
     da8:	9f c0       	rjmp	.+318    	; 0xee8 <sfh7770_ioctl+0x43c>

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
		if (current_table[i].level == *level_mA) {
     daa:	fa 01       	movw	r30, r20
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	45 30       	cpi	r20, 0x05	; 5
     db2:	51 05       	cpc	r21, r1
     db4:	51 f0       	breq	.+20     	; 0xdca <sfh7770_ioctl+0x31e>
     db6:	ea ed       	ldi	r30, 0xDA	; 218
     db8:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
		if (current_table[i].level == *level_mA) {
     dbe:	23 81       	ldd	r18, Z+3	; 0x03
     dc0:	34 81       	ldd	r19, Z+4	; 0x04
     dc2:	24 17       	cp	r18, r20
     dc4:	35 07       	cpc	r19, r21
     dc6:	a9 f4       	brne	.+42     	; 0xdf2 <sfh7770_ioctl+0x346>
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <sfh7770_ioctl+0x322>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
			= sfh7770_set_rate(hal, sensor->type,
				*((uint16_t *)arg));
		break;

	case SENSOR_SET_CURRENT:
		status = sfh7770_set_current(hal, sensor->channel,
     dce:	19 96       	adiw	r26, 0x09	; 9
     dd0:	ed 90       	ld	r14, X+
     dd2:	fc 90       	ld	r15, X
     dd4:	1a 97       	sbiw	r26, 0x0a	; 10
	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
		if (current_table[i].level == *level_mA) {
			curr_setting = current_table[i].field_val;
     dd6:	fc 01       	movw	r30, r24
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	8e 0f       	add	r24, r30
     dde:	9f 1f       	adc	r25, r31
     de0:	fc 01       	movw	r30, r24
     de2:	e6 52       	subi	r30, 0x26	; 38
     de4:	ff 4d       	sbci	r31, 0xDF	; 223
     de6:	d2 80       	ldd	r13, Z+2	; 0x02
	}

	if (status == true) {   /* if entry was found in table */
		uint8_t reg_val;

		if (channel == SENSOR_CHANNEL_ALL) {
     de8:	ff ef       	ldi	r31, 0xFF	; 255
     dea:	ef 16       	cp	r14, r31
     dec:	ff 06       	cpc	r15, r31
     dee:	69 f5       	brne	.+90     	; 0xe4a <sfh7770_ioctl+0x39e>
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <sfh7770_ioctl+0x354>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	33 96       	adiw	r30, 0x03	; 3
     df6:	87 30       	cpi	r24, 0x07	; 7
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f7       	brne	.-62     	; 0xdbe <sfh7770_ioctl+0x312>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     dfe:	74 c0       	rjmp	.+232    	; 0xee8 <sfh7770_ioctl+0x43c>
	bus_read(bus, addr, &data, sizeof(uint8_t));
     e00:	19 82       	std	Y+1, r1	; 0x01
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	ae 01       	movw	r20, r28
     e08:	4f 5f       	subi	r20, 0xFF	; 255
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	62 e8       	ldi	r22, 0x82	; 130
     e0e:	c8 01       	movw	r24, r16
     e10:	15 d5       	rcall	.+2602   	; 0x183c <bus_read>

	return data;
     e12:	89 81       	ldd	r24, Y+1	; 0x01

		if (channel == SENSOR_CHANNEL_ALL) {
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			reg_val &= ~(I_LED1_MASK | I_LED2_MASK);
			reg_val
				|= (curr_setting |
     e14:	80 7c       	andi	r24, 0xC0	; 192
     e16:	8d 29       	or	r24, r13
     e18:	9d 2d       	mov	r25, r13
     e1a:	99 0f       	add	r25, r25
     e1c:	99 0f       	add	r25, r25
     e1e:	99 0f       	add	r25, r25
     e20:	89 2b       	or	r24, r25
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	ae 01       	movw	r20, r28
     e2a:	4d 5f       	subi	r20, 0xFD	; 253
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	62 e8       	ldi	r22, 0x82	; 130
     e30:	c8 01       	movw	r24, r16
     e32:	45 d5       	rcall	.+2698   	; 0x18be <bus_write>
     e34:	d9 82       	std	Y+1, r13	; 0x01
     e36:	21 e0       	ldi	r18, 0x01	; 1
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	ae 01       	movw	r20, r28
     e3c:	4f 5f       	subi	r20, 0xFF	; 255
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
     e40:	63 e8       	ldi	r22, 0x83	; 131
     e42:	c8 01       	movw	r24, r16
     e44:	3c d5       	rcall	.+2680   	; 0x18be <bus_write>
     e46:	21 e0       	ldi	r18, 0x01	; 1
					(curr_setting << I_LED2_SHIFT));
			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else if ((channel == 1) || (channel == 2)) {
     e48:	4f c0       	rjmp	.+158    	; 0xee8 <sfh7770_ioctl+0x43c>
     e4a:	c7 01       	movw	r24, r14
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	02 97       	sbiw	r24, 0x02	; 2
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     e50:	00 f5       	brcc	.+64     	; 0xe92 <sfh7770_ioctl+0x3e6>
	bus_read(bus, addr, &data, sizeof(uint8_t));
     e52:	19 82       	std	Y+1, r1	; 0x01
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	ae 01       	movw	r20, r28
     e5a:	4f 5f       	subi	r20, 0xFF	; 255
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	62 e8       	ldi	r22, 0x82	; 130
     e60:	c8 01       	movw	r24, r16
     e62:	ec d4       	rcall	.+2520   	; 0x183c <bus_read>

	return data;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			if (channel == 1) {
     e66:	ea 94       	dec	r14
     e68:	ef 28       	or	r14, r15
				reg_val &= ~I_LED1_MASK;
     e6a:	19 f4       	brne	.+6      	; 0xe72 <sfh7770_ioctl+0x3c6>
				reg_val |= curr_setting;
     e6c:	88 7f       	andi	r24, 0xF8	; 248
     e6e:	d8 2a       	or	r13, r24
			} else {
				reg_val &= ~I_LED2_MASK;
				reg_val |= (curr_setting << I_LED2_SHIFT);
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <sfh7770_ioctl+0x3d0>
     e72:	dd 0c       	add	r13, r13
     e74:	dd 0c       	add	r13, r13
     e76:	dd 0c       	add	r13, r13
     e78:	87 7c       	andi	r24, 0xC7	; 199
     e7a:	d8 2a       	or	r13, r24
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     e7c:	dc 82       	std	Y+4, r13	; 0x04
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	ae 01       	movw	r20, r28
     e84:	4c 5f       	subi	r20, 0xFC	; 252
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	62 e8       	ldi	r22, 0x82	; 130
     e8a:	c8 01       	movw	r24, r16
     e8c:	18 d5       	rcall	.+2608   	; 0x18be <bus_write>
     e8e:	21 e0       	ldi	r18, 0x01	; 1
			}

			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
		} else if (channel == 3) {
     e90:	2b c0       	rjmp	.+86     	; 0xee8 <sfh7770_ioctl+0x43c>
     e92:	e3 e0       	ldi	r30, 0x03	; 3
     e94:	ee 16       	cp	r14, r30
     e96:	f1 04       	cpc	r15, r1
     e98:	c1 f4       	brne	.+48     	; 0xeca <sfh7770_ioctl+0x41e>
     e9a:	dd 82       	std	Y+5, r13	; 0x05
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	ae 01       	movw	r20, r28
     ea2:	4b 5f       	subi	r20, 0xFB	; 251
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	63 e8       	ldi	r22, 0x83	; 131
     ea8:	c8 01       	movw	r24, r16
     eaa:	09 d5       	rcall	.+2578   	; 0x18be <bus_write>
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	1c c0       	rjmp	.+56     	; 0xee8 <sfh7770_ioctl+0x43c>
		status = sfh7770_set_current(hal, sensor->channel,
				(uint16_t *)arg);
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e8       	ldi	r25, 0x80	; 128
     eb4:	f9 01       	movw	r30, r18
     eb6:	87 83       	std	Z+7, r24	; 0x07
     eb8:	90 87       	std	Z+8, r25	; 0x08
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     eba:	20 e0       	ldi	r18, 0x00	; 0
				(uint16_t *)arg);
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
     ebc:	15 c0       	rjmp	.+42     	; 0xee8 <sfh7770_ioctl+0x43c>
		}

		break;

	default:
		return false;
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	13 c0       	rjmp	.+38     	; 0xee8 <sfh7770_ioctl+0x43c>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	11 c0       	rjmp	.+34     	; 0xee8 <sfh7770_ioctl+0x43c>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <sfh7770_ioctl+0x43c>

			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
		} else if (channel == 3) {
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else {        /* invalid channel selected */
			status = false;
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <sfh7770_ioctl+0x43c>
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
			if (prox_rate_table[i].rate == rate_hz) {
     ece:	e1 14       	cp	r14, r1
     ed0:	f1 04       	cpc	r15, r1
     ed2:	11 f4       	brne	.+4      	; 0xed8 <sfh7770_ioctl+0x42c>
     ed4:	4e cf       	rjmp	.-356    	; 0xd72 <sfh7770_ioctl+0x2c6>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	ed ea       	ldi	r30, 0xAD	; 173
     eda:	f0 e2       	ldi	r31, 0x20	; 32
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	42 cf       	rjmp	.-380    	; 0xd66 <sfh7770_ioctl+0x2ba>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     ee2:	20 e0       	ldi	r18, 0x00	; 0
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     ee4:	d0 fc       	sbrc	r13, 0
     ee6:	f3 cf       	rjmp	.-26     	; 0xece <sfh7770_ioctl+0x422>
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
	}

	return status;
}
     ee8:	82 2f       	mov	r24, r18
     eea:	2c 96       	adiw	r28, 0x0c	; 12
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	08 95       	ret

00000f02 <sfh7770_calibrate>:
 * @param info       Unimplemented (ignored) parameter.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_calibrate(sensor_t *sensor,
		sensor_calibration_t calib_type, int step, void *info)
{
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <sfh7770_calibrate+0xe>
     f10:	1f 92       	push	r1
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62

	static uint8_t prox_data[3];
	uint8_t read_data[3];

	/* Validate the specified calibration type */
	if (calib_type != MANUAL_CALIBRATE) {
     f16:	61 30       	cpi	r22, 0x01	; 1
     f18:	39 f0       	breq	.+14     	; 0xf28 <sfh7770_calibrate+0x26>
		sensor->err = SENSOR_ERR_PARAMS;
     f1a:	20 e2       	ldi	r18, 0x20	; 32
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	27 83       	std	Z+7, r18	; 0x07
     f22:	30 87       	std	Z+8, r19	; 0x08
		return false;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	67 c0       	rjmp	.+206    	; 0xff6 <sfh7770_calibrate+0xf4>
     f28:	8c 01       	movw	r16, r24
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_calibrate(sensor_t *sensor,
		sensor_calibration_t calib_type, int step, void *info)
{
	sensor_hal_t *const hal = sensor->hal;
     f2a:	fc 01       	movw	r30, r24
     f2c:	e0 80       	ld	r14, Z
     f2e:	f1 80       	ldd	r15, Z+1	; 0x01
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
     f30:	42 30       	cpi	r20, 0x02	; 2
     f32:	51 05       	cpc	r21, r1
     f34:	a9 f0       	breq	.+42     	; 0xf60 <sfh7770_calibrate+0x5e>
     f36:	43 30       	cpi	r20, 0x03	; 3
     f38:	51 05       	cpc	r21, r1
     f3a:	01 f1       	breq	.+64     	; 0xf7c <sfh7770_calibrate+0x7a>
     f3c:	41 30       	cpi	r20, 0x01	; 1
     f3e:	51 05       	cpc	r21, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <sfh7770_calibrate+0x42>
     f42:	53 c0       	rjmp	.+166    	; 0xfea <sfh7770_calibrate+0xe8>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     f44:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ae 01       	movw	r20, r28
     f4c:	4c 5f       	subi	r20, 0xFC	; 252
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	6f e8       	ldi	r22, 0x8F	; 143
     f52:	c7 01       	movw	r24, r14
     f54:	73 d4       	rcall	.+2278   	; 0x183c <bus_read>

	return data;
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
     f58:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <prox_data.6452>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     f5c:	81 e0       	ldi	r24, 0x01	; 1

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;
     f5e:	4b c0       	rjmp	.+150    	; 0xff6 <sfh7770_calibrate+0xf4>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     f60:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	ae 01       	movw	r20, r28
     f68:	4c 5f       	subi	r20, 0xFC	; 252
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	60 e9       	ldi	r22, 0x90	; 144
     f6e:	c7 01       	movw	r24, r14
     f70:	65 d4       	rcall	.+2250   	; 0x183c <bus_read>

	return data;
     f72:	8c 81       	ldd	r24, Y+4	; 0x04

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
     f74:	80 93 ff 21 	sts	0x21FF, r24	; 0x8021ff <prox_data.6452+0x1>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     f78:	81 e0       	ldi	r24, 0x01	; 1
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
		break;
     f7a:	3d c0       	rjmp	.+122    	; 0xff6 <sfh7770_calibrate+0xf4>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     f7c:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	ae 01       	movw	r20, r28
     f84:	4c 5f       	subi	r20, 0xFC	; 252
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	61 e9       	ldi	r22, 0x91	; 145
     f8a:	c7 01       	movw	r24, r14
     f8c:	57 d4       	rcall	.+2222   	; 0x183c <bus_read>

	return data;
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04

	case 3:
		prox_data[2] = sensor_bus_get(hal, SFH7770_PS_DATA_LED3);
     f90:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <prox_data.6452+0x2>

		/* Write data */
		nvram_write((SFH7770_NVRAM_OFFSET), prox_data,
     f94:	43 e0       	ldi	r20, 0x03	; 3
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	6e ef       	ldi	r22, 0xFE	; 254
     f9a:	71 e2       	ldi	r23, 0x21	; 33
     f9c:	88 e1       	ldi	r24, 0x18	; 24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	cf d4       	rcall	.+2462   	; 0x1940 <nvram_write>
				sizeof(prox_data));

		/* Read back data and confirm it was written correctly */
		nvram_read(SFH7770_NVRAM_OFFSET, read_data, sizeof(read_data));
     fa2:	43 e0       	ldi	r20, 0x03	; 3
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	be 01       	movw	r22, r28
     fa8:	6f 5f       	subi	r22, 0xFF	; 255
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	88 e1       	ldi	r24, 0x18	; 24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	dc d4       	rcall	.+2488   	; 0x196a <nvram_read>

		if (memcmp(prox_data, read_data, sizeof(prox_data))) {
     fb2:	43 e0       	ldi	r20, 0x03	; 3
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	be 01       	movw	r22, r28
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8e ef       	ldi	r24, 0xFE	; 254
     fbe:	91 e2       	ldi	r25, 0x21	; 33
     fc0:	0e 94 0c 19 	call	0x3218	; 0x3218 <memcmp>
     fc4:	89 2b       	or	r24, r25
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <sfh7770_calibrate+0xd4>
			sensor->err = SENSOR_ERR_IO;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	f8 01       	movw	r30, r16
     fce:	87 83       	std	Z+7, r24	; 0x07
     fd0:	90 87       	std	Z+8, r25	; 0x08
			return false;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	10 c0       	rjmp	.+32     	; 0xff6 <sfh7770_calibrate+0xf4>
		}

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
     fd6:	23 e0       	ldi	r18, 0x03	; 3
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	ae 01       	movw	r20, r28
     fdc:	4f 5f       	subi	r20, 0xFF	; 255
     fde:	5f 4f       	sbci	r21, 0xFF	; 255
     fe0:	63 e9       	ldi	r22, 0x93	; 147
     fe2:	c7 01       	movw	r24, r14
     fe4:	6c d4       	rcall	.+2264   	; 0x18be <bus_write>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     fe6:	81 e0       	ldi	r24, 0x01	; 1

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
				sizeof(read_data));

		break;
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <sfh7770_calibrate+0xf4>

	/* Any other step number is invalid */
	default:
		sensor->err = SENSOR_ERR_PARAMS;
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	f8 01       	movw	r30, r16
     ff0:	87 83       	std	Z+7, r24	; 0x07
     ff2:	90 87       	std	Z+8, r25	; 0x08
		return false;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
     ff6:	24 96       	adiw	r28, 0x04	; 4
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <sfh7770_init>:
 * @param sensor    Address of a sensor device descriptor.
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	2b 97       	sbiw	r28, 0x0b	; 11
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	7c 01       	movw	r14, r24
	bool status = false;
	sensor_hal_t *const hal = sensor->hal;
    1022:	fc 01       	movw	r30, r24
    1024:	00 81       	ld	r16, Z
    1026:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
    1028:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	ae 01       	movw	r20, r28
    1030:	4c 5f       	subi	r20, 0xFC	; 252
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	6a e8       	ldi	r22, 0x8A	; 138
    1036:	c8 01       	movw	r24, r16
    1038:	01 d4       	rcall	.+2050   	; 0x183c <bus_read>

	return data;
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
	} prox_thresholds;

	/* Read and check part ID register */
	uint8_t part_id = sensor_bus_get(hal, SFH7770_PART_ID);

	if (part_id == (SFH7770_PART_ID_VAL | SFH7770_PART_REV_VAL)) {
    103c:	84 39       	cpi	r24, 0x94	; 148
    103e:	09 f0       	breq	.+2      	; 0x1042 <sfh7770_init+0x38>
    1040:	8e c0       	rjmp	.+284    	; 0x115e <sfh7770_init+0x154>
			.caps.units          = SENSOR_UNITS_lux,
			.caps.scale          = SENSOR_SCALE_one,
			.caps.name = "SFH7770 Ambient Light & Proximity Sensor"
		};

		sensor->drv = &sfh7770_device;
    1042:	84 e9       	ldi	r24, 0x94	; 148
    1044:	90 e2       	ldi	r25, 0x20	; 32
    1046:	f7 01       	movw	r30, r14
    1048:	82 83       	std	Z+2, r24	; 0x02
    104a:	93 83       	std	Z+3, r25	; 0x03

		hal->resolution = SFH7770_DATA_RESOLUTION;
    104c:	80 e1       	ldi	r24, 0x10	; 16
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	f8 01       	movw	r30, r16
    1052:	86 8f       	std	Z+30, r24	; 0x1e
    1054:	97 8f       	std	Z+31, r25	; 0x1f

		/* Set the device burst read starting register address. */
		hal->burst_addr = SFH7770_ALS_DATA_LSB;
    1056:	8c e8       	ldi	r24, 0x8C	; 140
    1058:	87 83       	std	Z+7, r24	; 0x07

		/* Reset device during first init call */
		if (!sfh7770_initialized) {
    105a:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <sfh7770_initialized>
    105e:	81 11       	cpse	r24, r1
    1060:	0a c0       	rjmp	.+20     	; 0x1076 <sfh7770_init+0x6c>
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	8b 87       	std	Y+11, r24	; 0x0b
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	ae 01       	movw	r20, r28
    106c:	45 5f       	subi	r20, 0xF5	; 245
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	60 e8       	ldi	r22, 0x80	; 128
    1072:	c8 01       	movw	r24, r16
    1074:	24 d4       	rcall	.+2120   	; 0x18be <bus_write>
					ALS_CONTROL_SW_RESET);
		}

		/* Init light sensor functions if specified */

		if (sensor->type & SENSOR_TYPE_LIGHT) {
    1076:	f7 01       	movw	r30, r14
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	85 ff       	sbrs	r24, 5
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <sfh7770_init+0x9c>
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	89 87       	std	Y+9, r24	; 0x09
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ae 01       	movw	r20, r28
    1088:	47 5f       	subi	r20, 0xF7	; 247
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	60 e8       	ldi	r22, 0x80	; 128
    108e:	c8 01       	movw	r24, r16
    1090:	16 d4       	rcall	.+2092   	; 0x18be <bus_write>
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	8a 87       	std	Y+10, r24	; 0x0a
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	ae 01       	movw	r20, r28
    109c:	46 5f       	subi	r20, 0xF6	; 246
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	66 e8       	ldi	r22, 0x86	; 134
    10a2:	c8 01       	movw	r24, r16
    10a4:	0c d4       	rcall	.+2072   	; 0x18be <bus_write>
			sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
					ALS_INTERVAL_500MS);
		}

		/* Init proximity sensor functions if specified */
		if (sensor->type & SENSOR_TYPE_PROXIMITY) {
    10a6:	f7 01       	movw	r30, r14
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	95 81       	ldd	r25, Z+5	; 0x05
    10ac:	90 ff       	sbrs	r25, 0
    10ae:	3a c0       	rjmp	.+116    	; 0x1124 <sfh7770_init+0x11a>
    10b0:	0f 2e       	mov	r0, r31
    10b2:	f3 e0       	ldi	r31, 0x03	; 3
    10b4:	ff 2e       	mov	r15, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	fd 82       	std	Y+5, r15	; 0x05
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	ae 01       	movw	r20, r28
    10c0:	4b 5f       	subi	r20, 0xFB	; 251
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	61 e8       	ldi	r22, 0x81	; 129
    10c6:	c8 01       	movw	r24, r16
    10c8:	fa d3       	rcall	.+2036   	; 0x18be <bus_write>
    10ca:	85 e0       	ldi	r24, 0x05	; 5
    10cc:	8e 83       	std	Y+6, r24	; 0x06
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	ae 01       	movw	r20, r28
    10d4:	4a 5f       	subi	r20, 0xFA	; 250
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	65 e8       	ldi	r22, 0x85	; 133
    10da:	c8 01       	movw	r24, r16
    10dc:	f0 d3       	rcall	.+2016   	; 0x18be <bus_write>
    10de:	8b ed       	ldi	r24, 0xDB	; 219
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	ae 01       	movw	r20, r28
    10e8:	49 5f       	subi	r20, 0xF9	; 249
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	62 e8       	ldi	r22, 0x82	; 130
    10ee:	c8 01       	movw	r24, r16
    10f0:	e6 d3       	rcall	.+1996   	; 0x18be <bus_write>
    10f2:	f8 86       	std	Y+8, r15	; 0x08
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	ae 01       	movw	r20, r28
    10fa:	48 5f       	subi	r20, 0xF8	; 248
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	63 e8       	ldi	r22, 0x83	; 131
    1100:	c8 01       	movw	r24, r16
    1102:	dd d3       	rcall	.+1978   	; 0x18be <bus_write>
					I_LED2_SHIFT) | led1_curr));

			sensor_bus_put(hal, SFH7770_I_LED_3, led3_curr);

			/* Apply stored proximity thresholds from nvram */
			nvram_read(SFH7770_NVRAM_OFFSET, &prox_thresholds,
    1104:	43 e0       	ldi	r20, 0x03	; 3
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	be 01       	movw	r22, r28
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	88 e1       	ldi	r24, 0x18	; 24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	2b d4       	rcall	.+2134   	; 0x196a <nvram_read>
					sizeof(prox_thresholds));

			sensor_bus_write(hal, (SFH7770_PS_THR_LED1),
    1114:	23 e0       	ldi	r18, 0x03	; 3
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	ae 01       	movw	r20, r28
    111a:	4f 5f       	subi	r20, 0xFF	; 255
    111c:	5f 4f       	sbci	r21, 0xFF	; 255
    111e:	63 e9       	ldi	r22, 0x93	; 147
    1120:	c8 01       	movw	r24, r16
    1122:	cd d3       	rcall	.+1946   	; 0x18be <bus_write>
    1124:	80 91 01 22 	lds	r24, 0x2201	; 0x802201 <sfh7770_initialized>
					&prox_thresholds,
					sizeof(prox_thresholds));
		}

		if (!sfh7770_initialized) {
    1128:	81 11       	cpse	r24, r1
    112a:	15 c0       	rjmp	.+42     	; 0x1156 <sfh7770_init+0x14c>
    112c:	1c 82       	std	Y+4, r1	; 0x04
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	ae 01       	movw	r20, r28
    1134:	4c 5f       	subi	r20, 0xFC	; 252
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	62 e9       	ldi	r22, 0x92	; 146
    113a:	c8 01       	movw	r24, r16
    113c:	c0 d3       	rcall	.+1920   	; 0x18be <bus_write>
    113e:	f8 01       	movw	r30, r16
			 * latched).
			 */
			sensor_bus_put(hal, SFH7770_INT_SET, 0);

			/* Set up interrupt handler */
			if (STATUS_OK == hal->bus.status) {
    1140:	85 81       	ldd	r24, Z+5	; 0x05
    1142:	81 11       	cpse	r24, r1
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <sfh7770_init+0x14c>
				sensor_irq_connect(hal->mcu_sigint, sfh7770_isr, hal);
    1146:	60 85       	ldd	r22, Z+8	; 0x08
    1148:	71 85       	ldd	r23, Z+9	; 0x09
    114a:	82 85       	ldd	r24, Z+10	; 0x0a
    114c:	93 85       	ldd	r25, Z+11	; 0x0b
    114e:	98 01       	movw	r18, r16
    1150:	48 e7       	ldi	r20, 0x78	; 120
    1152:	54 e0       	ldi	r21, 0x04	; 4
    1154:	35 d4       	rcall	.+2154   	; 0x19c0 <sensor_irq_connect>
    1156:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		sfh7770_initialized = true;
    1158:	80 93 01 22 	sts	0x2201, r24	; 0x802201 <sfh7770_initialized>
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <sfh7770_init+0x156>
    115e:	80 e0       	ldi	r24, 0x00	; 0
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
	bool status = false;
    1160:	2b 96       	adiw	r28, 0x0b	; 11
		sfh7770_initialized = true;
		status = true;
	}

	return status;
}
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	08 95       	ret

00001174 <default_event_handler>:
    1174:	08 95       	ret

00001176 <sensor_attach>:
		*value = threshold.value;
		status = true;
	}

	return status;
}
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	ec 01       	movw	r28, r24
    1188:	8b 01       	movw	r16, r22
    118a:	6a 01       	movw	r12, r20
    118c:	79 01       	movw	r14, r18
    118e:	cb 01       	movw	r24, r22
    1190:	1a d4       	rcall	.+2100   	; 0x19c6 <sensor_find>
    1192:	88 83       	st	Y, r24
    1194:	99 83       	std	Y+1, r25	; 0x01
    1196:	0c 83       	std	Y+4, r16	; 0x04
    1198:	1d 83       	std	Y+5, r17	; 0x05
    119a:	eb 86       	std	Y+11, r14	; 0x0b
    119c:	fc 86       	std	Y+12, r15	; 0x0c
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <sensor_attach+0x4a>
    11a2:	dc 01       	movw	r26, r24
    11a4:	90 96       	adiw	r26, 0x20	; 32
    11a6:	ed 91       	ld	r30, X+
    11a8:	fc 91       	ld	r31, X
    11aa:	91 97       	sbiw	r26, 0x21	; 33
    11ac:	b6 01       	movw	r22, r12
    11ae:	ce 01       	movw	r24, r28
    11b0:	19 95       	eicall
    11b2:	88 23       	and	r24, r24
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <sensor_attach+0x4a>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	8e 83       	std	Y+6, r24	; 0x06
    11ba:	1f 82       	std	Y+7, r1	; 0x07
    11bc:	18 86       	std	Y+8, r1	; 0x08
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <sensor_attach+0x54>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	8f 83       	std	Y+7, r24	; 0x07
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	08 95       	ret

000011dc <sensor_read>:
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	dc 01       	movw	r26, r24
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	ed 91       	ld	r30, X+
    11e8:	fc 91       	ld	r31, X
    11ea:	13 97       	sbiw	r26, 0x03	; 3
    11ec:	01 90       	ld	r0, Z+
    11ee:	f0 81       	ld	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	31 f0       	breq	.+12     	; 0x1202 <sensor_read+0x26>
    11f6:	ea 01       	movw	r28, r20
    11f8:	19 95       	eicall
    11fa:	18 2f       	mov	r17, r24
    11fc:	81 11       	cpse	r24, r1
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <sensor_read+0x34>
    1200:	0c c0       	rjmp	.+24     	; 0x121a <sensor_read+0x3e>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	32 e8       	ldi	r19, 0x82	; 130
    1206:	fc 01       	movw	r30, r24
    1208:	27 83       	std	Z+7, r18	; 0x07
    120a:	30 87       	std	Z+8, r19	; 0x08
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <sensor_read+0x3e>
    1210:	d3 d3       	rcall	.+1958   	; 0x19b8 <sensor_timestamp>
    1212:	6c 87       	std	Y+12, r22	; 0x0c
    1214:	7d 87       	std	Y+13, r23	; 0x0d
    1216:	8e 87       	std	Y+14, r24	; 0x0e
    1218:	9f 87       	std	Y+15, r25	; 0x0f
    121a:	81 2f       	mov	r24, r17
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	08 95       	ret

00001224 <sensor_device_id>:
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	61 97       	sbiw	r28, 0x11	; 17
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	7b 01       	movw	r14, r22
    123c:	8a 01       	movw	r16, r20
    123e:	ae 01       	movw	r20, r28
    1240:	4f 5f       	subi	r20, 0xFF	; 255
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	63 e0       	ldi	r22, 0x03	; 3
    1246:	ca df       	rcall	.-108    	; 0x11dc <sensor_read>
    1248:	88 23       	and	r24, r24
    124a:	61 f0       	breq	.+24     	; 0x1264 <sensor_device_id+0x40>
    124c:	49 81       	ldd	r20, Y+1	; 0x01
    124e:	5a 81       	ldd	r21, Y+2	; 0x02
    1250:	6b 81       	ldd	r22, Y+3	; 0x03
    1252:	7c 81       	ldd	r23, Y+4	; 0x04
    1254:	f7 01       	movw	r30, r14
    1256:	40 83       	st	Z, r20
    1258:	51 83       	std	Z+1, r21	; 0x01
    125a:	62 83       	std	Z+2, r22	; 0x02
    125c:	73 83       	std	Z+3, r23	; 0x03
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	f8 01       	movw	r30, r16
    1262:	90 83       	st	Z, r25
    1264:	61 96       	adiw	r28, 0x11	; 17
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <sensor_set_threshold>:
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	00 d0       	rcall	.+0      	; 0x127e <sensor_set_threshold+0x6>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	69 83       	std	Y+1, r22	; 0x01
    1284:	4a 83       	std	Y+2, r20	; 0x02
    1286:	5b 83       	std	Y+3, r21	; 0x03
    1288:	dc 01       	movw	r26, r24
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	ed 91       	ld	r30, X+
    128e:	fc 91       	ld	r31, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	02 80       	ldd	r0, Z+2	; 0x02
    1294:	f3 81       	ldd	r31, Z+3	; 0x03
    1296:	e0 2d       	mov	r30, r0
    1298:	30 97       	sbiw	r30, 0x00	; 0
    129a:	31 f0       	breq	.+12     	; 0x12a8 <sensor_set_threshold+0x30>
    129c:	ae 01       	movw	r20, r28
    129e:	4f 5f       	subi	r20, 0xFF	; 255
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	67 e1       	ldi	r22, 0x17	; 23
    12a4:	19 95       	eicall
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <sensor_set_threshold+0x3c>
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	32 e8       	ldi	r19, 0x82	; 130
    12ac:	fc 01       	movw	r30, r24
    12ae:	27 83       	std	Z+7, r18	; 0x07
    12b0:	30 87       	std	Z+8, r19	; 0x08
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	23 96       	adiw	r28, 0x03	; 3
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <sensor_ioctl>:
 * @param   cmd     Specifies the IOCTL command.
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	1f 92       	push	r1
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	bool result = false;

	switch (cmd) {
    12d4:	6d 30       	cpi	r22, 0x0D	; 13
    12d6:	09 f4       	brne	.+2      	; 0x12da <sensor_ioctl+0x1a>
    12d8:	c5 c0       	rjmp	.+394    	; 0x1464 <sensor_ioctl+0x1a4>
    12da:	8c 01       	movw	r16, r24
    12dc:	6e 30       	cpi	r22, 0x0E	; 14
    12de:	30 f4       	brcc	.+12     	; 0x12ec <sensor_ioctl+0x2c>
    12e0:	69 30       	cpi	r22, 0x09	; 9
    12e2:	71 f0       	breq	.+28     	; 0x1300 <sensor_ioctl+0x40>
    12e4:	6a 30       	cpi	r22, 0x0A	; 10
    12e6:	09 f4       	brne	.+2      	; 0x12ea <sensor_ioctl+0x2a>
    12e8:	64 c0       	rjmp	.+200    	; 0x13b2 <sensor_ioctl+0xf2>
    12ea:	f5 c0       	rjmp	.+490    	; 0x14d6 <sensor_ioctl+0x216>
    12ec:	62 31       	cpi	r22, 0x12	; 18
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <sensor_ioctl+0x32>
    12f0:	6a c0       	rjmp	.+212    	; 0x13c6 <sensor_ioctl+0x106>
    12f2:	66 31       	cpi	r22, 0x16	; 22
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <sensor_ioctl+0x38>
    12f6:	c0 c0       	rjmp	.+384    	; 0x1478 <sensor_ioctl+0x1b8>
    12f8:	61 31       	cpi	r22, 0x11	; 17
    12fa:	09 f0       	breq	.+2      	; 0x12fe <sensor_ioctl+0x3e>
    12fc:	ec c0       	rjmp	.+472    	; 0x14d6 <sensor_ioctl+0x216>
    12fe:	0a c0       	rjmp	.+20     	; 0x1314 <sensor_ioctl+0x54>
	case SENSOR_GET_RANGE:
		*((int16_t *)arg) = sensor->hal->range;
    1300:	dc 01       	movw	r26, r24
    1302:	ed 91       	ld	r30, X+
    1304:	fc 91       	ld	r31, X
    1306:	80 8d       	ldd	r24, Z+24	; 0x18
    1308:	91 8d       	ldd	r25, Z+25	; 0x19
    130a:	fa 01       	movw	r30, r20
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    1310:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1312:	f6 c0       	rjmp	.+492    	; 0x1500 <sensor_ioctl+0x240>
	{
		int16_t const range = *(int16_t *)arg;

		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
    1314:	fc 01       	movw	r30, r24
    1316:	a2 81       	ldd	r26, Z+2	; 0x02
    1318:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
    131a:	a6 3f       	cpi	r26, 0xF6	; 246
    131c:	ff ef       	ldi	r31, 0xFF	; 255
    131e:	bf 07       	cpc	r27, r31
    1320:	09 f4       	brne	.+2      	; 0x1324 <sensor_ioctl+0x64>
    1322:	40 c0       	rjmp	.+128    	; 0x13a4 <sensor_ioctl+0xe4>
    1324:	51 96       	adiw	r26, 0x11	; 17
    1326:	6d 91       	ld	r22, X+
    1328:	7c 91       	ld	r23, X
    132a:	52 97       	sbiw	r26, 0x12	; 18
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	c9 f1       	breq	.+114    	; 0x13a4 <sensor_ioctl+0xe4>
		for (int i = 0; i < caps->range_count; ++i) {
    1332:	1d 96       	adiw	r26, 0x0d	; 13
    1334:	8d 91       	ld	r24, X+
    1336:	9c 91       	ld	r25, X
    1338:	1e 97       	sbiw	r26, 0x0e	; 14
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	99 f1       	breq	.+102    	; 0x13a4 <sensor_ioctl+0xe4>
		result = true;
		break;

	case SENSOR_SET_RANGE:
	{
		int16_t const range = *(int16_t *)arg;
    133e:	fa 01       	movw	r30, r20
    1340:	e0 80       	ld	r14, Z
    1342:	f1 80       	ldd	r15, Z+1	; 0x01
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
			if (caps->range_table[i].range_units == range) {
    1344:	fb 01       	movw	r30, r22
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	e2 16       	cp	r14, r18
    134c:	f3 06       	cpc	r15, r19
    134e:	99 f4       	brne	.+38     	; 0x1376 <sensor_ioctl+0xb6>
    1350:	07 c0       	rjmp	.+14     	; 0x1360 <sensor_ioctl+0xa0>
    1352:	33 96       	adiw	r30, 0x03	; 3
    1354:	20 81       	ld	r18, Z
    1356:	31 81       	ldd	r19, Z+1	; 0x01
    1358:	e2 16       	cp	r14, r18
    135a:	f3 06       	cpc	r15, r19
    135c:	81 f4       	brne	.+32     	; 0x137e <sensor_ioctl+0xbe>
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <sensor_ioctl+0xa4>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
				*index = i;
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	9a 83       	std	Y+2, r25	; 0x02
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    1368:	12 96       	adiw	r26, 0x02	; 2
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	13 97       	sbiw	r26, 0x03	; 3
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	51 f4       	brne	.+20     	; 0x1388 <sensor_ioctl+0xc8>
    1374:	17 c0       	rjmp	.+46     	; 0x13a4 <sensor_ioctl+0xe4>
    1376:	fb 01       	movw	r30, r22
    1378:	ac 01       	movw	r20, r24
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
			if (caps->range_table[i].range_units == range) {
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	84 17       	cp	r24, r20
    1382:	95 07       	cpc	r25, r21
    1384:	31 f7       	brne	.-52     	; 0x1352 <sensor_ioctl+0x92>
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <sensor_ioctl+0xe4>
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    1388:	ae 01       	movw	r20, r28
    138a:	4f 5f       	subi	r20, 0xFF	; 255
    138c:	5f 4f       	sbci	r21, 0xFF	; 255
    138e:	61 e1       	ldi	r22, 0x11	; 17
    1390:	c8 01       	movw	r24, r16
    1392:	19 95       	eicall
		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
    1394:	88 23       	and	r24, r24
    1396:	31 f0       	breq	.+12     	; 0x13a4 <sensor_ioctl+0xe4>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->range = range;
    1398:	d8 01       	movw	r26, r16
    139a:	ed 91       	ld	r30, X+
    139c:	fc 91       	ld	r31, X
    139e:	e0 8e       	std	Z+24, r14	; 0x18
    13a0:	f1 8e       	std	Z+25, r15	; 0x19
    13a2:	ae c0       	rjmp	.+348    	; 0x1500 <sensor_ioctl+0x240>
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    13a4:	80 e2       	ldi	r24, 0x20	; 32
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	f8 01       	movw	r30, r16
    13aa:	87 83       	std	Z+7, r24	; 0x07
    13ac:	90 87       	std	Z+8, r25	; 0x08
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	a7 c0       	rjmp	.+334    	; 0x1500 <sensor_ioctl+0x240>

		break;
	}

	case SENSOR_GET_BANDWIDTH:
		*((int16_t *)arg) = sensor->hal->bandwidth;
    13b2:	dc 01       	movw	r26, r24
    13b4:	ed 91       	ld	r30, X+
    13b6:	fc 91       	ld	r31, X
    13b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    13ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    13bc:	fa 01       	movw	r30, r20
    13be:	80 83       	st	Z, r24
    13c0:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
		break;
    13c4:	9d c0       	rjmp	.+314    	; 0x1500 <sensor_ioctl+0x240>
	case SENSOR_SET_BANDWIDTH:
	{
		int16_t const bandwidth_Hz = *(int16_t *)arg;

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
    13c6:	fc 01       	movw	r30, r24
    13c8:	a2 81       	ldd	r26, Z+2	; 0x02
    13ca:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
    13cc:	a6 3f       	cpi	r26, 0xF6	; 246
    13ce:	ff ef       	ldi	r31, 0xFF	; 255
    13d0:	bf 07       	cpc	r27, r31
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <sensor_ioctl+0x116>
    13d4:	40 c0       	rjmp	.+128    	; 0x1456 <sensor_ioctl+0x196>
    13d6:	53 96       	adiw	r26, 0x13	; 19
    13d8:	6d 91       	ld	r22, X+
    13da:	7c 91       	ld	r23, X
    13dc:	54 97       	sbiw	r26, 0x14	; 20
    13de:	61 15       	cp	r22, r1
    13e0:	71 05       	cpc	r23, r1
    13e2:	c9 f1       	breq	.+114    	; 0x1456 <sensor_ioctl+0x196>
		for (int i = 0; i < caps->band_count; ++i) {
    13e4:	1f 96       	adiw	r26, 0x0f	; 15
    13e6:	8d 91       	ld	r24, X+
    13e8:	9c 91       	ld	r25, X
    13ea:	50 97       	sbiw	r26, 0x10	; 16
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	99 f1       	breq	.+102    	; 0x1456 <sensor_ioctl+0x196>
		result = true;
		break;

	case SENSOR_SET_BANDWIDTH:
	{
		int16_t const bandwidth_Hz = *(int16_t *)arg;
    13f0:	fa 01       	movw	r30, r20
    13f2:	e0 80       	ld	r14, Z
    13f4:	f1 80       	ldd	r15, Z+1	; 0x01
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
			if (caps->band_table[i].bandwidth_Hz == band) {
    13f6:	fb 01       	movw	r30, r22
    13f8:	20 81       	ld	r18, Z
    13fa:	31 81       	ldd	r19, Z+1	; 0x01
    13fc:	e2 16       	cp	r14, r18
    13fe:	f3 06       	cpc	r15, r19
    1400:	99 f4       	brne	.+38     	; 0x1428 <sensor_ioctl+0x168>
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <sensor_ioctl+0x152>
    1404:	33 96       	adiw	r30, 0x03	; 3
    1406:	20 81       	ld	r18, Z
    1408:	31 81       	ldd	r19, Z+1	; 0x01
    140a:	e2 16       	cp	r14, r18
    140c:	f3 06       	cpc	r15, r19
    140e:	81 f4       	brne	.+32     	; 0x1430 <sensor_ioctl+0x170>
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <sensor_ioctl+0x156>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
				*index = i;
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	9a 83       	std	Y+2, r25	; 0x02
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    141a:	12 96       	adiw	r26, 0x02	; 2
    141c:	ed 91       	ld	r30, X+
    141e:	fc 91       	ld	r31, X
    1420:	13 97       	sbiw	r26, 0x03	; 3
    1422:	30 97       	sbiw	r30, 0x00	; 0
    1424:	51 f4       	brne	.+20     	; 0x143a <sensor_ioctl+0x17a>
    1426:	17 c0       	rjmp	.+46     	; 0x1456 <sensor_ioctl+0x196>
    1428:	fb 01       	movw	r30, r22
    142a:	ac 01       	movw	r20, r24
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
			if (caps->band_table[i].bandwidth_Hz == band) {
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	48 17       	cp	r20, r24
    1434:	59 07       	cpc	r21, r25
    1436:	31 f7       	brne	.-52     	; 0x1404 <sensor_ioctl+0x144>
    1438:	0e c0       	rjmp	.+28     	; 0x1456 <sensor_ioctl+0x196>
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    143a:	ae 01       	movw	r20, r28
    143c:	4f 5f       	subi	r20, 0xFF	; 255
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	62 e1       	ldi	r22, 0x12	; 18
    1442:	c8 01       	movw	r24, r16
    1444:	19 95       	eicall

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
    1446:	88 23       	and	r24, r24
    1448:	31 f0       	breq	.+12     	; 0x1456 <sensor_ioctl+0x196>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->bandwidth = bandwidth_Hz;
    144a:	d8 01       	movw	r26, r16
    144c:	ed 91       	ld	r30, X+
    144e:	fc 91       	ld	r31, X
    1450:	e2 8e       	std	Z+26, r14	; 0x1a
    1452:	f3 8e       	std	Z+27, r15	; 0x1b
    1454:	55 c0       	rjmp	.+170    	; 0x1500 <sensor_ioctl+0x240>
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    1456:	80 e2       	ldi	r24, 0x20	; 32
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	f8 01       	movw	r30, r16
    145c:	87 83       	std	Z+7, r24	; 0x07
    145e:	90 87       	std	Z+8, r25	; 0x08
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	4e c0       	rjmp	.+156    	; 0x1500 <sensor_ioctl+0x240>

		break;
	}

	case SENSOR_GET_SAMPLE_RATE:
		*((int16_t *)arg) = sensor->hal->sample_rate;
    1464:	dc 01       	movw	r26, r24
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	84 8d       	ldd	r24, Z+28	; 0x1c
    146c:	95 8d       	ldd	r25, Z+29	; 0x1d
    146e:	fa 01       	movw	r30, r20
    1470:	80 83       	st	Z, r24
    1472:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    1474:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1476:	44 c0       	rjmp	.+136    	; 0x1500 <sensor_ioctl+0x240>

	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
    1478:	dc 01       	movw	r26, r24
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	02 80       	ldd	r0, Z+2	; 0x02
    1484:	f3 81       	ldd	r31, Z+3	; 0x03
    1486:	e0 2d       	mov	r30, r0
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	41 f0       	breq	.+16     	; 0x149c <sensor_ioctl+0x1dc>
		result = true;
		break;

	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;
    148c:	da 01       	movw	r26, r20
    148e:	ed 90       	ld	r14, X+
    1490:	fc 90       	ld	r15, X

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
    1492:	66 e1       	ldi	r22, 0x16	; 22
    1494:	19 95       	eicall
    1496:	81 11       	cpse	r24, r1
    1498:	08 c0       	rjmp	.+16     	; 0x14aa <sensor_ioctl+0x1ea>
    149a:	0e c0       	rjmp	.+28     	; 0x14b8 <sensor_ioctl+0x1f8>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	92 e8       	ldi	r25, 0x82	; 130
    14a0:	f8 01       	movw	r30, r16
    14a2:	87 83       	std	Z+7, r24	; 0x07
    14a4:	90 87       	std	Z+8, r25	; 0x08
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <sensor_ioctl+0x240>
	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
			sensor->hal->sample_rate = sample_Hz;
    14aa:	d8 01       	movw	r26, r16
    14ac:	ed 91       	ld	r30, X+
    14ae:	fc 91       	ld	r31, X
    14b0:	e4 8e       	std	Z+28, r14	; 0x1c
    14b2:	f5 8e       	std	Z+29, r15	; 0x1d
			result = true;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	24 c0       	rjmp	.+72     	; 0x1500 <sensor_ioctl+0x240>
		} else if (SENSOR_ERR_FUNCTION != sensor->err) {
    14b8:	f8 01       	movw	r30, r16
    14ba:	87 81       	ldd	r24, Z+7	; 0x07
    14bc:	90 85       	ldd	r25, Z+8	; 0x08
    14be:	81 15       	cp	r24, r1
    14c0:	92 48       	sbci	r25, 0x82	; 130
    14c2:	e9 f0       	breq	.+58     	; 0x14fe <sensor_ioctl+0x23e>
			sensor->err = SENSOR_ERR_PARAMS;
    14c4:	80 e2       	ldi	r24, 0x20	; 32
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	d8 01       	movw	r26, r16
    14ca:	17 96       	adiw	r26, 0x07	; 7
    14cc:	8d 93       	st	X+, r24
    14ce:	9c 93       	st	X, r25
    14d0:	18 97       	sbiw	r26, 0x08	; 8
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	15 c0       	rjmp	.+42     	; 0x1500 <sensor_ioctl+0x240>

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    14d6:	d8 01       	movw	r26, r16
    14d8:	12 96       	adiw	r26, 0x02	; 2
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	13 97       	sbiw	r26, 0x03	; 3
    14e0:	02 80       	ldd	r0, Z+2	; 0x02
    14e2:	f3 81       	ldd	r31, Z+3	; 0x03
    14e4:	e0 2d       	mov	r30, r0
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <sensor_ioctl+0x230>
    14ea:	c8 01       	movw	r24, r16
    14ec:	19 95       	eicall
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <sensor_ioctl+0x240>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	92 e8       	ldi	r25, 0x82	; 130
    14f4:	f8 01       	movw	r30, r16
    14f6:	87 83       	std	Z+7, r24	; 0x07
    14f8:	90 87       	std	Z+8, r25	; 0x08

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <sensor_ioctl+0x240>
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
		break;
	}

	return result;
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	08 95       	ret

00001512 <bus_init>:
 */
uint8_t bus_reg_fieldget(bus_desc_t *bus, uint8_t addr, uint8_t mask)
{
	uint8_t const value = mask & bus_get(bus, addr);
	return (value / (mask & ~(mask << 1)));
}
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	29 97       	sbiw	r28, 0x09	; 9
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	8c 01       	movw	r16, r24
    1526:	fe 01       	movw	r30, r28
    1528:	31 96       	adiw	r30, 0x01	; 1
    152a:	89 e0       	ldi	r24, 0x09	; 9
    152c:	df 01       	movw	r26, r30
    152e:	1d 92       	st	X+, r1
    1530:	8a 95       	dec	r24
    1532:	e9 f7       	brne	.-6      	; 0x152e <bus_init+0x1c>
    1534:	49 83       	std	Y+1, r20	; 0x01
    1536:	5a 83       	std	Y+2, r21	; 0x02
    1538:	6b 83       	std	Y+3, r22	; 0x03
    153a:	7c 83       	std	Y+4, r23	; 0x04
    153c:	9a 01       	movw	r18, r20
    153e:	ab 01       	movw	r20, r22
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	44 1f       	adc	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	78 e4       	ldi	r23, 0x48	; 72
    154c:	88 ee       	ldi	r24, 0xE8	; 232
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__udivmodsi4>
    1554:	da 01       	movw	r26, r20
    1556:	c9 01       	movw	r24, r18
    1558:	05 97       	sbiw	r24, 0x05	; 5
    155a:	a1 09       	sbc	r26, r1
    155c:	b1 09       	sbc	r27, r1
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	af 83       	std	Y+7, r26	; 0x07
    1564:	b8 87       	std	Y+8, r27	; 0x08
    1566:	01 15       	cp	r16, r1
    1568:	11 05       	cpc	r17, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <bus_init+0x5c>
    156c:	56 c1       	rjmp	.+684    	; 0x181a <bus_init+0x308>
    156e:	00 3c       	cpi	r16, 0xC0	; 192
    1570:	11 05       	cpc	r17, r1
    1572:	21 f4       	brne	.+8      	; 0x157c <bus_init+0x6a>
    1574:	60 e1       	ldi	r22, 0x10	; 16
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	34 d8       	rcall	.-3992   	; 0x5e2 <sysclk_enable_module>
    157a:	4f c1       	rjmp	.+670    	; 0x181a <bus_init+0x308>
    157c:	00 34       	cpi	r16, 0x40	; 64
    157e:	b4 e0       	ldi	r27, 0x04	; 4
    1580:	1b 07       	cpc	r17, r27
    1582:	21 f4       	brne	.+8      	; 0x158c <bus_init+0x7a>
    1584:	68 e0       	ldi	r22, 0x08	; 8
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	2c d8       	rcall	.-4008   	; 0x5e2 <sysclk_enable_module>
    158a:	47 c1       	rjmp	.+654    	; 0x181a <bus_init+0x308>
    158c:	01 15       	cp	r16, r1
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	18 07       	cpc	r17, r24
    1592:	21 f4       	brne	.+8      	; 0x159c <bus_init+0x8a>
    1594:	64 e0       	ldi	r22, 0x04	; 4
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	24 d8       	rcall	.-4024   	; 0x5e2 <sysclk_enable_module>
    159a:	3f c1       	rjmp	.+638    	; 0x181a <bus_init+0x308>
    159c:	00 38       	cpi	r16, 0x80	; 128
    159e:	a1 e0       	ldi	r26, 0x01	; 1
    15a0:	1a 07       	cpc	r17, r26
    15a2:	21 f4       	brne	.+8      	; 0x15ac <bus_init+0x9a>
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	1c d8       	rcall	.-4040   	; 0x5e2 <sysclk_enable_module>
    15aa:	37 c1       	rjmp	.+622    	; 0x181a <bus_init+0x308>
    15ac:	01 15       	cp	r16, r1
    15ae:	b1 e0       	ldi	r27, 0x01	; 1
    15b0:	1b 07       	cpc	r17, r27
    15b2:	21 f4       	brne	.+8      	; 0x15bc <bus_init+0xaa>
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	14 d8       	rcall	.-4056   	; 0x5e2 <sysclk_enable_module>
    15ba:	2f c1       	rjmp	.+606    	; 0x181a <bus_init+0x308>
    15bc:	00 38       	cpi	r16, 0x80	; 128
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	18 07       	cpc	r17, r24
    15c2:	21 f4       	brne	.+8      	; 0x15cc <bus_init+0xba>
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	0c d8       	rcall	.-4072   	; 0x5e2 <sysclk_enable_module>
    15ca:	27 c1       	rjmp	.+590    	; 0x181a <bus_init+0x308>
    15cc:	00 39       	cpi	r16, 0x90	; 144
    15ce:	a3 e0       	ldi	r26, 0x03	; 3
    15d0:	1a 07       	cpc	r17, r26
    15d2:	21 f4       	brne	.+8      	; 0x15dc <bus_init+0xca>
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	04 d8       	rcall	.-4088   	; 0x5e2 <sysclk_enable_module>
    15da:	1f c1       	rjmp	.+574    	; 0x181a <bus_init+0x308>
    15dc:	01 15       	cp	r16, r1
    15de:	b2 e0       	ldi	r27, 0x02	; 2
    15e0:	1b 07       	cpc	r17, r27
    15e2:	29 f4       	brne	.+10     	; 0x15ee <bus_init+0xdc>
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    15ec:	16 c1       	rjmp	.+556    	; 0x181a <bus_init+0x308>
    15ee:	00 34       	cpi	r16, 0x40	; 64
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	18 07       	cpc	r17, r24
    15f4:	29 f4       	brne	.+10     	; 0x1600 <bus_init+0xee>
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    15fe:	0d c1       	rjmp	.+538    	; 0x181a <bus_init+0x308>
    1600:	01 15       	cp	r16, r1
    1602:	a3 e0       	ldi	r26, 0x03	; 3
    1604:	1a 07       	cpc	r17, r26
    1606:	29 f4       	brne	.+10     	; 0x1612 <bus_init+0x100>
    1608:	64 e0       	ldi	r22, 0x04	; 4
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1610:	04 c1       	rjmp	.+520    	; 0x181a <bus_init+0x308>
    1612:	00 32       	cpi	r16, 0x20	; 32
    1614:	b3 e0       	ldi	r27, 0x03	; 3
    1616:	1b 07       	cpc	r17, r27
    1618:	29 f4       	brne	.+10     	; 0x1624 <bus_init+0x112>
    161a:	64 e0       	ldi	r22, 0x04	; 4
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1622:	fb c0       	rjmp	.+502    	; 0x181a <bus_init+0x308>
    1624:	01 15       	cp	r16, r1
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	18 07       	cpc	r17, r24
    162a:	29 f4       	brne	.+10     	; 0x1636 <bus_init+0x124>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1634:	f2 c0       	rjmp	.+484    	; 0x181a <bus_init+0x308>
    1636:	01 15       	cp	r16, r1
    1638:	a9 e0       	ldi	r26, 0x09	; 9
    163a:	1a 07       	cpc	r17, r26
    163c:	29 f4       	brne	.+10     	; 0x1648 <bus_init+0x136>
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1646:	e9 c0       	rjmp	.+466    	; 0x181a <bus_init+0x308>
    1648:	01 15       	cp	r16, r1
    164a:	ba e0       	ldi	r27, 0x0A	; 10
    164c:	1b 07       	cpc	r17, r27
    164e:	29 f4       	brne	.+10     	; 0x165a <bus_init+0x148>
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	85 e0       	ldi	r24, 0x05	; 5
    1654:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1658:	e0 c0       	rjmp	.+448    	; 0x181a <bus_init+0x308>
    165a:	01 15       	cp	r16, r1
    165c:	8b e0       	ldi	r24, 0x0B	; 11
    165e:	18 07       	cpc	r17, r24
    1660:	29 f4       	brne	.+10     	; 0x166c <bus_init+0x15a>
    1662:	61 e0       	ldi	r22, 0x01	; 1
    1664:	86 e0       	ldi	r24, 0x06	; 6
    1666:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    166a:	d7 c0       	rjmp	.+430    	; 0x181a <bus_init+0x308>
    166c:	00 34       	cpi	r16, 0x40	; 64
    166e:	a8 e0       	ldi	r26, 0x08	; 8
    1670:	1a 07       	cpc	r17, r26
    1672:	29 f4       	brne	.+10     	; 0x167e <bus_init+0x16c>
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    167c:	ce c0       	rjmp	.+412    	; 0x181a <bus_init+0x308>
    167e:	00 34       	cpi	r16, 0x40	; 64
    1680:	b9 e0       	ldi	r27, 0x09	; 9
    1682:	1b 07       	cpc	r17, r27
    1684:	29 f4       	brne	.+10     	; 0x1690 <bus_init+0x17e>
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	84 e0       	ldi	r24, 0x04	; 4
    168a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    168e:	c5 c0       	rjmp	.+394    	; 0x181a <bus_init+0x308>
    1690:	00 34       	cpi	r16, 0x40	; 64
    1692:	8a e0       	ldi	r24, 0x0A	; 10
    1694:	18 07       	cpc	r17, r24
    1696:	29 f4       	brne	.+10     	; 0x16a2 <bus_init+0x190>
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	85 e0       	ldi	r24, 0x05	; 5
    169c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16a0:	bc c0       	rjmp	.+376    	; 0x181a <bus_init+0x308>
    16a2:	00 34       	cpi	r16, 0x40	; 64
    16a4:	ab e0       	ldi	r26, 0x0B	; 11
    16a6:	1a 07       	cpc	r17, r26
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <bus_init+0x1a2>
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	86 e0       	ldi	r24, 0x06	; 6
    16ae:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16b2:	b3 c0       	rjmp	.+358    	; 0x181a <bus_init+0x308>
    16b4:	00 39       	cpi	r16, 0x90	; 144
    16b6:	b8 e0       	ldi	r27, 0x08	; 8
    16b8:	1b 07       	cpc	r17, r27
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <bus_init+0x1b4>
    16bc:	64 e0       	ldi	r22, 0x04	; 4
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16c4:	aa c0       	rjmp	.+340    	; 0x181a <bus_init+0x308>
    16c6:	00 39       	cpi	r16, 0x90	; 144
    16c8:	89 e0       	ldi	r24, 0x09	; 9
    16ca:	18 07       	cpc	r17, r24
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <bus_init+0x1c6>
    16ce:	64 e0       	ldi	r22, 0x04	; 4
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16d6:	a1 c0       	rjmp	.+322    	; 0x181a <bus_init+0x308>
    16d8:	00 39       	cpi	r16, 0x90	; 144
    16da:	aa e0       	ldi	r26, 0x0A	; 10
    16dc:	1a 07       	cpc	r17, r26
    16de:	29 f4       	brne	.+10     	; 0x16ea <bus_init+0x1d8>
    16e0:	64 e0       	ldi	r22, 0x04	; 4
    16e2:	85 e0       	ldi	r24, 0x05	; 5
    16e4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16e8:	98 c0       	rjmp	.+304    	; 0x181a <bus_init+0x308>
    16ea:	00 39       	cpi	r16, 0x90	; 144
    16ec:	bb e0       	ldi	r27, 0x0B	; 11
    16ee:	1b 07       	cpc	r17, r27
    16f0:	29 f4       	brne	.+10     	; 0x16fc <bus_init+0x1ea>
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	86 e0       	ldi	r24, 0x06	; 6
    16f6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    16fa:	8f c0       	rjmp	.+286    	; 0x181a <bus_init+0x308>
    16fc:	00 3c       	cpi	r16, 0xC0	; 192
    16fe:	88 e0       	ldi	r24, 0x08	; 8
    1700:	18 07       	cpc	r17, r24
    1702:	29 f4       	brne	.+10     	; 0x170e <bus_init+0x1fc>
    1704:	68 e0       	ldi	r22, 0x08	; 8
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    170c:	86 c0       	rjmp	.+268    	; 0x181a <bus_init+0x308>
    170e:	00 3c       	cpi	r16, 0xC0	; 192
    1710:	a9 e0       	ldi	r26, 0x09	; 9
    1712:	1a 07       	cpc	r17, r26
    1714:	29 f4       	brne	.+10     	; 0x1720 <bus_init+0x20e>
    1716:	68 e0       	ldi	r22, 0x08	; 8
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    171e:	7d c0       	rjmp	.+250    	; 0x181a <bus_init+0x308>
    1720:	00 3c       	cpi	r16, 0xC0	; 192
    1722:	ba e0       	ldi	r27, 0x0A	; 10
    1724:	1b 07       	cpc	r17, r27
    1726:	29 f4       	brne	.+10     	; 0x1732 <bus_init+0x220>
    1728:	68 e0       	ldi	r22, 0x08	; 8
    172a:	85 e0       	ldi	r24, 0x05	; 5
    172c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1730:	74 c0       	rjmp	.+232    	; 0x181a <bus_init+0x308>
    1732:	00 3c       	cpi	r16, 0xC0	; 192
    1734:	8b e0       	ldi	r24, 0x0B	; 11
    1736:	18 07       	cpc	r17, r24
    1738:	29 f4       	brne	.+10     	; 0x1744 <bus_init+0x232>
    173a:	68 e0       	ldi	r22, 0x08	; 8
    173c:	86 e0       	ldi	r24, 0x06	; 6
    173e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1742:	6b c0       	rjmp	.+214    	; 0x181a <bus_init+0x308>
    1744:	00 3a       	cpi	r16, 0xA0	; 160
    1746:	a8 e0       	ldi	r26, 0x08	; 8
    1748:	1a 07       	cpc	r17, r26
    174a:	29 f4       	brne	.+10     	; 0x1756 <bus_init+0x244>
    174c:	60 e1       	ldi	r22, 0x10	; 16
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1754:	62 c0       	rjmp	.+196    	; 0x181a <bus_init+0x308>
    1756:	00 3a       	cpi	r16, 0xA0	; 160
    1758:	b9 e0       	ldi	r27, 0x09	; 9
    175a:	1b 07       	cpc	r17, r27
    175c:	29 f4       	brne	.+10     	; 0x1768 <bus_init+0x256>
    175e:	60 e1       	ldi	r22, 0x10	; 16
    1760:	84 e0       	ldi	r24, 0x04	; 4
    1762:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1766:	59 c0       	rjmp	.+178    	; 0x181a <bus_init+0x308>
    1768:	00 3a       	cpi	r16, 0xA0	; 160
    176a:	8a e0       	ldi	r24, 0x0A	; 10
    176c:	18 07       	cpc	r17, r24
    176e:	29 f4       	brne	.+10     	; 0x177a <bus_init+0x268>
    1770:	60 e1       	ldi	r22, 0x10	; 16
    1772:	85 e0       	ldi	r24, 0x05	; 5
    1774:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1778:	50 c0       	rjmp	.+160    	; 0x181a <bus_init+0x308>
    177a:	00 3a       	cpi	r16, 0xA0	; 160
    177c:	ab e0       	ldi	r26, 0x0B	; 11
    177e:	1a 07       	cpc	r17, r26
    1780:	29 f4       	brne	.+10     	; 0x178c <bus_init+0x27a>
    1782:	60 e1       	ldi	r22, 0x10	; 16
    1784:	86 e0       	ldi	r24, 0x06	; 6
    1786:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    178a:	47 c0       	rjmp	.+142    	; 0x181a <bus_init+0x308>
    178c:	00 3b       	cpi	r16, 0xB0	; 176
    178e:	b8 e0       	ldi	r27, 0x08	; 8
    1790:	1b 07       	cpc	r17, r27
    1792:	29 f4       	brne	.+10     	; 0x179e <bus_init+0x28c>
    1794:	60 e2       	ldi	r22, 0x20	; 32
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    179c:	3e c0       	rjmp	.+124    	; 0x181a <bus_init+0x308>
    179e:	00 3b       	cpi	r16, 0xB0	; 176
    17a0:	89 e0       	ldi	r24, 0x09	; 9
    17a2:	18 07       	cpc	r17, r24
    17a4:	29 f4       	brne	.+10     	; 0x17b0 <bus_init+0x29e>
    17a6:	60 e2       	ldi	r22, 0x20	; 32
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    17ae:	35 c0       	rjmp	.+106    	; 0x181a <bus_init+0x308>
    17b0:	00 3b       	cpi	r16, 0xB0	; 176
    17b2:	aa e0       	ldi	r26, 0x0A	; 10
    17b4:	1a 07       	cpc	r17, r26
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <bus_init+0x2b0>
    17b8:	60 e2       	ldi	r22, 0x20	; 32
    17ba:	85 e0       	ldi	r24, 0x05	; 5
    17bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    17c0:	2c c0       	rjmp	.+88     	; 0x181a <bus_init+0x308>
    17c2:	00 3b       	cpi	r16, 0xB0	; 176
    17c4:	bb e0       	ldi	r27, 0x0B	; 11
    17c6:	1b 07       	cpc	r17, r27
    17c8:	29 f4       	brne	.+10     	; 0x17d4 <bus_init+0x2c2>
    17ca:	60 e2       	ldi	r22, 0x20	; 32
    17cc:	86 e0       	ldi	r24, 0x06	; 6
    17ce:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    17d2:	23 c0       	rjmp	.+70     	; 0x181a <bus_init+0x308>
    17d4:	00 38       	cpi	r16, 0x80	; 128
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	18 07       	cpc	r17, r24
    17da:	29 f4       	brne	.+10     	; 0x17e6 <bus_init+0x2d4>
    17dc:	60 e4       	ldi	r22, 0x40	; 64
    17de:	83 e0       	ldi	r24, 0x03	; 3
    17e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    17e4:	1a c0       	rjmp	.+52     	; 0x181a <bus_init+0x308>
    17e6:	00 39       	cpi	r16, 0x90	; 144
    17e8:	a4 e0       	ldi	r26, 0x04	; 4
    17ea:	1a 07       	cpc	r17, r26
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <bus_init+0x2e6>
    17ee:	60 e4       	ldi	r22, 0x40	; 64
    17f0:	84 e0       	ldi	r24, 0x04	; 4
    17f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    17f6:	11 c0       	rjmp	.+34     	; 0x181a <bus_init+0x308>
    17f8:	00 3a       	cpi	r16, 0xA0	; 160
    17fa:	b4 e0       	ldi	r27, 0x04	; 4
    17fc:	1b 07       	cpc	r17, r27
    17fe:	29 f4       	brne	.+10     	; 0x180a <bus_init+0x2f8>
    1800:	60 e4       	ldi	r22, 0x40	; 64
    1802:	85 e0       	ldi	r24, 0x05	; 5
    1804:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    1808:	08 c0       	rjmp	.+16     	; 0x181a <bus_init+0x308>
    180a:	00 3b       	cpi	r16, 0xB0	; 176
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	18 07       	cpc	r17, r24
    1810:	21 f4       	brne	.+8      	; 0x181a <bus_init+0x308>
    1812:	60 e4       	ldi	r22, 0x40	; 64
    1814:	86 e0       	ldi	r24, 0x06	; 6
    1816:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    181a:	be 01       	movw	r22, r28
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	c8 01       	movw	r24, r16
    1822:	19 d4       	rcall	.+2098   	; 0x2056 <twi_master_init>
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	81 11       	cpse	r24, r1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	89 2f       	mov	r24, r25
    182c:	29 96       	adiw	r28, 0x09	; 9
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	08 95       	ret

0000183c <bus_read>:
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	2b 97       	sbiw	r28, 0x0b	; 11
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	8c 01       	movw	r16, r24
    1854:	e2 2e       	mov	r14, r18
    1856:	f3 2e       	mov	r15, r19
    1858:	fe 01       	movw	r30, r28
    185a:	31 96       	adiw	r30, 0x01	; 1
    185c:	8b e0       	ldi	r24, 0x0B	; 11
    185e:	df 01       	movw	r26, r30
    1860:	1d 92       	st	X+, r1
    1862:	8a 95       	dec	r24
    1864:	e9 f7       	brne	.-6      	; 0x1860 <bus_read+0x24>
    1866:	d8 01       	movw	r26, r16
    1868:	13 96       	adiw	r26, 0x03	; 3
    186a:	8c 91       	ld	r24, X
    186c:	13 97       	sbiw	r26, 0x03	; 3
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	6a 83       	std	Y+2, r22	; 0x02
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	4f 83       	std	Y+7, r20	; 0x07
    187c:	58 87       	std	Y+8, r21	; 0x08
    187e:	29 87       	std	Y+9, r18	; 0x09
    1880:	3a 87       	std	Y+10, r19	; 0x0a
    1882:	16 96       	adiw	r26, 0x06	; 6
    1884:	8c 91       	ld	r24, X
    1886:	16 97       	sbiw	r26, 0x06	; 6
    1888:	8b 87       	std	Y+11, r24	; 0x0b
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	bf 01       	movw	r22, r30
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	8d 91       	ld	r24, X+
    1892:	9c 91       	ld	r25, X
    1894:	12 97       	sbiw	r26, 0x02	; 2
    1896:	f4 d3       	rcall	.+2024   	; 0x2080 <twi_master_transfer>
    1898:	f8 01       	movw	r30, r16
    189a:	85 83       	std	Z+5, r24	; 0x05
    189c:	81 11       	cpse	r24, r1
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <bus_read+0x6a>
    18a0:	8e 2d       	mov	r24, r14
    18a2:	9f 2d       	mov	r25, r15
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <bus_read+0x6e>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	2b 96       	adiw	r28, 0x0b	; 11
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <bus_write>:
 * \return The number of Bytes written, which may be less than the
 *         requested number of Bytes in the event of an error.
 */
size_t twi_bus_write(bus_desc_t *bus, uint8_t addr, const void *data,
		size_t count)
{
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	2b 97       	sbiw	r28, 0x0b	; 11
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	8c 01       	movw	r16, r24
    18d6:	e2 2e       	mov	r14, r18
    18d8:	f3 2e       	mov	r15, r19
	twi_package_t const pkg = {
    18da:	fe 01       	movw	r30, r28
    18dc:	31 96       	adiw	r30, 0x01	; 1
    18de:	8b e0       	ldi	r24, 0x0B	; 11
    18e0:	df 01       	movw	r26, r30
    18e2:	1d 92       	st	X+, r1
    18e4:	8a 95       	dec	r24
    18e6:	e9 f7       	brne	.-6      	; 0x18e2 <bus_write+0x24>
    18e8:	d8 01       	movw	r26, r16
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	8c 91       	ld	r24, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	6a 83       	std	Y+2, r22	; 0x02
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	4f 83       	std	Y+7, r20	; 0x07
    18fe:	58 87       	std	Y+8, r21	; 0x08
    1900:	29 87       	std	Y+9, r18	; 0x09
    1902:	3a 87       	std	Y+10, r19	; 0x0a
    1904:	16 96       	adiw	r26, 0x06	; 6
    1906:	8c 91       	ld	r24, X
    1908:	16 97       	sbiw	r26, 0x06	; 6
    190a:	8b 87       	std	Y+11, r24	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	bf 01       	movw	r22, r30
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	8d 91       	ld	r24, X+
    1914:	9c 91       	ld	r25, X
    1916:	12 97       	sbiw	r26, 0x02	; 2
    1918:	b3 d3       	rcall	.+1894   	; 0x2080 <twi_master_transfer>
		.buffer      = (void *)data,
		.length      = count,
		.no_wait     = bus->no_wait
	};

	bus->status = twi_master_write((twi_master_t)(bus->id), &pkg);
    191a:	f8 01       	movw	r30, r16
    191c:	85 83       	std	Z+5, r24	; 0x05
	return (STATUS_OK == bus->status) ? count : 0;
    191e:	81 11       	cpse	r24, r1
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <bus_write+0x6a>
    1922:	8e 2d       	mov	r24, r14
    1924:	9f 2d       	mov	r25, r15
    1926:	02 c0       	rjmp	.+4      	; 0x192c <bus_write+0x6e>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
}
    192c:	2b 96       	adiw	r28, 0x0b	; 11
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	08 95       	ret

00001940 <nvram_write>:
 * \param   count   the number of Bytes to write
 *
 * \return  Nothing.
 */
void nvram_write(nvram_addr_t dst, const void *src, size_t count)
{
    1940:	0f 93       	push	r16
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	dc 01       	movw	r26, r24
    1948:	eb 01       	movw	r28, r22
    194a:	9a 01       	movw	r18, r20
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    194c:	e0 ec       	ldi	r30, 0xC0	; 192
    194e:	f1 e0       	ldi	r31, 0x01	; 1
    1950:	97 85       	ldd	r25, Z+15	; 0x0f
    1952:	99 23       	and	r25, r25
    1954:	ec f3       	brlt	.-6      	; 0x1950 <nvram_write+0x10>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_write_buffer((flash_addr_t)(dst + SENSOR_NVM_OFFSET),
    1956:	bd 01       	movw	r22, r26
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	01 e0       	ldi	r16, 0x01	; 1
    195e:	ae 01       	movw	r20, r28
    1960:	6c d1       	rcall	.+728    	; 0x1c3a <nvm_user_sig_write_buffer>

	sysclk_enable_pbb_module(SYSCLK_FLASH_REGS);
	(void)flash_memcpy(flash_addr, src, count, erase_page);
	sysclk_disable_pbb_module(SYSCLK_FLASH_REGS);
#endif
}
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <nvram_read>:
 * \param   count   the number of Bytes to read
 *
 * \return  Nothing.
 */
void nvram_read(nvram_addr_t src, void *dst, size_t count)
{
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	dc 01       	movw	r26, r24
    1970:	eb 01       	movw	r28, r22
    1972:	9a 01       	movw	r18, r20
    1974:	e0 ec       	ldi	r30, 0xC0	; 192
    1976:	f1 e0       	ldi	r31, 0x01	; 1
    1978:	97 85       	ldd	r25, Z+15	; 0x0f
    197a:	99 23       	and	r25, r25
    197c:	ec f3       	brlt	.-6      	; 0x1978 <nvram_read+0xe>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_read_buffer((flash_addr_t)(src + SENSOR_NVM_OFFSET), dst,
    197e:	bd 01       	movw	r22, r26
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	ae 01       	movw	r20, r28
    1986:	3c d1       	rcall	.+632    	; 0x1c00 <nvm_user_sig_read_buffer>
			count);
#elif UC3
	memcpy(dst, (void *)(src + SENSOR_NVM_BASE + SENSOR_NVM_OFFSET), count);
#endif
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <__portable_avr_delay_cycles>:
	};

	*dev_count = ARRAYSIZE(sensor_dev_list);

	return sensor_dev_list;
}
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <__portable_avr_delay_cycles+0xa>
    1990:	61 50       	subi	r22, 0x01	; 1
    1992:	71 09       	sbc	r23, r1
    1994:	81 09       	sbc	r24, r1
    1996:	91 09       	sbc	r25, r1
    1998:	61 15       	cp	r22, r1
    199a:	71 05       	cpc	r23, r1
    199c:	81 05       	cpc	r24, r1
    199e:	91 05       	cpc	r25, r1
    19a0:	b9 f7       	brne	.-18     	; 0x1990 <__portable_avr_delay_cycles+0x2>
    19a2:	08 95       	ret

000019a4 <usart_serial_getchar>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	eb 01       	movw	r28, r22
    19aa:	d6 d3       	rcall	.+1964   	; 0x2158 <usart_getchar>
    19ac:	88 83       	st	Y, r24
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <usart_serial_putchar>:
    19b4:	c9 c3       	rjmp	.+1938   	; 0x2148 <usart_putchar>
    19b6:	08 95       	ret

000019b8 <sensor_timestamp>:
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	cb 01       	movw	r24, r22
    19be:	08 95       	ret

000019c0 <sensor_irq_connect>:
    19c0:	0c 94 13 02 	jmp	0x426	; 0x426 <sensor_board_irq_connect>
    19c4:	08 95       	ret

000019c6 <sensor_find>:
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    19c6:	20 91 37 20 	lds	r18, 0x2037	; 0x802037 <sensor_dev_list.6164+0x10>
    19ca:	30 91 38 20 	lds	r19, 0x2038	; 0x802038 <sensor_dev_list.6164+0x11>
    19ce:	28 23       	and	r18, r24
    19d0:	39 23       	and	r19, r25
    19d2:	82 17       	cp	r24, r18
    19d4:	93 07       	cpc	r25, r19
    19d6:	19 f0       	breq	.+6      	; 0x19de <sensor_find+0x18>
			return &dev_list [index];
		}
	}

	return 0;
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	08 95       	ret
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    19de:	87 e2       	ldi	r24, 0x27	; 39
    19e0:	90 e2       	ldi	r25, 0x20	; 32
			return &dev_list [index];
		}
	}

	return 0;
}
    19e2:	08 95       	ret

000019e4 <sensor_platform_init>:
 * hardware abstraction layer (HAL) for the Xplained Sensor API.
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_platform_init(void)
{
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	27 97       	sbiw	r28, 0x07	; 7
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	de bf       	out	0x3e, r29	; 62
	bool initialized = false;

	/* Initialize the system clock and all clocks derived from it. */

	sysclk_init();
    19f4:	0e 94 9f 02 	call	0x53e	; 0x53e <sysclk_init>
	/* Initialize the board (UC3/XMEGA Xplained & Sensor Xplained boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */

	board_init();
    19f8:	6e d0       	rcall	.+220    	; 0x1ad6 <board_init>

	/* Initialize the sensor bus I/O interface. */

	if (BUSIO_TYPE != BUS_TYPE_UNKNOWN) {
		initialized = sensor_bus_init(&BUSIO_IF, BUSIO_SPEED);
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5a e1       	ldi	r21, 0x1A	; 26
    19fe:	66 e0       	ldi	r22, 0x06	; 6
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	80 eb       	ldi	r24, 0xB0	; 176
    1a04:	94 e0       	ldi	r25, 0x04	; 4
    1a06:	85 dd       	rcall	.-1270   	; 0x1512 <bus_init>
    1a08:	18 2f       	mov	r17, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1a0a:	80 ea       	ldi	r24, 0xA0	; 160
    1a0c:	98 e0       	ldi	r25, 0x08	; 8
    1a0e:	80 93 15 22 	sts	0x2215, r24	; 0x802215 <stdio_base>
    1a12:	90 93 16 22 	sts	0x2216, r25	; 0x802216 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1a16:	8a ed       	ldi	r24, 0xDA	; 218
    1a18:	9c e0       	ldi	r25, 0x0C	; 12
    1a1a:	80 93 13 22 	sts	0x2213, r24	; 0x802213 <ptr_put>
    1a1e:	90 93 14 22 	sts	0x2214, r25	; 0x802214 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1a22:	82 ed       	ldi	r24, 0xD2	; 210
    1a24:	9c e0       	ldi	r25, 0x0C	; 12
    1a26:	80 93 11 22 	sts	0x2211, r24	; 0x802211 <ptr_get>
    1a2a:	90 93 12 22 	sts	0x2212, r25	; 0x802212 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1a32:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1a34:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	92 ec       	ldi	r25, 0xC2	; 194
    1a3a:	a1 e0       	ldi	r26, 0x01	; 1
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	ab 83       	std	Y+3, r26	; 0x03
    1a44:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1a46:	60 e1       	ldi	r22, 0x10	; 16
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1a4e:	be 01       	movw	r22, r28
    1a50:	6f 5f       	subi	r22, 0xFF	; 255
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	80 ea       	ldi	r24, 0xA0	; 160
    1a56:	98 e0       	ldi	r25, 0x08	; 8
    1a58:	94 d4       	rcall	.+2344   	; 0x2382 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1a5a:	60 e4       	ldi	r22, 0x40	; 64
    1a5c:	7d e0       	ldi	r23, 0x0D	; 13
    1a5e:	89 e5       	ldi	r24, 0x59	; 89
    1a60:	9d e0       	ldi	r25, 0x0D	; 13
    1a62:	0e 94 24 19 	call	0x3248	; 0x3248 <fdevopen>
	/* Sensor devices typically require time to settle after power
	 * is applied.  Wait here for a standard time.  (Individual sensor
	 * drivers may need to wait an additional period during initialization
	 * if the device is particularly slow to settle.)
	 */
	delay_ms(SENSOR_START_DELAY_MSEC);
    1a66:	6b ea       	ldi	r22, 0xAB	; 171
    1a68:	71 e1       	ldi	r23, 0x11	; 17
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	8f df       	rcall	.-226    	; 0x198e <__portable_avr_delay_cycles>

	return initialized;
}
    1a70:	81 2f       	mov	r24, r17
    1a72:	27 96       	adiw	r28, 0x07	; 7
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	08 95       	ret

00001a80 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	1f 92       	push	r1
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    1a8a:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <stdio_base>
    1a8e:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <stdio_base+0x1>
    1a92:	e0 91 11 22 	lds	r30, 0x2211	; 0x802211 <ptr_get>
    1a96:	f0 91 12 22 	lds	r31, 0x2212	; 0x802212 <ptr_get+0x1>
    1a9a:	be 01       	movw	r22, r28
    1a9c:	6f 5f       	subi	r22, 0xFF	; 255
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	19 95       	eicall
	return c;
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa4:	08 2e       	mov	r0, r24
    1aa6:	00 0c       	add	r0, r0
    1aa8:	99 0b       	sbc	r25, r25
    1aaa:	0f 90       	pop	r0
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1ab2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1ab4:	80 91 15 22 	lds	r24, 0x2215	; 0x802215 <stdio_base>
    1ab8:	90 91 16 22 	lds	r25, 0x2216	; 0x802216 <stdio_base+0x1>
    1abc:	e0 91 13 22 	lds	r30, 0x2213	; 0x802213 <ptr_put>
    1ac0:	f0 91 14 22 	lds	r31, 0x2214	; 0x802214 <ptr_put+0x1>
    1ac4:	19 95       	eicall
    1ac6:	99 23       	and	r25, r25
    1ac8:	1c f0       	brlt	.+6      	; 0x1ad0 <_write+0x1e>
		return -1;
	}
	return 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    1ad4:	08 95       	ret

00001ad6 <board_init>:
    1ad6:	43 e0       	ldi	r20, 0x03	; 3
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	80 e8       	ldi	r24, 0x80	; 128
    1ade:	96 e0       	ldi	r25, 0x06	; 6
    1ae0:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1ae4:	43 e0       	ldi	r20, 0x03	; 3
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	80 e8       	ldi	r24, 0x80	; 128
    1aec:	96 e0       	ldi	r25, 0x06	; 6
    1aee:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1af2:	43 e0       	ldi	r20, 0x03	; 3
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	64 e0       	ldi	r22, 0x04	; 4
    1af8:	80 e8       	ldi	r24, 0x80	; 128
    1afa:	96 e0       	ldi	r25, 0x06	; 6
    1afc:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b00:	43 e0       	ldi	r20, 0x03	; 3
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	68 e0       	ldi	r22, 0x08	; 8
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	96 e0       	ldi	r25, 0x06	; 6
    1b0a:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b0e:	43 e0       	ldi	r20, 0x03	; 3
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	60 e1       	ldi	r22, 0x10	; 16
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	96 e0       	ldi	r25, 0x06	; 6
    1b18:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b1c:	43 e0       	ldi	r20, 0x03	; 3
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	60 e2       	ldi	r22, 0x20	; 32
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	96 e0       	ldi	r25, 0x06	; 6
    1b26:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b2a:	43 e0       	ldi	r20, 0x03	; 3
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	60 e4       	ldi	r22, 0x40	; 64
    1b30:	80 e8       	ldi	r24, 0x80	; 128
    1b32:	96 e0       	ldi	r25, 0x06	; 6
    1b34:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b38:	43 e0       	ldi	r20, 0x03	; 3
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	60 e8       	ldi	r22, 0x80	; 128
    1b3e:	80 e8       	ldi	r24, 0x80	; 128
    1b40:	96 e0       	ldi	r25, 0x06	; 6
    1b42:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	58 e1       	ldi	r21, 0x18	; 24
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	80 e6       	ldi	r24, 0x60	; 96
    1b4e:	96 e0       	ldi	r25, 0x06	; 6
    1b50:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	58 e1       	ldi	r21, 0x18	; 24
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	80 e6       	ldi	r24, 0x60	; 96
    1b5c:	96 e0       	ldi	r25, 0x06	; 6
    1b5e:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	58 e1       	ldi	r21, 0x18	; 24
    1b66:	64 e0       	ldi	r22, 0x04	; 4
    1b68:	80 e6       	ldi	r24, 0x60	; 96
    1b6a:	96 e0       	ldi	r25, 0x06	; 6
    1b6c:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	58 e1       	ldi	r21, 0x18	; 24
    1b74:	68 e0       	ldi	r22, 0x08	; 8
    1b76:	80 e6       	ldi	r24, 0x60	; 96
    1b78:	96 e0       	ldi	r25, 0x06	; 6
    1b7a:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	58 e1       	ldi	r21, 0x18	; 24
    1b82:	60 e1       	ldi	r22, 0x10	; 16
    1b84:	80 e6       	ldi	r24, 0x60	; 96
    1b86:	96 e0       	ldi	r25, 0x06	; 6
    1b88:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	58 e1       	ldi	r21, 0x18	; 24
    1b90:	60 e2       	ldi	r22, 0x20	; 32
    1b92:	80 e6       	ldi	r24, 0x60	; 96
    1b94:	96 e0       	ldi	r25, 0x06	; 6
    1b96:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	58 e1       	ldi	r21, 0x18	; 24
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	80 ee       	ldi	r24, 0xE0	; 224
    1ba2:	97 e0       	ldi	r25, 0x07	; 7
    1ba4:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	58 e1       	ldi	r21, 0x18	; 24
    1bac:	62 e0       	ldi	r22, 0x02	; 2
    1bae:	80 ee       	ldi	r24, 0xE0	; 224
    1bb0:	97 e0       	ldi	r25, 0x07	; 7
    1bb2:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1bb6:	43 e0       	ldi	r20, 0x03	; 3
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	68 e0       	ldi	r22, 0x08	; 8
    1bbc:	80 e4       	ldi	r24, 0x40	; 64
    1bbe:	96 e0       	ldi	r25, 0x06	; 6
    1bc0:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	64 e0       	ldi	r22, 0x04	; 4
    1bca:	80 e4       	ldi	r24, 0x40	; 64
    1bcc:	96 e0       	ldi	r25, 0x06	; 6
    1bce:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1bd2:	43 e0       	ldi	r20, 0x03	; 3
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	68 e0       	ldi	r22, 0x08	; 8
    1bd8:	80 e6       	ldi	r24, 0x60	; 96
    1bda:	96 e0       	ldi	r25, 0x06	; 6
    1bdc:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	64 e0       	ldi	r22, 0x04	; 4
    1be6:	80 e6       	ldi	r24, 0x60	; 96
    1be8:	96 e0       	ldi	r25, 0x06	; 6
    1bea:	0e 94 07 03 	call	0x60e	; 0x60e <ioport_configure_port_pin>
#if defined (SENSORS_XPLAINED_BOARD)
	/* Configure the Xplained Sensor extension board, if any, after
	 * the platform Xplained board has configured basic clock settings,
	 * GPIO pin mapping, interrupt controller options, etc.
	 */
	sensor_board_init ();
    1bee:	0c 94 93 02 	jmp	0x526	; 0x526 <sensor_board_init>
    1bf2:	08 95       	ret

00001bf4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1bf4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1bf6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1bf8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1bfa:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1bfc:	60 83       	st	Z, r22
	ret                             // Return to caller
    1bfe:	08 95       	ret

00001c00 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	7a 01       	movw	r14, r20
    1c0e:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    1c10:	eb 01       	movw	r28, r22
    1c12:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    1c14:	23 2b       	or	r18, r19
    1c16:	51 f0       	breq	.+20     	; 0x1c2c <nvm_user_sig_read_buffer+0x2c>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    1c18:	be 01       	movw	r22, r28
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	b3 d0       	rcall	.+358    	; 0x1d84 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    1c1e:	f7 01       	movw	r30, r14
    1c20:	81 93       	st	Z+, r24
    1c22:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    1c24:	21 96       	adiw	r28, 0x01	; 1
		len--;
    1c26:	01 50       	subi	r16, 0x01	; 1
    1c28:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    1c2a:	b1 f7       	brne	.-20     	; 0x1c18 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	08 95       	ret

00001c3a <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    1c3a:	2f 92       	push	r2
    1c3c:	3f 92       	push	r3
    1c3e:	4f 92       	push	r4
    1c40:	5f 92       	push	r5
    1c42:	6f 92       	push	r6
    1c44:	7f 92       	push	r7
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <nvm_user_sig_write_buffer+0x26>
    1c60:	1f 92       	push	r1
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	4b 83       	std	Y+3, r20	; 0x03
    1c68:	5c 83       	std	Y+4, r21	; 0x04
    1c6a:	79 01       	movw	r14, r18
    1c6c:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    1c6e:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    1c70:	23 2b       	or	r18, r19
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <nvm_user_sig_write_buffer+0x3c>
    1c74:	4f c0       	rjmp	.+158    	; 0x1d14 <nvm_user_sig_write_buffer+0xda>
    1c76:	65 c0       	rjmp	.+202    	; 0x1d42 <nvm_user_sig_write_buffer+0x108>
    1c78:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    1c7a:	33 20       	and	r3, r3
    1c7c:	79 f0       	breq	.+30     	; 0x1c9c <nvm_user_sig_write_buffer+0x62>
    1c7e:	b2 01       	movw	r22, r4
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 d0       	rcall	.+256    	; 0x1d84 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	b8 01       	movw	r22, r16
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	7c d0       	rcall	.+248    	; 0x1d84 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	01 96       	adiw	r24, 0x01	; 1
    1c94:	29 f0       	breq	.+10     	; 0x1ca0 <nvm_user_sig_write_buffer+0x66>
					b_flag_erase = true; // The page is not empty
    1c96:	22 24       	eor	r2, r2
    1c98:	23 94       	inc	r2
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <nvm_user_sig_write_buffer+0x66>
				}
			}else{
				w_value = 0xFFFF;
    1c9c:	89 82       	std	Y+1, r8	; 0x01
    1c9e:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    1ca0:	e1 14       	cp	r14, r1
    1ca2:	f1 04       	cpc	r15, r1
    1ca4:	09 f1       	breq	.+66     	; 0x1ce8 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == page_pos) {
    1ca6:	ac 14       	cp	r10, r12
    1ca8:	bd 04       	cpc	r11, r13
    1caa:	79 f4       	brne	.+30     	; 0x1cca <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	e8 1a       	sub	r14, r24
    1cb0:	f1 08       	sbc	r15, r1
					opt_address++;
    1cb2:	ef ef       	ldi	r30, 0xFF	; 255
    1cb4:	ce 1a       	sub	r12, r30
    1cb6:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    1cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cba:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbc:	81 91       	ld	r24, Z+
    1cbe:	eb 83       	std	Y+3, r30	; 0x03
    1cc0:	fc 83       	std	Y+4, r31	; 0x04
    1cc2:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    1cc4:	e1 14       	cp	r14, r1
    1cc6:	f1 04       	cpc	r15, r1
    1cc8:	79 f0       	breq	.+30     	; 0x1ce8 <nvm_user_sig_write_buffer+0xae>
				if (opt_address == (page_pos+1)) {
    1cca:	c0 16       	cp	r12, r16
    1ccc:	d1 06       	cpc	r13, r17
    1cce:	61 f4       	brne	.+24     	; 0x1ce8 <nvm_user_sig_write_buffer+0xae>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    1cd0:	f1 e0       	ldi	r31, 0x01	; 1
    1cd2:	ef 1a       	sub	r14, r31
    1cd4:	f1 08       	sbc	r15, r1
					opt_address++;
    1cd6:	2f ef       	ldi	r18, 0xFF	; 255
    1cd8:	c2 1a       	sub	r12, r18
    1cda:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    1cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cde:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	eb 83       	std	Y+3, r30	; 0x03
    1ce4:	fc 83       	std	Y+4, r31	; 0x04
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    1ce8:	49 81       	ldd	r20, Y+1	; 0x01
    1cea:	5a 81       	ldd	r21, Y+2	; 0x02
    1cec:	c3 01       	movw	r24, r6
    1cee:	b2 01       	movw	r22, r4
    1cf0:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
    1cf4:	f2 e0       	ldi	r31, 0x02	; 2
    1cf6:	4f 0e       	add	r4, r31
    1cf8:	51 1c       	adc	r5, r1
    1cfa:	61 1c       	adc	r6, r1
    1cfc:	71 1c       	adc	r7, r1
    1cfe:	0e 5f       	subi	r16, 0xFE	; 254
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    1d02:	01 30       	cpi	r16, 0x01	; 1
    1d04:	22 e0       	ldi	r18, 0x02	; 2
    1d06:	12 07       	cpc	r17, r18
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <nvm_user_sig_write_buffer+0xd2>
    1d0a:	b6 cf       	rjmp	.-148    	; 0x1c78 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    1d0c:	e1 14       	cp	r14, r1
    1d0e:	f1 04       	cpc	r15, r1
    1d10:	29 f4       	brne	.+10     	; 0x1d1c <nvm_user_sig_write_buffer+0xe2>
    1d12:	0a c0       	rjmp	.+20     	; 0x1d28 <nvm_user_sig_write_buffer+0xee>
    1d14:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    1d16:	88 24       	eor	r8, r8
    1d18:	8a 94       	dec	r8
    1d1a:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    1d1c:	01 e0       	ldi	r16, 0x01	; 1
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	41 2c       	mov	r4, r1
    1d22:	51 2c       	mov	r5, r1
    1d24:	32 01       	movw	r6, r4
    1d26:	a8 cf       	rjmp	.-176    	; 0x1c78 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    1d28:	22 20       	and	r2, r2
    1d2a:	59 f0       	breq	.+22     	; 0x1d42 <nvm_user_sig_write_buffer+0x108>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1d2c:	e0 ec       	ldi	r30, 0xC0	; 192
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	87 85       	ldd	r24, Z+15	; 0x0f
    1d32:	88 23       	and	r24, r24
    1d34:	ec f3       	brlt	.-6      	; 0x1d30 <nvm_user_sig_write_buffer+0xf6>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    1d36:	48 e1       	ldi	r20, 0x18	; 24
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1d42:	e0 ec       	ldi	r30, 0xC0	; 192
    1d44:	f1 e0       	ldi	r31, 0x01	; 1
    1d46:	87 85       	ldd	r24, Z+15	; 0x0f
    1d48:	88 23       	and	r24, r24
    1d4a:	ec f3       	brlt	.-6      	; 0x1d46 <nvm_user_sig_write_buffer+0x10c>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    1d4c:	4a e1       	ldi	r20, 0x1A	; 26
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	cb 01       	movw	r24, r22
    1d54:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    1d58:	24 96       	adiw	r28, 0x04	; 4
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	3f 90       	pop	r3
    1d80:	2f 90       	pop	r2
    1d82:	08 95       	ret

00001d84 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1d84:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1d88:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1d8a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1d8c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1d90:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1d92:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1d96:	08 95       	ret

00001d98 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1d9c:	e0 91 06 22 	lds	r30, 0x2206	; 0x802206 <transfer>
    1da0:	f0 91 07 22 	lds	r31, 0x2207	; 0x802207 <transfer+0x1>
    1da4:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1da6:	83 ff       	sbrs	r24, 3
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1daa:	88 60       	ori	r24, 0x08	; 8
    1dac:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1db2:	86 ef       	ldi	r24, 0xF6	; 246
    1db4:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <transfer+0xa>
    1db8:	83 c0       	rjmp	.+262    	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1dba:	98 2f       	mov	r25, r24
    1dbc:	94 71       	andi	r25, 0x14	; 20
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <transfer+0xa>
    1dca:	7a c0       	rjmp	.+244    	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1dcc:	86 ff       	sbrs	r24, 6
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1dd0:	c6 e0       	ldi	r28, 0x06	; 6
    1dd2:	d2 e2       	ldi	r29, 0x22	; 34
    1dd4:	aa 81       	ldd	r26, Y+2	; 0x02
    1dd6:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	9d 81       	ldd	r25, Y+5	; 0x05
    1ddc:	14 96       	adiw	r26, 0x04	; 4
    1dde:	2d 91       	ld	r18, X+
    1de0:	3c 91       	ld	r19, X
    1de2:	15 97       	sbiw	r26, 0x05	; 5
    1de4:	82 17       	cp	r24, r18
    1de6:	93 07       	cpc	r25, r19
    1de8:	6c f4       	brge	.+26     	; 0x1e04 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1dea:	9c 01       	movw	r18, r24
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	20 93 0a 22 	sts	0x220A, r18	; 0x80220a <transfer+0x4>
    1df4:	30 93 0b 22 	sts	0x220B, r19	; 0x80220b <transfer+0x5>
    1df8:	a8 0f       	add	r26, r24
    1dfa:	b9 1f       	adc	r27, r25
    1dfc:	11 96       	adiw	r26, 0x01	; 1
    1dfe:	8c 91       	ld	r24, X
    1e00:	87 83       	std	Z+7, r24	; 0x07
    1e02:	5e c0       	rjmp	.+188    	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1e04:	80 91 0c 22 	lds	r24, 0x220C	; 0x80220c <transfer+0x6>
    1e08:	90 91 0d 22 	lds	r25, 0x220D	; 0x80220d <transfer+0x7>
    1e0c:	18 96       	adiw	r26, 0x08	; 8
    1e0e:	2d 91       	ld	r18, X+
    1e10:	3c 91       	ld	r19, X
    1e12:	19 97       	sbiw	r26, 0x09	; 9
    1e14:	82 17       	cp	r24, r18
    1e16:	93 07       	cpc	r25, r19
    1e18:	c8 f4       	brcc	.+50     	; 0x1e4c <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1e1a:	20 91 0e 22 	lds	r18, 0x220E	; 0x80220e <transfer+0x8>
    1e1e:	22 23       	and	r18, r18
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1e22:	86 81       	ldd	r24, Z+6	; 0x06
    1e24:	81 60       	ori	r24, 0x01	; 1
    1e26:	86 83       	std	Z+6, r24	; 0x06
    1e28:	4b c0       	rjmp	.+150    	; 0x1ec0 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1e2a:	16 96       	adiw	r26, 0x06	; 6
    1e2c:	2d 91       	ld	r18, X+
    1e2e:	3c 91       	ld	r19, X
    1e30:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1e32:	ac 01       	movw	r20, r24
    1e34:	4f 5f       	subi	r20, 0xFF	; 255
    1e36:	5f 4f       	sbci	r21, 0xFF	; 255
    1e38:	40 93 0c 22 	sts	0x220C, r20	; 0x80220c <transfer+0x6>
    1e3c:	50 93 0d 22 	sts	0x220D, r21	; 0x80220d <transfer+0x7>
    1e40:	d9 01       	movw	r26, r18
    1e42:	a8 0f       	add	r26, r24
    1e44:	b9 1f       	adc	r27, r25
    1e46:	8c 91       	ld	r24, X
    1e48:	87 83       	std	Z+7, r24	; 0x07
    1e4a:	3a c0       	rjmp	.+116    	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1e50:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <transfer+0xa>
    1e54:	35 c0       	rjmp	.+106    	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1e56:	88 23       	and	r24, r24
    1e58:	84 f5       	brge	.+96     	; 0x1eba <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1e5a:	a6 e0       	ldi	r26, 0x06	; 6
    1e5c:	b2 e2       	ldi	r27, 0x22	; 34
    1e5e:	12 96       	adiw	r26, 0x02	; 2
    1e60:	cd 91       	ld	r28, X+
    1e62:	dc 91       	ld	r29, X
    1e64:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1e66:	16 96       	adiw	r26, 0x06	; 6
    1e68:	8d 91       	ld	r24, X+
    1e6a:	9c 91       	ld	r25, X
    1e6c:	17 97       	sbiw	r26, 0x07	; 7
    1e6e:	28 85       	ldd	r18, Y+8	; 0x08
    1e70:	39 85       	ldd	r19, Y+9	; 0x09
    1e72:	82 17       	cp	r24, r18
    1e74:	93 07       	cpc	r25, r19
    1e76:	d8 f4       	brcc	.+54     	; 0x1eae <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1e78:	6e 81       	ldd	r22, Y+6	; 0x06
    1e7a:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	2f 5f       	subi	r18, 0xFF	; 255
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	20 93 0c 22 	sts	0x220C, r18	; 0x80220c <transfer+0x6>
    1e86:	30 93 0d 22 	sts	0x220D, r19	; 0x80220d <transfer+0x7>
    1e8a:	47 81       	ldd	r20, Z+7	; 0x07
    1e8c:	db 01       	movw	r26, r22
    1e8e:	a8 0f       	add	r26, r24
    1e90:	b9 1f       	adc	r27, r25
    1e92:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1e94:	88 85       	ldd	r24, Y+8	; 0x08
    1e96:	99 85       	ldd	r25, Y+9	; 0x09
    1e98:	28 17       	cp	r18, r24
    1e9a:	39 07       	cpc	r19, r25
    1e9c:	18 f4       	brcc	.+6      	; 0x1ea4 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	83 83       	std	Z+3, r24	; 0x03
    1ea2:	0e c0       	rjmp	.+28     	; 0x1ec0 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1ea4:	87 e0       	ldi	r24, 0x07	; 7
    1ea6:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1ea8:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <transfer+0xa>
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1eb2:	89 ef       	ldi	r24, 0xF9	; 249
    1eb4:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <transfer+0xa>
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1eba:	8b ef       	ldi	r24, 0xFB	; 251
    1ebc:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <transfer+0xa>
	}
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	08 b6       	in	r0, 0x38	; 56
    1ed2:	0f 92       	push	r0
    1ed4:	18 be       	out	0x38, r1	; 56
    1ed6:	09 b6       	in	r0, 0x39	; 57
    1ed8:	0f 92       	push	r0
    1eda:	19 be       	out	0x39, r1	; 57
    1edc:	0b b6       	in	r0, 0x3b	; 59
    1ede:	0f 92       	push	r0
    1ee0:	1b be       	out	0x3b, r1	; 59
    1ee2:	2f 93       	push	r18
    1ee4:	3f 93       	push	r19
    1ee6:	4f 93       	push	r20
    1ee8:	5f 93       	push	r21
    1eea:	6f 93       	push	r22
    1eec:	7f 93       	push	r23
    1eee:	8f 93       	push	r24
    1ef0:	9f 93       	push	r25
    1ef2:	af 93       	push	r26
    1ef4:	bf 93       	push	r27
    1ef6:	ef 93       	push	r30
    1ef8:	ff 93       	push	r31
    1efa:	4e df       	rcall	.-356    	; 0x1d98 <twim_interrupt_handler>
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0b be       	out	0x3b, r0	; 59
    1f18:	0f 90       	pop	r0
    1f1a:	09 be       	out	0x39, r0	; 57
    1f1c:	0f 90       	pop	r0
    1f1e:	08 be       	out	0x38, r0	; 56
    1f20:	0f 90       	pop	r0
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	0f 90       	pop	r0
    1f26:	1f 90       	pop	r1
    1f28:	18 95       	reti

00001f2a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	08 b6       	in	r0, 0x38	; 56
    1f36:	0f 92       	push	r0
    1f38:	18 be       	out	0x38, r1	; 56
    1f3a:	09 b6       	in	r0, 0x39	; 57
    1f3c:	0f 92       	push	r0
    1f3e:	19 be       	out	0x39, r1	; 57
    1f40:	0b b6       	in	r0, 0x3b	; 59
    1f42:	0f 92       	push	r0
    1f44:	1b be       	out	0x3b, r1	; 59
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	1c df       	rcall	.-456    	; 0x1d98 <twim_interrupt_handler>
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0b be       	out	0x3b, r0	; 59
    1f7c:	0f 90       	pop	r0
    1f7e:	09 be       	out	0x39, r0	; 57
    1f80:	0f 90       	pop	r0
    1f82:	08 be       	out	0x38, r0	; 56
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1f8e:	1f 92       	push	r1
    1f90:	0f 92       	push	r0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	0f 92       	push	r0
    1f96:	11 24       	eor	r1, r1
    1f98:	08 b6       	in	r0, 0x38	; 56
    1f9a:	0f 92       	push	r0
    1f9c:	18 be       	out	0x38, r1	; 56
    1f9e:	09 b6       	in	r0, 0x39	; 57
    1fa0:	0f 92       	push	r0
    1fa2:	19 be       	out	0x39, r1	; 57
    1fa4:	0b b6       	in	r0, 0x3b	; 59
    1fa6:	0f 92       	push	r0
    1fa8:	1b be       	out	0x3b, r1	; 59
    1faa:	2f 93       	push	r18
    1fac:	3f 93       	push	r19
    1fae:	4f 93       	push	r20
    1fb0:	5f 93       	push	r21
    1fb2:	6f 93       	push	r22
    1fb4:	7f 93       	push	r23
    1fb6:	8f 93       	push	r24
    1fb8:	9f 93       	push	r25
    1fba:	af 93       	push	r26
    1fbc:	bf 93       	push	r27
    1fbe:	ef 93       	push	r30
    1fc0:	ff 93       	push	r31
    1fc2:	ea de       	rcall	.-556    	; 0x1d98 <twim_interrupt_handler>
    1fc4:	ff 91       	pop	r31
    1fc6:	ef 91       	pop	r30
    1fc8:	bf 91       	pop	r27
    1fca:	af 91       	pop	r26
    1fcc:	9f 91       	pop	r25
    1fce:	8f 91       	pop	r24
    1fd0:	7f 91       	pop	r23
    1fd2:	6f 91       	pop	r22
    1fd4:	5f 91       	pop	r21
    1fd6:	4f 91       	pop	r20
    1fd8:	3f 91       	pop	r19
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0b be       	out	0x3b, r0	; 59
    1fe0:	0f 90       	pop	r0
    1fe2:	09 be       	out	0x39, r0	; 57
    1fe4:	0f 90       	pop	r0
    1fe6:	08 be       	out	0x38, r0	; 56
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    1ff2:	1f 92       	push	r1
    1ff4:	0f 92       	push	r0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	0f 92       	push	r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	08 b6       	in	r0, 0x38	; 56
    1ffe:	0f 92       	push	r0
    2000:	18 be       	out	0x38, r1	; 56
    2002:	09 b6       	in	r0, 0x39	; 57
    2004:	0f 92       	push	r0
    2006:	19 be       	out	0x39, r1	; 57
    2008:	0b b6       	in	r0, 0x3b	; 59
    200a:	0f 92       	push	r0
    200c:	1b be       	out	0x3b, r1	; 59
    200e:	2f 93       	push	r18
    2010:	3f 93       	push	r19
    2012:	4f 93       	push	r20
    2014:	5f 93       	push	r21
    2016:	6f 93       	push	r22
    2018:	7f 93       	push	r23
    201a:	8f 93       	push	r24
    201c:	9f 93       	push	r25
    201e:	af 93       	push	r26
    2020:	bf 93       	push	r27
    2022:	ef 93       	push	r30
    2024:	ff 93       	push	r31
    2026:	b8 de       	rcall	.-656    	; 0x1d98 <twim_interrupt_handler>
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	bf 91       	pop	r27
    202e:	af 91       	pop	r26
    2030:	9f 91       	pop	r25
    2032:	8f 91       	pop	r24
    2034:	7f 91       	pop	r23
    2036:	6f 91       	pop	r22
    2038:	5f 91       	pop	r21
    203a:	4f 91       	pop	r20
    203c:	3f 91       	pop	r19
    203e:	2f 91       	pop	r18
    2040:	0f 90       	pop	r0
    2042:	0b be       	out	0x3b, r0	; 59
    2044:	0f 90       	pop	r0
    2046:	09 be       	out	0x39, r0	; 57
    2048:	0f 90       	pop	r0
    204a:	08 be       	out	0x38, r0	; 56
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    2056:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    2058:	db 01       	movw	r26, r22
    205a:	14 96       	adiw	r26, 0x04	; 4
    205c:	8c 91       	ld	r24, X
    205e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2060:	88 eb       	ldi	r24, 0xB8	; 184
    2062:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    2068:	e6 e0       	ldi	r30, 0x06	; 6
    206a:	f2 e2       	ldi	r31, 0x22	; 34
    206c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    206e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    2070:	e0 ea       	ldi	r30, 0xA0	; 160
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    207a:	78 94       	sei

	return STATUS_OK;
}
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	08 95       	ret

00002080 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	1f 92       	push	r1
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9c 01       	movw	r18, r24
    208c:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    208e:	89 2b       	or	r24, r25
    2090:	09 f4       	brne	.+2      	; 0x2094 <twi_master_transfer+0x14>
    2092:	51 c0       	rjmp	.+162    	; 0x2136 <twi_master_transfer+0xb6>
    2094:	30 97       	sbiw	r30, 0x00	; 0
    2096:	09 f4       	brne	.+2      	; 0x209a <twi_master_transfer+0x1a>
    2098:	50 c0       	rjmp	.+160    	; 0x213a <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    209a:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    209c:	80 91 0f 22 	lds	r24, 0x220F	; 0x80220f <transfer+0x9>
    20a0:	88 23       	and	r24, r24
    20a2:	19 f0       	breq	.+6      	; 0x20aa <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
    20a4:	99 23       	and	r25, r25
    20a6:	f1 f3       	breq	.-4      	; 0x20a4 <twi_master_transfer+0x24>
    20a8:	4a c0       	rjmp	.+148    	; 0x213e <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20aa:	8f b7       	in	r24, 0x3f	; 63
    20ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    20ae:	f8 94       	cli
	return flags;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    20b2:	a6 e0       	ldi	r26, 0x06	; 6
    20b4:	b2 e2       	ldi	r27, 0x22	; 34
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	19 96       	adiw	r26, 0x09	; 9
    20ba:	9c 93       	st	X, r25
    20bc:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
    20be:	90 e8       	ldi	r25, 0x80	; 128
    20c0:	1a 96       	adiw	r26, 0x0a	; 10
    20c2:	9c 93       	st	X, r25
    20c4:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20c6:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    20c8:	2d 93       	st	X+, r18
    20ca:	3c 93       	st	X, r19
    20cc:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
    20ce:	12 96       	adiw	r26, 0x02	; 2
    20d0:	6d 93       	st	X+, r22
    20d2:	7c 93       	st	X, r23
    20d4:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
    20d6:	14 96       	adiw	r26, 0x04	; 4
    20d8:	1d 92       	st	X+, r1
    20da:	1c 92       	st	X, r1
    20dc:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
    20de:	16 96       	adiw	r26, 0x06	; 6
    20e0:	1d 92       	st	X+, r1
    20e2:	1c 92       	st	X, r1
    20e4:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
    20e6:	18 96       	adiw	r26, 0x08	; 8
    20e8:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
    20ea:	80 81       	ld	r24, Z
    20ec:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    20ee:	64 81       	ldd	r22, Z+4	; 0x04
    20f0:	75 81       	ldd	r23, Z+5	; 0x05
    20f2:	67 2b       	or	r22, r23
    20f4:	11 f4       	brne	.+4      	; 0x20fa <twi_master_transfer+0x7a>
    20f6:	41 11       	cpse	r20, r1
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
    20fa:	f9 01       	movw	r30, r18
    20fc:	86 83       	std	Z+6, r24	; 0x06
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	f9 01       	movw	r30, r18
    2104:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    2106:	e6 e0       	ldi	r30, 0x06	; 6
    2108:	f2 e2       	ldi	r31, 0x22	; 34
    210a:	92 85       	ldd	r25, Z+10	; 0x0a
    210c:	90 38       	cpi	r25, 0x80	; 128
    210e:	e9 f3       	breq	.-6      	; 0x210a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2110:	f9 01       	movw	r30, r18
    2112:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2114:	83 70       	andi	r24, 0x03	; 3
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	49 f0       	breq	.+18     	; 0x212c <twi_master_transfer+0xac>
    211a:	a6 e0       	ldi	r26, 0x06	; 6
    211c:	b2 e2       	ldi	r27, 0x22	; 34
    211e:	ed 91       	ld	r30, X+
    2120:	fc 91       	ld	r31, X
    2122:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    2124:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2126:	83 70       	andi	r24, 0x03	; 3
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	c9 f7       	brne	.-14     	; 0x211e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
    212c:	e6 e0       	ldi	r30, 0x06	; 6
    212e:	f2 e2       	ldi	r31, 0x22	; 34
    2130:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    2132:	11 86       	std	Z+9, r1	; 0x09
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    2136:	88 ef       	ldi	r24, 0xF8	; 248
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <twi_master_transfer+0xc0>
    213a:	88 ef       	ldi	r24, 0xF8	; 248
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    213e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    2140:	0f 90       	pop	r0
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2148:	fc 01       	movw	r30, r24
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	95 ff       	sbrs	r25, 5
    214e:	fd cf       	rjmp	.-6      	; 0x214a <usart_putchar+0x2>
    2150:	60 83       	st	Z, r22
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	08 95       	ret

00002158 <usart_getchar>:
    2158:	fc 01       	movw	r30, r24
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	99 23       	and	r25, r25
    215e:	ec f7       	brge	.-6      	; 0x215a <usart_getchar+0x2>
    2160:	80 81       	ld	r24, Z
    2162:	08 95       	ret

00002164 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2164:	4f 92       	push	r4
    2166:	5f 92       	push	r5
    2168:	6f 92       	push	r6
    216a:	7f 92       	push	r7
    216c:	8f 92       	push	r8
    216e:	9f 92       	push	r9
    2170:	af 92       	push	r10
    2172:	bf 92       	push	r11
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	7c 01       	movw	r14, r24
    2180:	4a 01       	movw	r8, r20
    2182:	5b 01       	movw	r10, r22
    2184:	28 01       	movw	r4, r16
    2186:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2188:	fc 01       	movw	r30, r24
    218a:	84 81       	ldd	r24, Z+4	; 0x04
    218c:	82 ff       	sbrs	r24, 2
    218e:	16 c0       	rjmp	.+44     	; 0x21bc <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2190:	d9 01       	movw	r26, r18
    2192:	c8 01       	movw	r24, r16
    2194:	68 94       	set
    2196:	12 f8       	bld	r1, 2
    2198:	b6 95       	lsr	r27
    219a:	a7 95       	ror	r26
    219c:	97 95       	ror	r25
    219e:	87 95       	ror	r24
    21a0:	16 94       	lsr	r1
    21a2:	d1 f7       	brne	.-12     	; 0x2198 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    21a4:	b9 01       	movw	r22, r18
    21a6:	a8 01       	movw	r20, r16
    21a8:	03 2e       	mov	r0, r19
    21aa:	36 e1       	ldi	r19, 0x16	; 22
    21ac:	76 95       	lsr	r23
    21ae:	67 95       	ror	r22
    21b0:	57 95       	ror	r21
    21b2:	47 95       	ror	r20
    21b4:	3a 95       	dec	r19
    21b6:	d1 f7       	brne	.-12     	; 0x21ac <usart_set_baudrate+0x48>
    21b8:	30 2d       	mov	r19, r0
    21ba:	15 c0       	rjmp	.+42     	; 0x21e6 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    21bc:	d9 01       	movw	r26, r18
    21be:	c8 01       	movw	r24, r16
    21c0:	68 94       	set
    21c2:	13 f8       	bld	r1, 3
    21c4:	b6 95       	lsr	r27
    21c6:	a7 95       	ror	r26
    21c8:	97 95       	ror	r25
    21ca:	87 95       	ror	r24
    21cc:	16 94       	lsr	r1
    21ce:	d1 f7       	brne	.-12     	; 0x21c4 <usart_set_baudrate+0x60>
		min_rate /= 2;
    21d0:	b9 01       	movw	r22, r18
    21d2:	a8 01       	movw	r20, r16
    21d4:	03 2e       	mov	r0, r19
    21d6:	37 e1       	ldi	r19, 0x17	; 23
    21d8:	76 95       	lsr	r23
    21da:	67 95       	ror	r22
    21dc:	57 95       	ror	r21
    21de:	47 95       	ror	r20
    21e0:	3a 95       	dec	r19
    21e2:	d1 f7       	brne	.-12     	; 0x21d8 <usart_set_baudrate+0x74>
    21e4:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    21e6:	88 15       	cp	r24, r8
    21e8:	99 05       	cpc	r25, r9
    21ea:	aa 05       	cpc	r26, r10
    21ec:	bb 05       	cpc	r27, r11
    21ee:	08 f4       	brcc	.+2      	; 0x21f2 <usart_set_baudrate+0x8e>
    21f0:	a2 c0       	rjmp	.+324    	; 0x2336 <usart_set_baudrate+0x1d2>
    21f2:	84 16       	cp	r8, r20
    21f4:	95 06       	cpc	r9, r21
    21f6:	a6 06       	cpc	r10, r22
    21f8:	b7 06       	cpc	r11, r23
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <usart_set_baudrate+0x9a>
    21fc:	9e c0       	rjmp	.+316    	; 0x233a <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    21fe:	f7 01       	movw	r30, r14
    2200:	84 81       	ldd	r24, Z+4	; 0x04
    2202:	82 fd       	sbrc	r24, 2
    2204:	04 c0       	rjmp	.+8      	; 0x220e <usart_set_baudrate+0xaa>
		baud *= 2;
    2206:	88 0c       	add	r8, r8
    2208:	99 1c       	adc	r9, r9
    220a:	aa 1c       	adc	r10, r10
    220c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    220e:	c3 01       	movw	r24, r6
    2210:	b2 01       	movw	r22, r4
    2212:	a5 01       	movw	r20, r10
    2214:	94 01       	movw	r18, r8
    2216:	f2 d6       	rcall	.+3556   	; 0x2ffc <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2218:	2f 3f       	cpi	r18, 0xFF	; 255
    221a:	31 05       	cpc	r19, r1
    221c:	41 05       	cpc	r20, r1
    221e:	51 05       	cpc	r21, r1
    2220:	08 f4       	brcc	.+2      	; 0x2224 <usart_set_baudrate+0xc0>
    2222:	8d c0       	rjmp	.+282    	; 0x233e <usart_set_baudrate+0x1da>
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e0       	ldi	r26, 0x00	; 0
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	c9 ef       	ldi	r28, 0xF9	; 249
    222e:	05 c0       	rjmp	.+10     	; 0x223a <usart_set_baudrate+0xd6>
    2230:	28 17       	cp	r18, r24
    2232:	39 07       	cpc	r19, r25
    2234:	4a 07       	cpc	r20, r26
    2236:	5b 07       	cpc	r21, r27
    2238:	58 f0       	brcs	.+22     	; 0x2250 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	aa 1f       	adc	r26, r26
    2240:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    2242:	cd 3f       	cpi	r28, 0xFD	; 253
    2244:	0c f4       	brge	.+2      	; 0x2248 <usart_set_baudrate+0xe4>
			limit |= 1;
    2246:	81 60       	ori	r24, 0x01	; 1
    2248:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    224a:	c7 30       	cpi	r28, 0x07	; 7
    224c:	89 f7       	brne	.-30     	; 0x2230 <usart_set_baudrate+0xcc>
    224e:	4d c0       	rjmp	.+154    	; 0x22ea <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2250:	cc 23       	and	r28, r28
    2252:	0c f0       	brlt	.+2      	; 0x2256 <usart_set_baudrate+0xf2>
    2254:	4a c0       	rjmp	.+148    	; 0x22ea <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2256:	d5 01       	movw	r26, r10
    2258:	c4 01       	movw	r24, r8
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	aa 1f       	adc	r26, r26
    2260:	bb 1f       	adc	r27, r27
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	aa 1f       	adc	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	aa 1f       	adc	r26, r26
    2270:	bb 1f       	adc	r27, r27
    2272:	48 1a       	sub	r4, r24
    2274:	59 0a       	sbc	r5, r25
    2276:	6a 0a       	sbc	r6, r26
    2278:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    227a:	ce 3f       	cpi	r28, 0xFE	; 254
    227c:	ec f4       	brge	.+58     	; 0x22b8 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    227e:	8d ef       	ldi	r24, 0xFD	; 253
    2280:	9f ef       	ldi	r25, 0xFF	; 255
    2282:	8c 1b       	sub	r24, r28
    2284:	91 09       	sbc	r25, r1
    2286:	c7 fd       	sbrc	r28, 7
    2288:	93 95       	inc	r25
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <usart_set_baudrate+0x130>
    228c:	44 0c       	add	r4, r4
    228e:	55 1c       	adc	r5, r5
    2290:	66 1c       	adc	r6, r6
    2292:	77 1c       	adc	r7, r7
    2294:	8a 95       	dec	r24
    2296:	d2 f7       	brpl	.-12     	; 0x228c <usart_set_baudrate+0x128>
    2298:	d5 01       	movw	r26, r10
    229a:	c4 01       	movw	r24, r8
    229c:	b6 95       	lsr	r27
    229e:	a7 95       	ror	r26
    22a0:	97 95       	ror	r25
    22a2:	87 95       	ror	r24
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	64 0d       	add	r22, r4
    22aa:	75 1d       	adc	r23, r5
    22ac:	86 1d       	adc	r24, r6
    22ae:	97 1d       	adc	r25, r7
    22b0:	a5 01       	movw	r20, r10
    22b2:	94 01       	movw	r18, r8
    22b4:	a3 d6       	rcall	.+3398   	; 0x2ffc <__udivmodsi4>
    22b6:	35 c0       	rjmp	.+106    	; 0x2322 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	8c 0f       	add	r24, r28
    22bc:	a5 01       	movw	r20, r10
    22be:	94 01       	movw	r18, r8
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <usart_set_baudrate+0x166>
    22c2:	22 0f       	add	r18, r18
    22c4:	33 1f       	adc	r19, r19
    22c6:	44 1f       	adc	r20, r20
    22c8:	55 1f       	adc	r21, r21
    22ca:	8a 95       	dec	r24
    22cc:	d2 f7       	brpl	.-12     	; 0x22c2 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    22ce:	da 01       	movw	r26, r20
    22d0:	c9 01       	movw	r24, r18
    22d2:	b6 95       	lsr	r27
    22d4:	a7 95       	ror	r26
    22d6:	97 95       	ror	r25
    22d8:	87 95       	ror	r24
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	64 0d       	add	r22, r4
    22e0:	75 1d       	adc	r23, r5
    22e2:	86 1d       	adc	r24, r6
    22e4:	97 1d       	adc	r25, r7
    22e6:	8a d6       	rcall	.+3348   	; 0x2ffc <__udivmodsi4>
    22e8:	1c c0       	rjmp	.+56     	; 0x2322 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	8c 0f       	add	r24, r28
    22ee:	a5 01       	movw	r20, r10
    22f0:	94 01       	movw	r18, r8
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <usart_set_baudrate+0x198>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	8a 95       	dec	r24
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    2300:	da 01       	movw	r26, r20
    2302:	c9 01       	movw	r24, r18
    2304:	b6 95       	lsr	r27
    2306:	a7 95       	ror	r26
    2308:	97 95       	ror	r25
    230a:	87 95       	ror	r24
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	64 0d       	add	r22, r4
    2312:	75 1d       	adc	r23, r5
    2314:	86 1d       	adc	r24, r6
    2316:	97 1d       	adc	r25, r7
    2318:	71 d6       	rcall	.+3298   	; 0x2ffc <__udivmodsi4>
    231a:	21 50       	subi	r18, 0x01	; 1
    231c:	31 09       	sbc	r19, r1
    231e:	41 09       	sbc	r20, r1
    2320:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2322:	83 2f       	mov	r24, r19
    2324:	8f 70       	andi	r24, 0x0F	; 15
    2326:	c2 95       	swap	r28
    2328:	c0 7f       	andi	r28, 0xF0	; 240
    232a:	c8 2b       	or	r28, r24
    232c:	f7 01       	movw	r30, r14
    232e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    2330:	26 83       	std	Z+6, r18	; 0x06

	return true;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	18 c0       	rjmp	.+48     	; 0x2366 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	16 c0       	rjmp	.+44     	; 0x2366 <usart_set_baudrate+0x202>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    233e:	d5 01       	movw	r26, r10
    2340:	c4 01       	movw	r24, r8
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	aa 1f       	adc	r26, r26
    2348:	bb 1f       	adc	r27, r27
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	aa 1f       	adc	r26, r26
    2350:	bb 1f       	adc	r27, r27
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	aa 1f       	adc	r26, r26
    2358:	bb 1f       	adc	r27, r27
    235a:	48 1a       	sub	r4, r24
    235c:	59 0a       	sbc	r5, r25
    235e:	6a 0a       	sbc	r6, r26
    2360:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2362:	c9 ef       	ldi	r28, 0xF9	; 249
    2364:	8c cf       	rjmp	.-232    	; 0x227e <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	bf 90       	pop	r11
    2372:	af 90       	pop	r10
    2374:	9f 90       	pop	r9
    2376:	8f 90       	pop	r8
    2378:	7f 90       	pop	r7
    237a:	6f 90       	pop	r6
    237c:	5f 90       	pop	r5
    237e:	4f 90       	pop	r4
    2380:	08 95       	ret

00002382 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
    238c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	09 f4       	brne	.+2      	; 0x2394 <usart_init_rs232+0x12>
    2392:	5d c1       	rjmp	.+698    	; 0x264e <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2394:	80 3c       	cpi	r24, 0xC0	; 192
    2396:	91 05       	cpc	r25, r1
    2398:	29 f4       	brne	.+10     	; 0x23a4 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    239a:	60 e1       	ldi	r22, 0x10	; 16
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23a2:	55 c1       	rjmp	.+682    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    23a4:	c0 34       	cpi	r28, 0x40	; 64
    23a6:	84 e0       	ldi	r24, 0x04	; 4
    23a8:	d8 07       	cpc	r29, r24
    23aa:	29 f4       	brne	.+10     	; 0x23b6 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    23ac:	68 e0       	ldi	r22, 0x08	; 8
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23b4:	4c c1       	rjmp	.+664    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    23b6:	c1 15       	cp	r28, r1
    23b8:	e4 e0       	ldi	r30, 0x04	; 4
    23ba:	de 07       	cpc	r29, r30
    23bc:	29 f4       	brne	.+10     	; 0x23c8 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    23be:	64 e0       	ldi	r22, 0x04	; 4
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23c6:	43 c1       	rjmp	.+646    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    23c8:	c0 38       	cpi	r28, 0x80	; 128
    23ca:	f1 e0       	ldi	r31, 0x01	; 1
    23cc:	df 07       	cpc	r29, r31
    23ce:	29 f4       	brne	.+10     	; 0x23da <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23d8:	3a c1       	rjmp	.+628    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    23da:	c1 15       	cp	r28, r1
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	d8 07       	cpc	r29, r24
    23e0:	29 f4       	brne	.+10     	; 0x23ec <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23ea:	31 c1       	rjmp	.+610    	; 0x264e <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    23ec:	c0 38       	cpi	r28, 0x80	; 128
    23ee:	e3 e0       	ldi	r30, 0x03	; 3
    23f0:	de 07       	cpc	r29, r30
    23f2:	29 f4       	brne	.+10     	; 0x23fe <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    23fc:	28 c1       	rjmp	.+592    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    23fe:	c0 39       	cpi	r28, 0x90	; 144
    2400:	f3 e0       	ldi	r31, 0x03	; 3
    2402:	df 07       	cpc	r29, r31
    2404:	29 f4       	brne	.+10     	; 0x2410 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2406:	61 e0       	ldi	r22, 0x01	; 1
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    240e:	1f c1       	rjmp	.+574    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2410:	c1 15       	cp	r28, r1
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	d8 07       	cpc	r29, r24
    2416:	29 f4       	brne	.+10     	; 0x2422 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2420:	16 c1       	rjmp	.+556    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2422:	c0 34       	cpi	r28, 0x40	; 64
    2424:	e2 e0       	ldi	r30, 0x02	; 2
    2426:	de 07       	cpc	r29, r30
    2428:	29 f4       	brne	.+10     	; 0x2434 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2432:	0d c1       	rjmp	.+538    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2434:	c1 15       	cp	r28, r1
    2436:	f3 e0       	ldi	r31, 0x03	; 3
    2438:	df 07       	cpc	r29, r31
    243a:	29 f4       	brne	.+10     	; 0x2446 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2444:	04 c1       	rjmp	.+520    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2446:	c0 32       	cpi	r28, 0x20	; 32
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	d8 07       	cpc	r29, r24
    244c:	29 f4       	brne	.+10     	; 0x2458 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    244e:	64 e0       	ldi	r22, 0x04	; 4
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2456:	fb c0       	rjmp	.+502    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2458:	c1 15       	cp	r28, r1
    245a:	e8 e0       	ldi	r30, 0x08	; 8
    245c:	de 07       	cpc	r29, r30
    245e:	29 f4       	brne	.+10     	; 0x246a <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2468:	f2 c0       	rjmp	.+484    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    246a:	c1 15       	cp	r28, r1
    246c:	f9 e0       	ldi	r31, 0x09	; 9
    246e:	df 07       	cpc	r29, r31
    2470:	29 f4       	brne	.+10     	; 0x247c <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	84 e0       	ldi	r24, 0x04	; 4
    2476:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    247a:	e9 c0       	rjmp	.+466    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    247c:	c1 15       	cp	r28, r1
    247e:	8a e0       	ldi	r24, 0x0A	; 10
    2480:	d8 07       	cpc	r29, r24
    2482:	29 f4       	brne	.+10     	; 0x248e <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	85 e0       	ldi	r24, 0x05	; 5
    2488:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    248c:	e0 c0       	rjmp	.+448    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    248e:	c1 15       	cp	r28, r1
    2490:	eb e0       	ldi	r30, 0x0B	; 11
    2492:	de 07       	cpc	r29, r30
    2494:	29 f4       	brne	.+10     	; 0x24a0 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	86 e0       	ldi	r24, 0x06	; 6
    249a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    249e:	d7 c0       	rjmp	.+430    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    24a0:	c0 34       	cpi	r28, 0x40	; 64
    24a2:	f8 e0       	ldi	r31, 0x08	; 8
    24a4:	df 07       	cpc	r29, r31
    24a6:	29 f4       	brne	.+10     	; 0x24b2 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    24b0:	ce c0       	rjmp	.+412    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    24b2:	c0 34       	cpi	r28, 0x40	; 64
    24b4:	89 e0       	ldi	r24, 0x09	; 9
    24b6:	d8 07       	cpc	r29, r24
    24b8:	29 f4       	brne	.+10     	; 0x24c4 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	84 e0       	ldi	r24, 0x04	; 4
    24be:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    24c2:	c5 c0       	rjmp	.+394    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    24c4:	c0 34       	cpi	r28, 0x40	; 64
    24c6:	ea e0       	ldi	r30, 0x0A	; 10
    24c8:	de 07       	cpc	r29, r30
    24ca:	29 f4       	brne	.+10     	; 0x24d6 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    24cc:	62 e0       	ldi	r22, 0x02	; 2
    24ce:	85 e0       	ldi	r24, 0x05	; 5
    24d0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    24d4:	bc c0       	rjmp	.+376    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    24d6:	c0 34       	cpi	r28, 0x40	; 64
    24d8:	fb e0       	ldi	r31, 0x0B	; 11
    24da:	df 07       	cpc	r29, r31
    24dc:	29 f4       	brne	.+10     	; 0x24e8 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	86 e0       	ldi	r24, 0x06	; 6
    24e2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    24e6:	b3 c0       	rjmp	.+358    	; 0x264e <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    24e8:	c0 39       	cpi	r28, 0x90	; 144
    24ea:	88 e0       	ldi	r24, 0x08	; 8
    24ec:	d8 07       	cpc	r29, r24
    24ee:	29 f4       	brne	.+10     	; 0x24fa <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    24f0:	64 e0       	ldi	r22, 0x04	; 4
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    24f8:	aa c0       	rjmp	.+340    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    24fa:	c0 39       	cpi	r28, 0x90	; 144
    24fc:	e9 e0       	ldi	r30, 0x09	; 9
    24fe:	de 07       	cpc	r29, r30
    2500:	29 f4       	brne	.+10     	; 0x250c <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2502:	64 e0       	ldi	r22, 0x04	; 4
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    250a:	a1 c0       	rjmp	.+322    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    250c:	c0 39       	cpi	r28, 0x90	; 144
    250e:	fa e0       	ldi	r31, 0x0A	; 10
    2510:	df 07       	cpc	r29, r31
    2512:	29 f4       	brne	.+10     	; 0x251e <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2514:	64 e0       	ldi	r22, 0x04	; 4
    2516:	85 e0       	ldi	r24, 0x05	; 5
    2518:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    251c:	98 c0       	rjmp	.+304    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    251e:	c0 39       	cpi	r28, 0x90	; 144
    2520:	8b e0       	ldi	r24, 0x0B	; 11
    2522:	d8 07       	cpc	r29, r24
    2524:	29 f4       	brne	.+10     	; 0x2530 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2526:	64 e0       	ldi	r22, 0x04	; 4
    2528:	86 e0       	ldi	r24, 0x06	; 6
    252a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    252e:	8f c0       	rjmp	.+286    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2530:	c0 3c       	cpi	r28, 0xC0	; 192
    2532:	e8 e0       	ldi	r30, 0x08	; 8
    2534:	de 07       	cpc	r29, r30
    2536:	29 f4       	brne	.+10     	; 0x2542 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2538:	68 e0       	ldi	r22, 0x08	; 8
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2540:	86 c0       	rjmp	.+268    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2542:	c0 3c       	cpi	r28, 0xC0	; 192
    2544:	f9 e0       	ldi	r31, 0x09	; 9
    2546:	df 07       	cpc	r29, r31
    2548:	29 f4       	brne	.+10     	; 0x2554 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    254a:	68 e0       	ldi	r22, 0x08	; 8
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2552:	7d c0       	rjmp	.+250    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2554:	c0 3c       	cpi	r28, 0xC0	; 192
    2556:	8a e0       	ldi	r24, 0x0A	; 10
    2558:	d8 07       	cpc	r29, r24
    255a:	29 f4       	brne	.+10     	; 0x2566 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    255c:	68 e0       	ldi	r22, 0x08	; 8
    255e:	85 e0       	ldi	r24, 0x05	; 5
    2560:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2564:	74 c0       	rjmp	.+232    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2566:	c0 3c       	cpi	r28, 0xC0	; 192
    2568:	eb e0       	ldi	r30, 0x0B	; 11
    256a:	de 07       	cpc	r29, r30
    256c:	29 f4       	brne	.+10     	; 0x2578 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    256e:	68 e0       	ldi	r22, 0x08	; 8
    2570:	86 e0       	ldi	r24, 0x06	; 6
    2572:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2576:	6b c0       	rjmp	.+214    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2578:	c0 3a       	cpi	r28, 0xA0	; 160
    257a:	f8 e0       	ldi	r31, 0x08	; 8
    257c:	df 07       	cpc	r29, r31
    257e:	29 f4       	brne	.+10     	; 0x258a <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2580:	60 e1       	ldi	r22, 0x10	; 16
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2588:	62 c0       	rjmp	.+196    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    258a:	c0 3a       	cpi	r28, 0xA0	; 160
    258c:	89 e0       	ldi	r24, 0x09	; 9
    258e:	d8 07       	cpc	r29, r24
    2590:	29 f4       	brne	.+10     	; 0x259c <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2592:	60 e1       	ldi	r22, 0x10	; 16
    2594:	84 e0       	ldi	r24, 0x04	; 4
    2596:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    259a:	59 c0       	rjmp	.+178    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    259c:	c0 3a       	cpi	r28, 0xA0	; 160
    259e:	ea e0       	ldi	r30, 0x0A	; 10
    25a0:	de 07       	cpc	r29, r30
    25a2:	29 f4       	brne	.+10     	; 0x25ae <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    25a4:	60 e1       	ldi	r22, 0x10	; 16
    25a6:	85 e0       	ldi	r24, 0x05	; 5
    25a8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    25ac:	50 c0       	rjmp	.+160    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    25ae:	c0 3a       	cpi	r28, 0xA0	; 160
    25b0:	fb e0       	ldi	r31, 0x0B	; 11
    25b2:	df 07       	cpc	r29, r31
    25b4:	29 f4       	brne	.+10     	; 0x25c0 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    25b6:	60 e1       	ldi	r22, 0x10	; 16
    25b8:	86 e0       	ldi	r24, 0x06	; 6
    25ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    25be:	47 c0       	rjmp	.+142    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    25c0:	c0 3b       	cpi	r28, 0xB0	; 176
    25c2:	88 e0       	ldi	r24, 0x08	; 8
    25c4:	d8 07       	cpc	r29, r24
    25c6:	29 f4       	brne	.+10     	; 0x25d2 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    25c8:	60 e2       	ldi	r22, 0x20	; 32
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    25d0:	3e c0       	rjmp	.+124    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    25d2:	c0 3b       	cpi	r28, 0xB0	; 176
    25d4:	e9 e0       	ldi	r30, 0x09	; 9
    25d6:	de 07       	cpc	r29, r30
    25d8:	29 f4       	brne	.+10     	; 0x25e4 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    25da:	60 e2       	ldi	r22, 0x20	; 32
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    25e2:	35 c0       	rjmp	.+106    	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    25e4:	c0 3b       	cpi	r28, 0xB0	; 176
    25e6:	fa e0       	ldi	r31, 0x0A	; 10
    25e8:	df 07       	cpc	r29, r31
    25ea:	29 f4       	brne	.+10     	; 0x25f6 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    25ec:	60 e2       	ldi	r22, 0x20	; 32
    25ee:	85 e0       	ldi	r24, 0x05	; 5
    25f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    25f4:	2c c0       	rjmp	.+88     	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    25f6:	c0 3b       	cpi	r28, 0xB0	; 176
    25f8:	8b e0       	ldi	r24, 0x0B	; 11
    25fa:	d8 07       	cpc	r29, r24
    25fc:	29 f4       	brne	.+10     	; 0x2608 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    25fe:	60 e2       	ldi	r22, 0x20	; 32
    2600:	86 e0       	ldi	r24, 0x06	; 6
    2602:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2606:	23 c0       	rjmp	.+70     	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2608:	c0 38       	cpi	r28, 0x80	; 128
    260a:	e4 e0       	ldi	r30, 0x04	; 4
    260c:	de 07       	cpc	r29, r30
    260e:	29 f4       	brne	.+10     	; 0x261a <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2610:	60 e4       	ldi	r22, 0x40	; 64
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    2618:	1a c0       	rjmp	.+52     	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    261a:	c0 39       	cpi	r28, 0x90	; 144
    261c:	f4 e0       	ldi	r31, 0x04	; 4
    261e:	df 07       	cpc	r29, r31
    2620:	29 f4       	brne	.+10     	; 0x262c <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2622:	60 e4       	ldi	r22, 0x40	; 64
    2624:	84 e0       	ldi	r24, 0x04	; 4
    2626:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    262a:	11 c0       	rjmp	.+34     	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    262c:	c0 3a       	cpi	r28, 0xA0	; 160
    262e:	84 e0       	ldi	r24, 0x04	; 4
    2630:	d8 07       	cpc	r29, r24
    2632:	29 f4       	brne	.+10     	; 0x263e <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2634:	60 e4       	ldi	r22, 0x40	; 64
    2636:	85 e0       	ldi	r24, 0x05	; 5
    2638:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
    263c:	08 c0       	rjmp	.+16     	; 0x264e <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    263e:	c0 3b       	cpi	r28, 0xB0	; 176
    2640:	e4 e0       	ldi	r30, 0x04	; 4
    2642:	de 07       	cpc	r29, r30
    2644:	21 f4       	brne	.+8      	; 0x264e <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2646:	60 e4       	ldi	r22, 0x40	; 64
    2648:	86 e0       	ldi	r24, 0x06	; 6
    264a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	8f 73       	andi	r24, 0x3F	; 63
    2652:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2654:	f8 01       	movw	r30, r16
    2656:	95 81       	ldd	r25, Z+5	; 0x05
    2658:	84 81       	ldd	r24, Z+4	; 0x04
    265a:	89 2b       	or	r24, r25
    265c:	96 81       	ldd	r25, Z+6	; 0x06
    265e:	91 11       	cpse	r25, r1
    2660:	98 e0       	ldi	r25, 0x08	; 8
    2662:	89 2b       	or	r24, r25
    2664:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2666:	f8 01       	movw	r30, r16
    2668:	40 81       	ld	r20, Z
    266a:	51 81       	ldd	r21, Z+1	; 0x01
    266c:	62 81       	ldd	r22, Z+2	; 0x02
    266e:	73 81       	ldd	r23, Z+3	; 0x03
    2670:	00 e0       	ldi	r16, 0x00	; 0
    2672:	18 e4       	ldi	r17, 0x48	; 72
    2674:	28 ee       	ldi	r18, 0xE8	; 232
    2676:	31 e0       	ldi	r19, 0x01	; 1
    2678:	ce 01       	movw	r24, r28
    267a:	74 dd       	rcall	.-1304   	; 0x2164 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	98 60       	ori	r25, 0x08	; 8
    2680:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	90 61       	ori	r25, 0x10	; 16
    2686:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2692:	04 c0       	rjmp	.+8      	; 0x269c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2694:	61 50       	subi	r22, 0x01	; 1
    2696:	71 09       	sbc	r23, r1
    2698:	81 09       	sbc	r24, r1
    269a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    269c:	61 15       	cp	r22, r1
    269e:	71 05       	cpc	r23, r1
    26a0:	81 05       	cpc	r24, r1
    26a2:	91 05       	cpc	r25, r1
    26a4:	b9 f7       	brne	.-18     	; 0x2694 <__portable_avr_delay_cycles+0x2>
    26a6:	08 95       	ret

000026a8 <main>:
 * printed via printf() after being read, can be viewed with a serial terminal
 * application on a machine attached to the USB interface on the Xplained
 * board.
 */
int main(void)
{
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	a3 97       	sbiw	r28, 0x23	; 35
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	de bf       	out	0x3e, r29	; 62

	/* Initialize the board (Xplained UC3 or XMEGA & Xplained Sensor boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */
	sensor_platform_init();
    26b6:	96 d9       	rcall	.-3284   	; 0x19e4 <sensor_platform_init>

	/* Attach descriptors to the defined sensor devices. */
	sensor_attach(&light_dev, SENSOR_TYPE_LIGHT, 0, 0);
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	60 e2       	ldi	r22, 0x20	; 32
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	ce 01       	movw	r24, r28
    26c6:	01 96       	adiw	r24, 0x01	; 1
    26c8:	0e 94 bb 08 	call	0x1176	; 0x1176 <sensor_attach>
	sensor_attach(&prox_dev, SENSOR_TYPE_PROXIMITY, 0, 0);
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	71 e0       	ldi	r23, 0x01	; 1
    26d8:	ce 01       	movw	r24, r28
    26da:	0e 96       	adiw	r24, 0x0e	; 14
    26dc:	0e 94 bb 08 	call	0x1176	; 0x1176 <sensor_attach>

	if (light_dev.err || prox_dev.err) {
    26e0:	88 85       	ldd	r24, Y+8	; 0x08
    26e2:	99 85       	ldd	r25, Y+9	; 0x09
    26e4:	89 2b       	or	r24, r25
    26e6:	21 f4       	brne	.+8      	; 0x26f0 <main+0x48>
    26e8:	8d 89       	ldd	r24, Y+21	; 0x15
    26ea:	9e 89       	ldd	r25, Y+22	; 0x16
    26ec:	89 2b       	or	r24, r25
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <main+0x50>
		puts("\rSensor initialization error.");
    26f0:	8f ee       	ldi	r24, 0xEF	; 239
    26f2:	90 e2       	ldi	r25, 0x20	; 32
    26f4:	42 d6       	rcall	.+3204   	; 0x337a <puts>
    26f6:	ff cf       	rjmp	.-2      	; 0x26f6 <main+0x4e>

		uint32_t id;
		uint8_t version;
		int16_t freq, range;

		sensor_device_id(&light_dev, &id, &version);
    26f8:	ae 01       	movw	r20, r28
    26fa:	4d 5d       	subi	r20, 0xDD	; 221
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	be 01       	movw	r22, r28
    2700:	65 5e       	subi	r22, 0xE5	; 229
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	ce 01       	movw	r24, r28
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	0e 94 12 09 	call	0x1224	; 0x1224 <sensor_device_id>
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_bandwidth(sensor_t *sensor,
		int16_t *bandwidth_Hz)
{
	return sensor_ioctl(sensor, SENSOR_GET_BANDWIDTH, bandwidth_Hz);
    270c:	ae 01       	movw	r20, r28
    270e:	4f 5d       	subi	r20, 0xDF	; 223
    2710:	5f 4f       	sbci	r21, 0xFF	; 255
    2712:	6a e0       	ldi	r22, 0x0A	; 10
    2714:	ce 01       	movw	r24, r28
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_range(sensor_t *sensor, int16_t *range)
{
	return sensor_ioctl(sensor, SENSOR_GET_RANGE, range);
    271c:	ae 01       	movw	r20, r28
    271e:	41 5e       	subi	r20, 0xE1	; 225
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	69 e0       	ldi	r22, 0x09	; 9
    2724:	ce 01       	movw	r24, r28
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
		sensor_get_bandwidth(&light_dev, &freq);
		sensor_get_range(&light_dev, &range);

		printf(banner_format, light_dev.drv->caps.name,
    272c:	88 a1       	ldd	r24, Y+32	; 0x20
    272e:	8f 93       	push	r24
    2730:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2732:	8f 93       	push	r24
    2734:	8a a1       	ldd	r24, Y+34	; 0x22
    2736:	8f 93       	push	r24
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	8f 93       	push	r24
    273c:	8b a1       	ldd	r24, Y+35	; 0x23
    273e:	1f 92       	push	r1
    2740:	8f 93       	push	r24
    2742:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2744:	8f 93       	push	r24
    2746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2748:	8f 93       	push	r24
    274a:	eb 81       	ldd	r30, Y+3	; 0x03
    274c:	fc 81       	ldd	r31, Y+4	; 0x04
    274e:	80 8d       	ldd	r24, Z+24	; 0x18
    2750:	8f 93       	push	r24
    2752:	87 89       	ldd	r24, Z+23	; 0x17
    2754:	8f 93       	push	r24
    2756:	0d e0       	ldi	r16, 0x0D	; 13
    2758:	11 e2       	ldi	r17, 0x21	; 33
    275a:	1f 93       	push	r17
    275c:	0f 93       	push	r16
    275e:	fa d5       	rcall	.+3060   	; 0x3354 <printf>
				(unsigned)id, (unsigned)version, freq, range);

		sensor_device_id(&prox_dev, &id, &version);
    2760:	ae 01       	movw	r20, r28
    2762:	4d 5d       	subi	r20, 0xDD	; 221
    2764:	5f 4f       	sbci	r21, 0xFF	; 255
    2766:	be 01       	movw	r22, r28
    2768:	65 5e       	subi	r22, 0xE5	; 229
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	ce 01       	movw	r24, r28
    276e:	0e 96       	adiw	r24, 0x0e	; 14
    2770:	0e 94 12 09 	call	0x1224	; 0x1224 <sensor_device_id>
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_bandwidth(sensor_t *sensor,
		int16_t *bandwidth_Hz)
{
	return sensor_ioctl(sensor, SENSOR_GET_BANDWIDTH, bandwidth_Hz);
    2774:	ae 01       	movw	r20, r28
    2776:	4f 5d       	subi	r20, 0xDF	; 223
    2778:	5f 4f       	sbci	r21, 0xFF	; 255
    277a:	6a e0       	ldi	r22, 0x0A	; 10
    277c:	ce 01       	movw	r24, r28
    277e:	0e 96       	adiw	r24, 0x0e	; 14
    2780:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_range(sensor_t *sensor, int16_t *range)
{
	return sensor_ioctl(sensor, SENSOR_GET_RANGE, range);
    2784:	ae 01       	movw	r20, r28
    2786:	41 5e       	subi	r20, 0xE1	; 225
    2788:	5f 4f       	sbci	r21, 0xFF	; 255
    278a:	69 e0       	ldi	r22, 0x09	; 9
    278c:	ce 01       	movw	r24, r28
    278e:	0e 96       	adiw	r24, 0x0e	; 14
    2790:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
		sensor_get_bandwidth(&prox_dev, &freq);
		sensor_get_range(&prox_dev, &range);

		printf(banner_format, prox_dev.drv->caps.name,
    2794:	88 a1       	ldd	r24, Y+32	; 0x20
    2796:	8f 93       	push	r24
    2798:	8f 8d       	ldd	r24, Y+31	; 0x1f
    279a:	8f 93       	push	r24
    279c:	8a a1       	ldd	r24, Y+34	; 0x22
    279e:	8f 93       	push	r24
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	8f 93       	push	r24
    27a4:	8b a1       	ldd	r24, Y+35	; 0x23
    27a6:	1f 92       	push	r1
    27a8:	8f 93       	push	r24
    27aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ac:	8f 93       	push	r24
    27ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b0:	8f 93       	push	r24
    27b2:	e8 89       	ldd	r30, Y+16	; 0x10
    27b4:	f9 89       	ldd	r31, Y+17	; 0x11
    27b6:	80 8d       	ldd	r24, Z+24	; 0x18
    27b8:	8f 93       	push	r24
    27ba:	87 89       	ldd	r24, Z+23	; 0x17
    27bc:	8f 93       	push	r24
    27be:	1f 93       	push	r17
    27c0:	0f 93       	push	r16
    27c2:	c8 d5       	rcall	.+2960   	; 0x3354 <printf>
				(unsigned)id, (unsigned)version, freq, range);

		delay_ms(500);
    27c4:	6b ea       	ldi	r22, 0xAB	; 171
    27c6:	70 eb       	ldi	r23, 0xB0	; 176
    27c8:	88 e2       	ldi	r24, 0x28	; 40
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	62 df       	rcall	.-316    	; 0x2692 <__portable_avr_delay_cycles>
    27ce:	8a e0       	ldi	r24, 0x0A	; 10
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	89 a3       	std	Y+33, r24	; 0x21
    27d4:	9a a3       	std	Y+34, r25	; 0x22
 *
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_sample_rate(sensor_t *sensor, int16_t sample_Hz)
{
	return sensor_ioctl(sensor, SENSOR_SET_SAMPLE_RATE, &sample_Hz);
    27d6:	ae 01       	movw	r20, r28
    27d8:	4f 5d       	subi	r20, 0xDF	; 223
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
    27dc:	66 e1       	ldi	r22, 0x16	; 22
    27de:	ce 01       	movw	r24, r28
    27e0:	01 96       	adiw	r24, 0x01	; 1
    27e2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
	}

	/* Set sample interval for the light sensor */
	if (sensor_set_sample_rate(&light_dev, LIGHT_SAMPLE_RATE) != true) {
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	81 11       	cpse	r24, r1
		printf("Error setting light sensor sample rate.\r\n");
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <main+0x14c>
    27ee:	8f e4       	ldi	r24, 0x4F	; 79
    27f0:	91 e2       	ldi	r25, 0x21	; 33
    27f2:	c3 d5       	rcall	.+2950   	; 0x337a <puts>
    27f4:	8a e0       	ldi	r24, 0x0A	; 10
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	8f 8f       	std	Y+31, r24	; 0x1f
    27fa:	98 a3       	std	Y+32, r25	; 0x20
    27fc:	ae 01       	movw	r20, r28
    27fe:	41 5e       	subi	r20, 0xE1	; 225
    2800:	5f 4f       	sbci	r21, 0xFF	; 255
    2802:	66 e1       	ldi	r22, 0x16	; 22
    2804:	ce 01       	movw	r24, r28
    2806:	0e 96       	adiw	r24, 0x0e	; 14
    2808:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>
	}

	/* Set sample interval for the proximity sensor */
	if (sensor_set_sample_rate(&prox_dev, PROX_SAMPLE_RATE) != true) {
    280c:	81 11       	cpse	r24, r1
		printf("Error setting proximity sensor sample rate.\r\n");
    280e:	03 c0       	rjmp	.+6      	; 0x2816 <main+0x16e>
    2810:	88 e7       	ldi	r24, 0x78	; 120
    2812:	91 e2       	ldi	r25, 0x21	; 33
    2814:	b2 d5       	rcall	.+2916   	; 0x337a <puts>
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_channel(sensor_t *sensor, int16_t channel)
{
	sensor->channel = channel;
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	9f ef       	ldi	r25, 0xFF	; 255
    281a:	8f 8b       	std	Y+23, r24	; 0x17
    281c:	98 8f       	std	Y+24, r25	; 0x18
	sensor_set_channel(&prox_dev, SENSOR_CHANNEL_ALL);

#if (SET_PROX_THRESHOLD == true)
	/* Manually set proximity threshold values for each channel */
	/* Otherwise, sensor will use values previously stored in nvram. */
	sensor_set_threshold(&prox_dev, SENSOR_THRESHOLD_NEAR_PROXIMITY,
    281e:	44 e6       	ldi	r20, 0x64	; 100
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	6a e0       	ldi	r22, 0x0A	; 10
    2824:	ce 01       	movw	r24, r28
    2826:	0e 96       	adiw	r24, 0x0e	; 14
    2828:	0e 94 3c 09 	call	0x1278	; 0x1278 <sensor_set_threshold>
    282c:	82 e3       	ldi	r24, 0x32	; 50
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	8b 8f       	std	Y+27, r24	; 0x1b
    2832:	9c 8f       	std	Y+28, r25	; 0x1c
 *
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_current(sensor_t *sensor, int16_t current_mA)
{
	return sensor_ioctl(sensor, SENSOR_SET_CURRENT, &current_mA);
    2834:	ae 01       	movw	r20, r28
    2836:	45 5e       	subi	r20, 0xE5	; 229
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	64 e1       	ldi	r22, 0x14	; 20
    283c:	ce 01       	movw	r24, r28
    283e:	0e 96       	adiw	r24, 0x0e	; 14
    2840:	0e 94 60 09 	call	0x12c0	; 0x12c0 <sensor_ioctl>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    2844:	0f 2e       	mov	r0, r31
    2846:	f0 e8       	ldi	r31, 0x80	; 128
    2848:	cf 2e       	mov	r12, r31
    284a:	f6 e0       	ldi	r31, 0x06	; 6
    284c:	df 2e       	mov	r13, r31
    284e:	f0 2d       	mov	r31, r0
    2850:	68 94       	set
    2852:	bb 24       	eor	r11, r11
    2854:	b1 f8       	bld	r11, 1
		sensor_get_light(&light_dev, &light_data);
		sensor_get_proximity(&prox_dev, &prox_data);

		/* Print sensor values */
		if (SCALED_DATA) {
			printf("light = [%5d]\r\n",
    2856:	0f 2e       	mov	r0, r31
    2858:	f5 ea       	ldi	r31, 0xA5	; 165
    285a:	ef 2e       	mov	r14, r31
    285c:	f1 e2       	ldi	r31, 0x21	; 33
    285e:	ff 2e       	mov	r15, r31
    2860:	f0 2d       	mov	r31, r0
					(int16_t)light_data.light.value);

			printf("prox  = 1:%s 2:%s 3:%s\r\n",
    2862:	05 eb       	ldi	r16, 0xB5	; 181
    2864:	11 e2       	ldi	r17, 0x21	; 33
    2866:	f6 01       	movw	r30, r12
    2868:	b7 82       	std	Z+7, r11	; 0x07
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_light(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_LIGHT, data);
    286a:	4a e5       	ldi	r20, 0x5A	; 90
    286c:	50 e2       	ldi	r21, 0x20	; 32
    286e:	65 e0       	ldi	r22, 0x05	; 5
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sensor_read>
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_proximity(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_PROXIMITY, data);
    2878:	49 e4       	ldi	r20, 0x49	; 73
    287a:	50 e2       	ldi	r21, 0x20	; 32
    287c:	67 e0       	ldi	r22, 0x07	; 7
    287e:	ce 01       	movw	r24, r28
    2880:	0e 96       	adiw	r24, 0x0e	; 14
    2882:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sensor_read>
		sensor_get_proximity(&prox_dev, &prox_data);

		/* Print sensor values */
		if (SCALED_DATA) {
			printf("light = [%5d]\r\n",
					(int16_t)light_data.light.value);
    2886:	ea e5       	ldi	r30, 0x5A	; 90
		sensor_get_light(&light_dev, &light_data);
		sensor_get_proximity(&prox_dev, &prox_data);

		/* Print sensor values */
		if (SCALED_DATA) {
			printf("light = [%5d]\r\n",
    2888:	f0 e2       	ldi	r31, 0x20	; 32
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	8f 93       	push	r24
    288e:	80 81       	ld	r24, Z
    2890:	8f 93       	push	r24
    2892:	ff 92       	push	r15
    2894:	ef 92       	push	r14
    2896:	5e d5       	rcall	.+2748   	; 0x3354 <printf>
					(int16_t)light_data.light.value);

			printf("prox  = 1:%s 2:%s 3:%s\r\n",
					prox_labels[prox_data.proximity.value[0]],
					prox_labels[prox_data.proximity.value[1]],
					prox_labels[prox_data.proximity.value[2]]);
    2898:	a9 e4       	ldi	r26, 0x49	; 73
    289a:	b0 e2       	ldi	r27, 0x20	; 32
		/* Print sensor values */
		if (SCALED_DATA) {
			printf("light = [%5d]\r\n",
					(int16_t)light_data.light.value);

			printf("prox  = 1:%s 2:%s 3:%s\r\n",
    289c:	18 96       	adiw	r26, 0x08	; 8
    289e:	ed 91       	ld	r30, X+
    28a0:	fc 91       	ld	r31, X
    28a2:	19 97       	sbiw	r26, 0x09	; 9
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	e6 51       	subi	r30, 0x16	; 22
    28aa:	fe 4d       	sbci	r31, 0xDE	; 222
    28ac:	81 81       	ldd	r24, Z+1	; 0x01
    28ae:	8f 93       	push	r24
    28b0:	80 81       	ld	r24, Z
    28b2:	8f 93       	push	r24
    28b4:	14 96       	adiw	r26, 0x04	; 4
    28b6:	ed 91       	ld	r30, X+
    28b8:	fc 91       	ld	r31, X
    28ba:	15 97       	sbiw	r26, 0x05	; 5
    28bc:	ee 0f       	add	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	e6 51       	subi	r30, 0x16	; 22
    28c2:	fe 4d       	sbci	r31, 0xDE	; 222
    28c4:	81 81       	ldd	r24, Z+1	; 0x01
    28c6:	8f 93       	push	r24
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 93       	push	r24
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	ee 0f       	add	r30, r30
    28d2:	ff 1f       	adc	r31, r31
    28d4:	e6 51       	subi	r30, 0x16	; 22
    28d6:	fe 4d       	sbci	r31, 0xDE	; 222
    28d8:	81 81       	ldd	r24, Z+1	; 0x01
    28da:	8f 93       	push	r24
    28dc:	80 81       	ld	r24, Z
    28de:	8f 93       	push	r24
    28e0:	1f 93       	push	r17
    28e2:	0f 93       	push	r16
					(int16_t)prox_data.proximity.value[0],
					(int16_t)prox_data.proximity.value[1],
					(int16_t)prox_data.proximity.value[2]);
		}

		delay_ms(500);
    28e4:	37 d5       	rcall	.+2670   	; 0x3354 <printf>
    28e6:	6b ea       	ldi	r22, 0xAB	; 171
    28e8:	70 eb       	ldi	r23, 0xB0	; 176
    28ea:	88 e2       	ldi	r24, 0x28	; 40
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	d1 de       	rcall	.-606    	; 0x2692 <__portable_avr_delay_cycles>
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	b8 cf       	rjmp	.-144    	; 0x2866 <main+0x1be>

000028f6 <vfprintf>:
    28f6:	2f 92       	push	r2
    28f8:	3f 92       	push	r3
    28fa:	4f 92       	push	r4
    28fc:	5f 92       	push	r5
    28fe:	6f 92       	push	r6
    2900:	7f 92       	push	r7
    2902:	8f 92       	push	r8
    2904:	9f 92       	push	r9
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	ff 92       	push	r15
    2912:	0f 93       	push	r16
    2914:	1f 93       	push	r17
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	60 97       	sbiw	r28, 0x10	; 16
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	7c 01       	movw	r14, r24
    2926:	1b 01       	movw	r2, r22
    2928:	6a 01       	movw	r12, r20
    292a:	fc 01       	movw	r30, r24
    292c:	16 82       	std	Z+6, r1	; 0x06
    292e:	17 82       	std	Z+7, r1	; 0x07
    2930:	83 81       	ldd	r24, Z+3	; 0x03
    2932:	81 ff       	sbrs	r24, 1
    2934:	2a c3       	rjmp	.+1620   	; 0x2f8a <vfprintf+0x694>
    2936:	9e 01       	movw	r18, r28
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	39 01       	movw	r6, r18
    293e:	f7 01       	movw	r30, r14
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	f1 01       	movw	r30, r2
    2944:	93 fd       	sbrc	r25, 3
    2946:	85 91       	lpm	r24, Z+
    2948:	93 ff       	sbrs	r25, 3
    294a:	81 91       	ld	r24, Z+
    294c:	1f 01       	movw	r2, r30
    294e:	88 23       	and	r24, r24
    2950:	09 f4       	brne	.+2      	; 0x2954 <vfprintf+0x5e>
    2952:	17 c3       	rjmp	.+1582   	; 0x2f82 <vfprintf+0x68c>
    2954:	85 32       	cpi	r24, 0x25	; 37
    2956:	39 f4       	brne	.+14     	; 0x2966 <vfprintf+0x70>
    2958:	93 fd       	sbrc	r25, 3
    295a:	85 91       	lpm	r24, Z+
    295c:	93 ff       	sbrs	r25, 3
    295e:	81 91       	ld	r24, Z+
    2960:	1f 01       	movw	r2, r30
    2962:	85 32       	cpi	r24, 0x25	; 37
    2964:	31 f4       	brne	.+12     	; 0x2972 <vfprintf+0x7c>
    2966:	b7 01       	movw	r22, r14
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	b8 d4       	rcall	.+2416   	; 0x32dc <fputc>
    296c:	56 01       	movw	r10, r12
    296e:	65 01       	movw	r12, r10
    2970:	e6 cf       	rjmp	.-52     	; 0x293e <vfprintf+0x48>
    2972:	10 e0       	ldi	r17, 0x00	; 0
    2974:	51 2c       	mov	r5, r1
    2976:	91 2c       	mov	r9, r1
    2978:	ff e1       	ldi	r31, 0x1F	; 31
    297a:	f9 15       	cp	r31, r9
    297c:	d8 f0       	brcs	.+54     	; 0x29b4 <vfprintf+0xbe>
    297e:	8b 32       	cpi	r24, 0x2B	; 43
    2980:	79 f0       	breq	.+30     	; 0x29a0 <vfprintf+0xaa>
    2982:	38 f4       	brcc	.+14     	; 0x2992 <vfprintf+0x9c>
    2984:	80 32       	cpi	r24, 0x20	; 32
    2986:	79 f0       	breq	.+30     	; 0x29a6 <vfprintf+0xb0>
    2988:	83 32       	cpi	r24, 0x23	; 35
    298a:	a1 f4       	brne	.+40     	; 0x29b4 <vfprintf+0xbe>
    298c:	f9 2d       	mov	r31, r9
    298e:	f0 61       	ori	r31, 0x10	; 16
    2990:	2e c0       	rjmp	.+92     	; 0x29ee <vfprintf+0xf8>
    2992:	8d 32       	cpi	r24, 0x2D	; 45
    2994:	61 f0       	breq	.+24     	; 0x29ae <vfprintf+0xb8>
    2996:	80 33       	cpi	r24, 0x30	; 48
    2998:	69 f4       	brne	.+26     	; 0x29b4 <vfprintf+0xbe>
    299a:	29 2d       	mov	r18, r9
    299c:	21 60       	ori	r18, 0x01	; 1
    299e:	2d c0       	rjmp	.+90     	; 0x29fa <vfprintf+0x104>
    29a0:	39 2d       	mov	r19, r9
    29a2:	32 60       	ori	r19, 0x02	; 2
    29a4:	93 2e       	mov	r9, r19
    29a6:	89 2d       	mov	r24, r9
    29a8:	84 60       	ori	r24, 0x04	; 4
    29aa:	98 2e       	mov	r9, r24
    29ac:	2a c0       	rjmp	.+84     	; 0x2a02 <vfprintf+0x10c>
    29ae:	e9 2d       	mov	r30, r9
    29b0:	e8 60       	ori	r30, 0x08	; 8
    29b2:	15 c0       	rjmp	.+42     	; 0x29de <vfprintf+0xe8>
    29b4:	97 fc       	sbrc	r9, 7
    29b6:	2d c0       	rjmp	.+90     	; 0x2a12 <vfprintf+0x11c>
    29b8:	20 ed       	ldi	r18, 0xD0	; 208
    29ba:	28 0f       	add	r18, r24
    29bc:	2a 30       	cpi	r18, 0x0A	; 10
    29be:	88 f4       	brcc	.+34     	; 0x29e2 <vfprintf+0xec>
    29c0:	96 fe       	sbrs	r9, 6
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <vfprintf+0xda>
    29c4:	3a e0       	ldi	r19, 0x0A	; 10
    29c6:	13 9f       	mul	r17, r19
    29c8:	20 0d       	add	r18, r0
    29ca:	11 24       	eor	r1, r1
    29cc:	12 2f       	mov	r17, r18
    29ce:	19 c0       	rjmp	.+50     	; 0x2a02 <vfprintf+0x10c>
    29d0:	8a e0       	ldi	r24, 0x0A	; 10
    29d2:	58 9e       	mul	r5, r24
    29d4:	20 0d       	add	r18, r0
    29d6:	11 24       	eor	r1, r1
    29d8:	52 2e       	mov	r5, r18
    29da:	e9 2d       	mov	r30, r9
    29dc:	e0 62       	ori	r30, 0x20	; 32
    29de:	9e 2e       	mov	r9, r30
    29e0:	10 c0       	rjmp	.+32     	; 0x2a02 <vfprintf+0x10c>
    29e2:	8e 32       	cpi	r24, 0x2E	; 46
    29e4:	31 f4       	brne	.+12     	; 0x29f2 <vfprintf+0xfc>
    29e6:	96 fc       	sbrc	r9, 6
    29e8:	cc c2       	rjmp	.+1432   	; 0x2f82 <vfprintf+0x68c>
    29ea:	f9 2d       	mov	r31, r9
    29ec:	f0 64       	ori	r31, 0x40	; 64
    29ee:	9f 2e       	mov	r9, r31
    29f0:	08 c0       	rjmp	.+16     	; 0x2a02 <vfprintf+0x10c>
    29f2:	8c 36       	cpi	r24, 0x6C	; 108
    29f4:	21 f4       	brne	.+8      	; 0x29fe <vfprintf+0x108>
    29f6:	29 2d       	mov	r18, r9
    29f8:	20 68       	ori	r18, 0x80	; 128
    29fa:	92 2e       	mov	r9, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <vfprintf+0x10c>
    29fe:	88 36       	cpi	r24, 0x68	; 104
    2a00:	41 f4       	brne	.+16     	; 0x2a12 <vfprintf+0x11c>
    2a02:	f1 01       	movw	r30, r2
    2a04:	93 fd       	sbrc	r25, 3
    2a06:	85 91       	lpm	r24, Z+
    2a08:	93 ff       	sbrs	r25, 3
    2a0a:	81 91       	ld	r24, Z+
    2a0c:	1f 01       	movw	r2, r30
    2a0e:	81 11       	cpse	r24, r1
    2a10:	b3 cf       	rjmp	.-154    	; 0x2978 <vfprintf+0x82>
    2a12:	9b eb       	ldi	r25, 0xBB	; 187
    2a14:	98 0f       	add	r25, r24
    2a16:	93 30       	cpi	r25, 0x03	; 3
    2a18:	20 f4       	brcc	.+8      	; 0x2a22 <vfprintf+0x12c>
    2a1a:	99 2d       	mov	r25, r9
    2a1c:	90 61       	ori	r25, 0x10	; 16
    2a1e:	80 5e       	subi	r24, 0xE0	; 224
    2a20:	07 c0       	rjmp	.+14     	; 0x2a30 <vfprintf+0x13a>
    2a22:	9b e9       	ldi	r25, 0x9B	; 155
    2a24:	98 0f       	add	r25, r24
    2a26:	93 30       	cpi	r25, 0x03	; 3
    2a28:	08 f0       	brcs	.+2      	; 0x2a2c <vfprintf+0x136>
    2a2a:	59 c1       	rjmp	.+690    	; 0x2cde <vfprintf+0x3e8>
    2a2c:	99 2d       	mov	r25, r9
    2a2e:	9f 7e       	andi	r25, 0xEF	; 239
    2a30:	96 ff       	sbrs	r25, 6
    2a32:	16 e0       	ldi	r17, 0x06	; 6
    2a34:	9f 73       	andi	r25, 0x3F	; 63
    2a36:	99 2e       	mov	r9, r25
    2a38:	85 36       	cpi	r24, 0x65	; 101
    2a3a:	19 f4       	brne	.+6      	; 0x2a42 <vfprintf+0x14c>
    2a3c:	90 64       	ori	r25, 0x40	; 64
    2a3e:	99 2e       	mov	r9, r25
    2a40:	08 c0       	rjmp	.+16     	; 0x2a52 <vfprintf+0x15c>
    2a42:	86 36       	cpi	r24, 0x66	; 102
    2a44:	21 f4       	brne	.+8      	; 0x2a4e <vfprintf+0x158>
    2a46:	39 2f       	mov	r19, r25
    2a48:	30 68       	ori	r19, 0x80	; 128
    2a4a:	93 2e       	mov	r9, r19
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <vfprintf+0x15c>
    2a4e:	11 11       	cpse	r17, r1
    2a50:	11 50       	subi	r17, 0x01	; 1
    2a52:	97 fe       	sbrs	r9, 7
    2a54:	07 c0       	rjmp	.+14     	; 0x2a64 <vfprintf+0x16e>
    2a56:	1c 33       	cpi	r17, 0x3C	; 60
    2a58:	50 f4       	brcc	.+20     	; 0x2a6e <vfprintf+0x178>
    2a5a:	44 24       	eor	r4, r4
    2a5c:	43 94       	inc	r4
    2a5e:	41 0e       	add	r4, r17
    2a60:	27 e0       	ldi	r18, 0x07	; 7
    2a62:	0b c0       	rjmp	.+22     	; 0x2a7a <vfprintf+0x184>
    2a64:	18 30       	cpi	r17, 0x08	; 8
    2a66:	38 f0       	brcs	.+14     	; 0x2a76 <vfprintf+0x180>
    2a68:	27 e0       	ldi	r18, 0x07	; 7
    2a6a:	17 e0       	ldi	r17, 0x07	; 7
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <vfprintf+0x182>
    2a6e:	27 e0       	ldi	r18, 0x07	; 7
    2a70:	9c e3       	ldi	r25, 0x3C	; 60
    2a72:	49 2e       	mov	r4, r25
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <vfprintf+0x184>
    2a76:	21 2f       	mov	r18, r17
    2a78:	41 2c       	mov	r4, r1
    2a7a:	56 01       	movw	r10, r12
    2a7c:	84 e0       	ldi	r24, 0x04	; 4
    2a7e:	a8 0e       	add	r10, r24
    2a80:	b1 1c       	adc	r11, r1
    2a82:	f6 01       	movw	r30, r12
    2a84:	60 81       	ld	r22, Z
    2a86:	71 81       	ldd	r23, Z+1	; 0x01
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	93 81       	ldd	r25, Z+3	; 0x03
    2a8c:	04 2d       	mov	r16, r4
    2a8e:	a3 01       	movw	r20, r6
    2a90:	e0 d2       	rcall	.+1472   	; 0x3052 <__ftoa_engine>
    2a92:	6c 01       	movw	r12, r24
    2a94:	f9 81       	ldd	r31, Y+1	; 0x01
    2a96:	fc 87       	std	Y+12, r31	; 0x0c
    2a98:	f0 ff       	sbrs	r31, 0
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <vfprintf+0x1aa>
    2a9c:	f3 ff       	sbrs	r31, 3
    2a9e:	06 c0       	rjmp	.+12     	; 0x2aac <vfprintf+0x1b6>
    2aa0:	91 fc       	sbrc	r9, 1
    2aa2:	06 c0       	rjmp	.+12     	; 0x2ab0 <vfprintf+0x1ba>
    2aa4:	92 fe       	sbrs	r9, 2
    2aa6:	06 c0       	rjmp	.+12     	; 0x2ab4 <vfprintf+0x1be>
    2aa8:	00 e2       	ldi	r16, 0x20	; 32
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <vfprintf+0x1c0>
    2aac:	0d e2       	ldi	r16, 0x2D	; 45
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <vfprintf+0x1c0>
    2ab0:	0b e2       	ldi	r16, 0x2B	; 43
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <vfprintf+0x1c0>
    2ab4:	00 e0       	ldi	r16, 0x00	; 0
    2ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ab8:	8c 70       	andi	r24, 0x0C	; 12
    2aba:	19 f0       	breq	.+6      	; 0x2ac2 <vfprintf+0x1cc>
    2abc:	01 11       	cpse	r16, r1
    2abe:	43 c2       	rjmp	.+1158   	; 0x2f46 <vfprintf+0x650>
    2ac0:	80 c2       	rjmp	.+1280   	; 0x2fc2 <vfprintf+0x6cc>
    2ac2:	97 fe       	sbrs	r9, 7
    2ac4:	10 c0       	rjmp	.+32     	; 0x2ae6 <vfprintf+0x1f0>
    2ac6:	4c 0c       	add	r4, r12
    2ac8:	fc 85       	ldd	r31, Y+12	; 0x0c
    2aca:	f4 ff       	sbrs	r31, 4
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <vfprintf+0x1e0>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	81 33       	cpi	r24, 0x31	; 49
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <vfprintf+0x1e0>
    2ad4:	4a 94       	dec	r4
    2ad6:	14 14       	cp	r1, r4
    2ad8:	74 f5       	brge	.+92     	; 0x2b36 <vfprintf+0x240>
    2ada:	28 e0       	ldi	r18, 0x08	; 8
    2adc:	24 15       	cp	r18, r4
    2ade:	78 f5       	brcc	.+94     	; 0x2b3e <vfprintf+0x248>
    2ae0:	88 e0       	ldi	r24, 0x08	; 8
    2ae2:	48 2e       	mov	r4, r24
    2ae4:	2c c0       	rjmp	.+88     	; 0x2b3e <vfprintf+0x248>
    2ae6:	96 fc       	sbrc	r9, 6
    2ae8:	2a c0       	rjmp	.+84     	; 0x2b3e <vfprintf+0x248>
    2aea:	81 2f       	mov	r24, r17
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	8c 15       	cp	r24, r12
    2af0:	9d 05       	cpc	r25, r13
    2af2:	9c f0       	brlt	.+38     	; 0x2b1a <vfprintf+0x224>
    2af4:	3c ef       	ldi	r19, 0xFC	; 252
    2af6:	c3 16       	cp	r12, r19
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	d3 06       	cpc	r13, r19
    2afc:	74 f0       	brlt	.+28     	; 0x2b1a <vfprintf+0x224>
    2afe:	89 2d       	mov	r24, r9
    2b00:	80 68       	ori	r24, 0x80	; 128
    2b02:	98 2e       	mov	r9, r24
    2b04:	0a c0       	rjmp	.+20     	; 0x2b1a <vfprintf+0x224>
    2b06:	e2 e0       	ldi	r30, 0x02	; 2
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	ec 0f       	add	r30, r28
    2b0c:	fd 1f       	adc	r31, r29
    2b0e:	e1 0f       	add	r30, r17
    2b10:	f1 1d       	adc	r31, r1
    2b12:	80 81       	ld	r24, Z
    2b14:	80 33       	cpi	r24, 0x30	; 48
    2b16:	19 f4       	brne	.+6      	; 0x2b1e <vfprintf+0x228>
    2b18:	11 50       	subi	r17, 0x01	; 1
    2b1a:	11 11       	cpse	r17, r1
    2b1c:	f4 cf       	rjmp	.-24     	; 0x2b06 <vfprintf+0x210>
    2b1e:	97 fe       	sbrs	r9, 7
    2b20:	0e c0       	rjmp	.+28     	; 0x2b3e <vfprintf+0x248>
    2b22:	44 24       	eor	r4, r4
    2b24:	43 94       	inc	r4
    2b26:	41 0e       	add	r4, r17
    2b28:	81 2f       	mov	r24, r17
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	c8 16       	cp	r12, r24
    2b2e:	d9 06       	cpc	r13, r25
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <vfprintf+0x246>
    2b32:	1c 19       	sub	r17, r12
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <vfprintf+0x248>
    2b36:	44 24       	eor	r4, r4
    2b38:	43 94       	inc	r4
    2b3a:	01 c0       	rjmp	.+2      	; 0x2b3e <vfprintf+0x248>
    2b3c:	10 e0       	ldi	r17, 0x00	; 0
    2b3e:	97 fe       	sbrs	r9, 7
    2b40:	06 c0       	rjmp	.+12     	; 0x2b4e <vfprintf+0x258>
    2b42:	1c 14       	cp	r1, r12
    2b44:	1d 04       	cpc	r1, r13
    2b46:	34 f4       	brge	.+12     	; 0x2b54 <vfprintf+0x25e>
    2b48:	c6 01       	movw	r24, r12
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <vfprintf+0x262>
    2b4e:	85 e0       	ldi	r24, 0x05	; 5
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <vfprintf+0x262>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	01 11       	cpse	r16, r1
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	11 23       	and	r17, r17
    2b5e:	31 f0       	breq	.+12     	; 0x2b6c <vfprintf+0x276>
    2b60:	21 2f       	mov	r18, r17
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	2f 5f       	subi	r18, 0xFF	; 255
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	25 2d       	mov	r18, r5
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	82 17       	cp	r24, r18
    2b72:	93 07       	cpc	r25, r19
    2b74:	14 f4       	brge	.+4      	; 0x2b7a <vfprintf+0x284>
    2b76:	58 1a       	sub	r5, r24
    2b78:	01 c0       	rjmp	.+2      	; 0x2b7c <vfprintf+0x286>
    2b7a:	51 2c       	mov	r5, r1
    2b7c:	89 2d       	mov	r24, r9
    2b7e:	89 70       	andi	r24, 0x09	; 9
    2b80:	41 f4       	brne	.+16     	; 0x2b92 <vfprintf+0x29c>
    2b82:	55 20       	and	r5, r5
    2b84:	31 f0       	breq	.+12     	; 0x2b92 <vfprintf+0x29c>
    2b86:	b7 01       	movw	r22, r14
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a7 d3       	rcall	.+1870   	; 0x32dc <fputc>
    2b8e:	5a 94       	dec	r5
    2b90:	f8 cf       	rjmp	.-16     	; 0x2b82 <vfprintf+0x28c>
    2b92:	00 23       	and	r16, r16
    2b94:	21 f0       	breq	.+8      	; 0x2b9e <vfprintf+0x2a8>
    2b96:	b7 01       	movw	r22, r14
    2b98:	80 2f       	mov	r24, r16
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9f d3       	rcall	.+1854   	; 0x32dc <fputc>
    2b9e:	93 fc       	sbrc	r9, 3
    2ba0:	08 c0       	rjmp	.+16     	; 0x2bb2 <vfprintf+0x2bc>
    2ba2:	55 20       	and	r5, r5
    2ba4:	31 f0       	breq	.+12     	; 0x2bb2 <vfprintf+0x2bc>
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	80 e3       	ldi	r24, 0x30	; 48
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	97 d3       	rcall	.+1838   	; 0x32dc <fputc>
    2bae:	5a 94       	dec	r5
    2bb0:	f8 cf       	rjmp	.-16     	; 0x2ba2 <vfprintf+0x2ac>
    2bb2:	97 fe       	sbrs	r9, 7
    2bb4:	4a c0       	rjmp	.+148    	; 0x2c4a <vfprintf+0x354>
    2bb6:	46 01       	movw	r8, r12
    2bb8:	d7 fe       	sbrs	r13, 7
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <vfprintf+0x2ca>
    2bbc:	81 2c       	mov	r8, r1
    2bbe:	91 2c       	mov	r9, r1
    2bc0:	c6 01       	movw	r24, r12
    2bc2:	88 19       	sub	r24, r8
    2bc4:	99 09       	sbc	r25, r9
    2bc6:	f3 01       	movw	r30, r6
    2bc8:	e8 0f       	add	r30, r24
    2bca:	f9 1f       	adc	r31, r25
    2bcc:	ed 87       	std	Y+13, r30	; 0x0d
    2bce:	fe 87       	std	Y+14, r31	; 0x0e
    2bd0:	96 01       	movw	r18, r12
    2bd2:	24 19       	sub	r18, r4
    2bd4:	31 09       	sbc	r19, r1
    2bd6:	2f 87       	std	Y+15, r18	; 0x0f
    2bd8:	38 8b       	std	Y+16, r19	; 0x10
    2bda:	01 2f       	mov	r16, r17
    2bdc:	10 e0       	ldi	r17, 0x00	; 0
    2bde:	11 95       	neg	r17
    2be0:	01 95       	neg	r16
    2be2:	11 09       	sbc	r17, r1
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	83 16       	cp	r8, r19
    2be8:	93 06       	cpc	r9, r19
    2bea:	21 f4       	brne	.+8      	; 0x2bf4 <vfprintf+0x2fe>
    2bec:	b7 01       	movw	r22, r14
    2bee:	8e e2       	ldi	r24, 0x2E	; 46
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	74 d3       	rcall	.+1768   	; 0x32dc <fputc>
    2bf4:	c8 14       	cp	r12, r8
    2bf6:	d9 04       	cpc	r13, r9
    2bf8:	4c f0       	brlt	.+18     	; 0x2c0c <vfprintf+0x316>
    2bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfc:	98 89       	ldd	r25, Y+16	; 0x10
    2bfe:	88 15       	cp	r24, r8
    2c00:	99 05       	cpc	r25, r9
    2c02:	24 f4       	brge	.+8      	; 0x2c0c <vfprintf+0x316>
    2c04:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c06:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c08:	81 81       	ldd	r24, Z+1	; 0x01
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <vfprintf+0x318>
    2c0c:	80 e3       	ldi	r24, 0x30	; 48
    2c0e:	f1 e0       	ldi	r31, 0x01	; 1
    2c10:	8f 1a       	sub	r8, r31
    2c12:	91 08       	sbc	r9, r1
    2c14:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c16:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	2d 87       	std	Y+13, r18	; 0x0d
    2c1e:	3e 87       	std	Y+14, r19	; 0x0e
    2c20:	80 16       	cp	r8, r16
    2c22:	91 06       	cpc	r9, r17
    2c24:	24 f0       	brlt	.+8      	; 0x2c2e <vfprintf+0x338>
    2c26:	b7 01       	movw	r22, r14
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	58 d3       	rcall	.+1712   	; 0x32dc <fputc>
    2c2c:	db cf       	rjmp	.-74     	; 0x2be4 <vfprintf+0x2ee>
    2c2e:	c8 14       	cp	r12, r8
    2c30:	d9 04       	cpc	r13, r9
    2c32:	41 f4       	brne	.+16     	; 0x2c44 <vfprintf+0x34e>
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	96 33       	cpi	r25, 0x36	; 54
    2c38:	20 f4       	brcc	.+8      	; 0x2c42 <vfprintf+0x34c>
    2c3a:	95 33       	cpi	r25, 0x35	; 53
    2c3c:	19 f4       	brne	.+6      	; 0x2c44 <vfprintf+0x34e>
    2c3e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c40:	34 ff       	sbrs	r19, 4
    2c42:	81 e3       	ldi	r24, 0x31	; 49
    2c44:	b7 01       	movw	r22, r14
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	48 c0       	rjmp	.+144    	; 0x2cda <vfprintf+0x3e4>
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	81 33       	cpi	r24, 0x31	; 49
    2c4e:	19 f0       	breq	.+6      	; 0x2c56 <vfprintf+0x360>
    2c50:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c52:	9f 7e       	andi	r25, 0xEF	; 239
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	b7 01       	movw	r22, r14
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	40 d3       	rcall	.+1664   	; 0x32dc <fputc>
    2c5c:	11 11       	cpse	r17, r1
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <vfprintf+0x374>
    2c60:	94 fc       	sbrc	r9, 4
    2c62:	16 c0       	rjmp	.+44     	; 0x2c90 <vfprintf+0x39a>
    2c64:	85 e6       	ldi	r24, 0x65	; 101
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	15 c0       	rjmp	.+42     	; 0x2c94 <vfprintf+0x39e>
    2c6a:	b7 01       	movw	r22, r14
    2c6c:	8e e2       	ldi	r24, 0x2E	; 46
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	35 d3       	rcall	.+1642   	; 0x32dc <fputc>
    2c72:	1e 5f       	subi	r17, 0xFE	; 254
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	01 e0       	ldi	r16, 0x01	; 1
    2c78:	08 0f       	add	r16, r24
    2c7a:	f3 01       	movw	r30, r6
    2c7c:	e8 0f       	add	r30, r24
    2c7e:	f1 1d       	adc	r31, r1
    2c80:	80 81       	ld	r24, Z
    2c82:	b7 01       	movw	r22, r14
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	2a d3       	rcall	.+1620   	; 0x32dc <fputc>
    2c88:	80 2f       	mov	r24, r16
    2c8a:	01 13       	cpse	r16, r17
    2c8c:	f4 cf       	rjmp	.-24     	; 0x2c76 <vfprintf+0x380>
    2c8e:	e8 cf       	rjmp	.-48     	; 0x2c60 <vfprintf+0x36a>
    2c90:	85 e4       	ldi	r24, 0x45	; 69
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	b7 01       	movw	r22, r14
    2c96:	22 d3       	rcall	.+1604   	; 0x32dc <fputc>
    2c98:	d7 fc       	sbrc	r13, 7
    2c9a:	06 c0       	rjmp	.+12     	; 0x2ca8 <vfprintf+0x3b2>
    2c9c:	c1 14       	cp	r12, r1
    2c9e:	d1 04       	cpc	r13, r1
    2ca0:	41 f4       	brne	.+16     	; 0x2cb2 <vfprintf+0x3bc>
    2ca2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ca4:	e4 ff       	sbrs	r30, 4
    2ca6:	05 c0       	rjmp	.+10     	; 0x2cb2 <vfprintf+0x3bc>
    2ca8:	d1 94       	neg	r13
    2caa:	c1 94       	neg	r12
    2cac:	d1 08       	sbc	r13, r1
    2cae:	8d e2       	ldi	r24, 0x2D	; 45
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <vfprintf+0x3be>
    2cb2:	8b e2       	ldi	r24, 0x2B	; 43
    2cb4:	b7 01       	movw	r22, r14
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	11 d3       	rcall	.+1570   	; 0x32dc <fputc>
    2cba:	80 e3       	ldi	r24, 0x30	; 48
    2cbc:	2a e0       	ldi	r18, 0x0A	; 10
    2cbe:	c2 16       	cp	r12, r18
    2cc0:	d1 04       	cpc	r13, r1
    2cc2:	2c f0       	brlt	.+10     	; 0x2cce <vfprintf+0x3d8>
    2cc4:	8f 5f       	subi	r24, 0xFF	; 255
    2cc6:	fa e0       	ldi	r31, 0x0A	; 10
    2cc8:	cf 1a       	sub	r12, r31
    2cca:	d1 08       	sbc	r13, r1
    2ccc:	f7 cf       	rjmp	.-18     	; 0x2cbc <vfprintf+0x3c6>
    2cce:	b7 01       	movw	r22, r14
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	04 d3       	rcall	.+1544   	; 0x32dc <fputc>
    2cd4:	b7 01       	movw	r22, r14
    2cd6:	c6 01       	movw	r24, r12
    2cd8:	c0 96       	adiw	r24, 0x30	; 48
    2cda:	00 d3       	rcall	.+1536   	; 0x32dc <fputc>
    2cdc:	49 c1       	rjmp	.+658    	; 0x2f70 <vfprintf+0x67a>
    2cde:	83 36       	cpi	r24, 0x63	; 99
    2ce0:	31 f0       	breq	.+12     	; 0x2cee <vfprintf+0x3f8>
    2ce2:	83 37       	cpi	r24, 0x73	; 115
    2ce4:	79 f0       	breq	.+30     	; 0x2d04 <vfprintf+0x40e>
    2ce6:	83 35       	cpi	r24, 0x53	; 83
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <vfprintf+0x3f6>
    2cea:	52 c0       	rjmp	.+164    	; 0x2d90 <vfprintf+0x49a>
    2cec:	1f c0       	rjmp	.+62     	; 0x2d2c <vfprintf+0x436>
    2cee:	56 01       	movw	r10, r12
    2cf0:	32 e0       	ldi	r19, 0x02	; 2
    2cf2:	a3 0e       	add	r10, r19
    2cf4:	b1 1c       	adc	r11, r1
    2cf6:	f6 01       	movw	r30, r12
    2cf8:	80 81       	ld	r24, Z
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	01 e0       	ldi	r16, 0x01	; 1
    2cfe:	10 e0       	ldi	r17, 0x00	; 0
    2d00:	63 01       	movw	r12, r6
    2d02:	11 c0       	rjmp	.+34     	; 0x2d26 <vfprintf+0x430>
    2d04:	56 01       	movw	r10, r12
    2d06:	f2 e0       	ldi	r31, 0x02	; 2
    2d08:	af 0e       	add	r10, r31
    2d0a:	b1 1c       	adc	r11, r1
    2d0c:	f6 01       	movw	r30, r12
    2d0e:	c0 80       	ld	r12, Z
    2d10:	d1 80       	ldd	r13, Z+1	; 0x01
    2d12:	96 fe       	sbrs	r9, 6
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <vfprintf+0x426>
    2d16:	61 2f       	mov	r22, r17
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <vfprintf+0x42a>
    2d1c:	6f ef       	ldi	r22, 0xFF	; 255
    2d1e:	7f ef       	ldi	r23, 0xFF	; 255
    2d20:	c6 01       	movw	r24, r12
    2d22:	87 d2       	rcall	.+1294   	; 0x3232 <strnlen>
    2d24:	8c 01       	movw	r16, r24
    2d26:	f9 2d       	mov	r31, r9
    2d28:	ff 77       	andi	r31, 0x7F	; 127
    2d2a:	13 c0       	rjmp	.+38     	; 0x2d52 <vfprintf+0x45c>
    2d2c:	56 01       	movw	r10, r12
    2d2e:	22 e0       	ldi	r18, 0x02	; 2
    2d30:	a2 0e       	add	r10, r18
    2d32:	b1 1c       	adc	r11, r1
    2d34:	f6 01       	movw	r30, r12
    2d36:	c0 80       	ld	r12, Z
    2d38:	d1 80       	ldd	r13, Z+1	; 0x01
    2d3a:	96 fe       	sbrs	r9, 6
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <vfprintf+0x44e>
    2d3e:	61 2f       	mov	r22, r17
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <vfprintf+0x452>
    2d44:	6f ef       	ldi	r22, 0xFF	; 255
    2d46:	7f ef       	ldi	r23, 0xFF	; 255
    2d48:	c6 01       	movw	r24, r12
    2d4a:	5b d2       	rcall	.+1206   	; 0x3202 <strnlen_P>
    2d4c:	8c 01       	movw	r16, r24
    2d4e:	f9 2d       	mov	r31, r9
    2d50:	f0 68       	ori	r31, 0x80	; 128
    2d52:	9f 2e       	mov	r9, r31
    2d54:	f3 fd       	sbrc	r31, 3
    2d56:	18 c0       	rjmp	.+48     	; 0x2d88 <vfprintf+0x492>
    2d58:	85 2d       	mov	r24, r5
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	08 17       	cp	r16, r24
    2d5e:	19 07       	cpc	r17, r25
    2d60:	98 f4       	brcc	.+38     	; 0x2d88 <vfprintf+0x492>
    2d62:	b7 01       	movw	r22, r14
    2d64:	80 e2       	ldi	r24, 0x20	; 32
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	b9 d2       	rcall	.+1394   	; 0x32dc <fputc>
    2d6a:	5a 94       	dec	r5
    2d6c:	f5 cf       	rjmp	.-22     	; 0x2d58 <vfprintf+0x462>
    2d6e:	f6 01       	movw	r30, r12
    2d70:	97 fc       	sbrc	r9, 7
    2d72:	85 91       	lpm	r24, Z+
    2d74:	97 fe       	sbrs	r9, 7
    2d76:	81 91       	ld	r24, Z+
    2d78:	6f 01       	movw	r12, r30
    2d7a:	b7 01       	movw	r22, r14
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	ae d2       	rcall	.+1372   	; 0x32dc <fputc>
    2d80:	51 10       	cpse	r5, r1
    2d82:	5a 94       	dec	r5
    2d84:	01 50       	subi	r16, 0x01	; 1
    2d86:	11 09       	sbc	r17, r1
    2d88:	01 15       	cp	r16, r1
    2d8a:	11 05       	cpc	r17, r1
    2d8c:	81 f7       	brne	.-32     	; 0x2d6e <vfprintf+0x478>
    2d8e:	f0 c0       	rjmp	.+480    	; 0x2f70 <vfprintf+0x67a>
    2d90:	84 36       	cpi	r24, 0x64	; 100
    2d92:	11 f0       	breq	.+4      	; 0x2d98 <vfprintf+0x4a2>
    2d94:	89 36       	cpi	r24, 0x69	; 105
    2d96:	59 f5       	brne	.+86     	; 0x2dee <vfprintf+0x4f8>
    2d98:	56 01       	movw	r10, r12
    2d9a:	97 fe       	sbrs	r9, 7
    2d9c:	09 c0       	rjmp	.+18     	; 0x2db0 <vfprintf+0x4ba>
    2d9e:	24 e0       	ldi	r18, 0x04	; 4
    2da0:	a2 0e       	add	r10, r18
    2da2:	b1 1c       	adc	r11, r1
    2da4:	f6 01       	movw	r30, r12
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	0a c0       	rjmp	.+20     	; 0x2dc4 <vfprintf+0x4ce>
    2db0:	f2 e0       	ldi	r31, 0x02	; 2
    2db2:	af 0e       	add	r10, r31
    2db4:	b1 1c       	adc	r11, r1
    2db6:	f6 01       	movw	r30, r12
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	07 2e       	mov	r0, r23
    2dbe:	00 0c       	add	r0, r0
    2dc0:	88 0b       	sbc	r24, r24
    2dc2:	99 0b       	sbc	r25, r25
    2dc4:	f9 2d       	mov	r31, r9
    2dc6:	ff 76       	andi	r31, 0x6F	; 111
    2dc8:	9f 2e       	mov	r9, r31
    2dca:	97 ff       	sbrs	r25, 7
    2dcc:	09 c0       	rjmp	.+18     	; 0x2de0 <vfprintf+0x4ea>
    2dce:	90 95       	com	r25
    2dd0:	80 95       	com	r24
    2dd2:	70 95       	com	r23
    2dd4:	61 95       	neg	r22
    2dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	f0 68       	ori	r31, 0x80	; 128
    2dde:	9f 2e       	mov	r9, r31
    2de0:	2a e0       	ldi	r18, 0x0A	; 10
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	a3 01       	movw	r20, r6
    2de6:	f9 d2       	rcall	.+1522   	; 0x33da <__ultoa_invert>
    2de8:	c8 2e       	mov	r12, r24
    2dea:	c6 18       	sub	r12, r6
    2dec:	3e c0       	rjmp	.+124    	; 0x2e6a <vfprintf+0x574>
    2dee:	09 2d       	mov	r16, r9
    2df0:	85 37       	cpi	r24, 0x75	; 117
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <vfprintf+0x506>
    2df4:	0f 7e       	andi	r16, 0xEF	; 239
    2df6:	2a e0       	ldi	r18, 0x0A	; 10
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	1d c0       	rjmp	.+58     	; 0x2e36 <vfprintf+0x540>
    2dfc:	09 7f       	andi	r16, 0xF9	; 249
    2dfe:	8f 36       	cpi	r24, 0x6F	; 111
    2e00:	91 f0       	breq	.+36     	; 0x2e26 <vfprintf+0x530>
    2e02:	18 f4       	brcc	.+6      	; 0x2e0a <vfprintf+0x514>
    2e04:	88 35       	cpi	r24, 0x58	; 88
    2e06:	59 f0       	breq	.+22     	; 0x2e1e <vfprintf+0x528>
    2e08:	bc c0       	rjmp	.+376    	; 0x2f82 <vfprintf+0x68c>
    2e0a:	80 37       	cpi	r24, 0x70	; 112
    2e0c:	19 f0       	breq	.+6      	; 0x2e14 <vfprintf+0x51e>
    2e0e:	88 37       	cpi	r24, 0x78	; 120
    2e10:	11 f0       	breq	.+4      	; 0x2e16 <vfprintf+0x520>
    2e12:	b7 c0       	rjmp	.+366    	; 0x2f82 <vfprintf+0x68c>
    2e14:	00 61       	ori	r16, 0x10	; 16
    2e16:	04 ff       	sbrs	r16, 4
    2e18:	09 c0       	rjmp	.+18     	; 0x2e2c <vfprintf+0x536>
    2e1a:	04 60       	ori	r16, 0x04	; 4
    2e1c:	07 c0       	rjmp	.+14     	; 0x2e2c <vfprintf+0x536>
    2e1e:	94 fe       	sbrs	r9, 4
    2e20:	08 c0       	rjmp	.+16     	; 0x2e32 <vfprintf+0x53c>
    2e22:	06 60       	ori	r16, 0x06	; 6
    2e24:	06 c0       	rjmp	.+12     	; 0x2e32 <vfprintf+0x53c>
    2e26:	28 e0       	ldi	r18, 0x08	; 8
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <vfprintf+0x540>
    2e2c:	20 e1       	ldi	r18, 0x10	; 16
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <vfprintf+0x540>
    2e32:	20 e1       	ldi	r18, 0x10	; 16
    2e34:	32 e0       	ldi	r19, 0x02	; 2
    2e36:	56 01       	movw	r10, r12
    2e38:	07 ff       	sbrs	r16, 7
    2e3a:	09 c0       	rjmp	.+18     	; 0x2e4e <vfprintf+0x558>
    2e3c:	84 e0       	ldi	r24, 0x04	; 4
    2e3e:	a8 0e       	add	r10, r24
    2e40:	b1 1c       	adc	r11, r1
    2e42:	f6 01       	movw	r30, r12
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	08 c0       	rjmp	.+16     	; 0x2e5e <vfprintf+0x568>
    2e4e:	f2 e0       	ldi	r31, 0x02	; 2
    2e50:	af 0e       	add	r10, r31
    2e52:	b1 1c       	adc	r11, r1
    2e54:	f6 01       	movw	r30, r12
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a3 01       	movw	r20, r6
    2e60:	bc d2       	rcall	.+1400   	; 0x33da <__ultoa_invert>
    2e62:	c8 2e       	mov	r12, r24
    2e64:	c6 18       	sub	r12, r6
    2e66:	0f 77       	andi	r16, 0x7F	; 127
    2e68:	90 2e       	mov	r9, r16
    2e6a:	96 fe       	sbrs	r9, 6
    2e6c:	0b c0       	rjmp	.+22     	; 0x2e84 <vfprintf+0x58e>
    2e6e:	09 2d       	mov	r16, r9
    2e70:	0e 7f       	andi	r16, 0xFE	; 254
    2e72:	c1 16       	cp	r12, r17
    2e74:	50 f4       	brcc	.+20     	; 0x2e8a <vfprintf+0x594>
    2e76:	94 fe       	sbrs	r9, 4
    2e78:	0a c0       	rjmp	.+20     	; 0x2e8e <vfprintf+0x598>
    2e7a:	92 fc       	sbrc	r9, 2
    2e7c:	08 c0       	rjmp	.+16     	; 0x2e8e <vfprintf+0x598>
    2e7e:	09 2d       	mov	r16, r9
    2e80:	0e 7e       	andi	r16, 0xEE	; 238
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <vfprintf+0x598>
    2e84:	dc 2c       	mov	r13, r12
    2e86:	09 2d       	mov	r16, r9
    2e88:	03 c0       	rjmp	.+6      	; 0x2e90 <vfprintf+0x59a>
    2e8a:	dc 2c       	mov	r13, r12
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <vfprintf+0x59a>
    2e8e:	d1 2e       	mov	r13, r17
    2e90:	04 ff       	sbrs	r16, 4
    2e92:	0d c0       	rjmp	.+26     	; 0x2eae <vfprintf+0x5b8>
    2e94:	fe 01       	movw	r30, r28
    2e96:	ec 0d       	add	r30, r12
    2e98:	f1 1d       	adc	r31, r1
    2e9a:	80 81       	ld	r24, Z
    2e9c:	80 33       	cpi	r24, 0x30	; 48
    2e9e:	11 f4       	brne	.+4      	; 0x2ea4 <vfprintf+0x5ae>
    2ea0:	09 7e       	andi	r16, 0xE9	; 233
    2ea2:	09 c0       	rjmp	.+18     	; 0x2eb6 <vfprintf+0x5c0>
    2ea4:	02 ff       	sbrs	r16, 2
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <vfprintf+0x5be>
    2ea8:	d3 94       	inc	r13
    2eaa:	d3 94       	inc	r13
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <vfprintf+0x5c0>
    2eae:	80 2f       	mov	r24, r16
    2eb0:	86 78       	andi	r24, 0x86	; 134
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <vfprintf+0x5c0>
    2eb4:	d3 94       	inc	r13
    2eb6:	03 fd       	sbrc	r16, 3
    2eb8:	10 c0       	rjmp	.+32     	; 0x2eda <vfprintf+0x5e4>
    2eba:	00 ff       	sbrs	r16, 0
    2ebc:	06 c0       	rjmp	.+12     	; 0x2eca <vfprintf+0x5d4>
    2ebe:	1c 2d       	mov	r17, r12
    2ec0:	d5 14       	cp	r13, r5
    2ec2:	78 f4       	brcc	.+30     	; 0x2ee2 <vfprintf+0x5ec>
    2ec4:	15 0d       	add	r17, r5
    2ec6:	1d 19       	sub	r17, r13
    2ec8:	0c c0       	rjmp	.+24     	; 0x2ee2 <vfprintf+0x5ec>
    2eca:	d5 14       	cp	r13, r5
    2ecc:	50 f4       	brcc	.+20     	; 0x2ee2 <vfprintf+0x5ec>
    2ece:	b7 01       	movw	r22, r14
    2ed0:	80 e2       	ldi	r24, 0x20	; 32
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	03 d2       	rcall	.+1030   	; 0x32dc <fputc>
    2ed6:	d3 94       	inc	r13
    2ed8:	f8 cf       	rjmp	.-16     	; 0x2eca <vfprintf+0x5d4>
    2eda:	d5 14       	cp	r13, r5
    2edc:	10 f4       	brcc	.+4      	; 0x2ee2 <vfprintf+0x5ec>
    2ede:	5d 18       	sub	r5, r13
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <vfprintf+0x5ee>
    2ee2:	51 2c       	mov	r5, r1
    2ee4:	04 ff       	sbrs	r16, 4
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <vfprintf+0x610>
    2ee8:	b7 01       	movw	r22, r14
    2eea:	80 e3       	ldi	r24, 0x30	; 48
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	f6 d1       	rcall	.+1004   	; 0x32dc <fputc>
    2ef0:	02 ff       	sbrs	r16, 2
    2ef2:	16 c0       	rjmp	.+44     	; 0x2f20 <vfprintf+0x62a>
    2ef4:	01 fd       	sbrc	r16, 1
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <vfprintf+0x608>
    2ef8:	88 e7       	ldi	r24, 0x78	; 120
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <vfprintf+0x60c>
    2efe:	88 e5       	ldi	r24, 0x58	; 88
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	b7 01       	movw	r22, r14
    2f04:	0c c0       	rjmp	.+24     	; 0x2f1e <vfprintf+0x628>
    2f06:	80 2f       	mov	r24, r16
    2f08:	86 78       	andi	r24, 0x86	; 134
    2f0a:	51 f0       	breq	.+20     	; 0x2f20 <vfprintf+0x62a>
    2f0c:	01 ff       	sbrs	r16, 1
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <vfprintf+0x61e>
    2f10:	8b e2       	ldi	r24, 0x2B	; 43
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <vfprintf+0x620>
    2f14:	80 e2       	ldi	r24, 0x20	; 32
    2f16:	07 fd       	sbrc	r16, 7
    2f18:	8d e2       	ldi	r24, 0x2D	; 45
    2f1a:	b7 01       	movw	r22, r14
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	de d1       	rcall	.+956    	; 0x32dc <fputc>
    2f20:	c1 16       	cp	r12, r17
    2f22:	30 f4       	brcc	.+12     	; 0x2f30 <vfprintf+0x63a>
    2f24:	b7 01       	movw	r22, r14
    2f26:	80 e3       	ldi	r24, 0x30	; 48
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	d8 d1       	rcall	.+944    	; 0x32dc <fputc>
    2f2c:	11 50       	subi	r17, 0x01	; 1
    2f2e:	f8 cf       	rjmp	.-16     	; 0x2f20 <vfprintf+0x62a>
    2f30:	ca 94       	dec	r12
    2f32:	f3 01       	movw	r30, r6
    2f34:	ec 0d       	add	r30, r12
    2f36:	f1 1d       	adc	r31, r1
    2f38:	80 81       	ld	r24, Z
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	ce d1       	rcall	.+924    	; 0x32dc <fputc>
    2f40:	c1 10       	cpse	r12, r1
    2f42:	f6 cf       	rjmp	.-20     	; 0x2f30 <vfprintf+0x63a>
    2f44:	15 c0       	rjmp	.+42     	; 0x2f70 <vfprintf+0x67a>
    2f46:	f4 e0       	ldi	r31, 0x04	; 4
    2f48:	f5 15       	cp	r31, r5
    2f4a:	50 f5       	brcc	.+84     	; 0x2fa0 <vfprintf+0x6aa>
    2f4c:	84 e0       	ldi	r24, 0x04	; 4
    2f4e:	58 1a       	sub	r5, r24
    2f50:	93 fe       	sbrs	r9, 3
    2f52:	1e c0       	rjmp	.+60     	; 0x2f90 <vfprintf+0x69a>
    2f54:	01 11       	cpse	r16, r1
    2f56:	25 c0       	rjmp	.+74     	; 0x2fa2 <vfprintf+0x6ac>
    2f58:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f5a:	23 ff       	sbrs	r18, 3
    2f5c:	27 c0       	rjmp	.+78     	; 0x2fac <vfprintf+0x6b6>
    2f5e:	00 e1       	ldi	r16, 0x10	; 16
    2f60:	12 e0       	ldi	r17, 0x02	; 2
    2f62:	39 2d       	mov	r19, r9
    2f64:	30 71       	andi	r19, 0x10	; 16
    2f66:	93 2e       	mov	r9, r19
    2f68:	f8 01       	movw	r30, r16
    2f6a:	84 91       	lpm	r24, Z
    2f6c:	81 11       	cpse	r24, r1
    2f6e:	21 c0       	rjmp	.+66     	; 0x2fb2 <vfprintf+0x6bc>
    2f70:	55 20       	and	r5, r5
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <vfprintf+0x680>
    2f74:	fc cc       	rjmp	.-1544   	; 0x296e <vfprintf+0x78>
    2f76:	b7 01       	movw	r22, r14
    2f78:	80 e2       	ldi	r24, 0x20	; 32
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	af d1       	rcall	.+862    	; 0x32dc <fputc>
    2f7e:	5a 94       	dec	r5
    2f80:	f7 cf       	rjmp	.-18     	; 0x2f70 <vfprintf+0x67a>
    2f82:	f7 01       	movw	r30, r14
    2f84:	86 81       	ldd	r24, Z+6	; 0x06
    2f86:	97 81       	ldd	r25, Z+7	; 0x07
    2f88:	23 c0       	rjmp	.+70     	; 0x2fd0 <vfprintf+0x6da>
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	9f ef       	ldi	r25, 0xFF	; 255
    2f8e:	20 c0       	rjmp	.+64     	; 0x2fd0 <vfprintf+0x6da>
    2f90:	b7 01       	movw	r22, r14
    2f92:	80 e2       	ldi	r24, 0x20	; 32
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	a2 d1       	rcall	.+836    	; 0x32dc <fputc>
    2f98:	5a 94       	dec	r5
    2f9a:	51 10       	cpse	r5, r1
    2f9c:	f9 cf       	rjmp	.-14     	; 0x2f90 <vfprintf+0x69a>
    2f9e:	da cf       	rjmp	.-76     	; 0x2f54 <vfprintf+0x65e>
    2fa0:	51 2c       	mov	r5, r1
    2fa2:	b7 01       	movw	r22, r14
    2fa4:	80 2f       	mov	r24, r16
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	99 d1       	rcall	.+818    	; 0x32dc <fputc>
    2faa:	d6 cf       	rjmp	.-84     	; 0x2f58 <vfprintf+0x662>
    2fac:	04 e1       	ldi	r16, 0x14	; 20
    2fae:	12 e0       	ldi	r17, 0x02	; 2
    2fb0:	d8 cf       	rjmp	.-80     	; 0x2f62 <vfprintf+0x66c>
    2fb2:	91 10       	cpse	r9, r1
    2fb4:	80 52       	subi	r24, 0x20	; 32
    2fb6:	b7 01       	movw	r22, r14
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	90 d1       	rcall	.+800    	; 0x32dc <fputc>
    2fbc:	0f 5f       	subi	r16, 0xFF	; 255
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	d3 cf       	rjmp	.-90     	; 0x2f68 <vfprintf+0x672>
    2fc2:	23 e0       	ldi	r18, 0x03	; 3
    2fc4:	25 15       	cp	r18, r5
    2fc6:	10 f4       	brcc	.+4      	; 0x2fcc <vfprintf+0x6d6>
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	c1 cf       	rjmp	.-126    	; 0x2f4e <vfprintf+0x658>
    2fcc:	51 2c       	mov	r5, r1
    2fce:	c4 cf       	rjmp	.-120    	; 0x2f58 <vfprintf+0x662>
    2fd0:	60 96       	adiw	r28, 0x10	; 16
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	7f 90       	pop	r7
    2ff0:	6f 90       	pop	r6
    2ff2:	5f 90       	pop	r5
    2ff4:	4f 90       	pop	r4
    2ff6:	3f 90       	pop	r3
    2ff8:	2f 90       	pop	r2
    2ffa:	08 95       	ret

00002ffc <__udivmodsi4>:
    2ffc:	a1 e2       	ldi	r26, 0x21	; 33
    2ffe:	1a 2e       	mov	r1, r26
    3000:	aa 1b       	sub	r26, r26
    3002:	bb 1b       	sub	r27, r27
    3004:	fd 01       	movw	r30, r26
    3006:	0d c0       	rjmp	.+26     	; 0x3022 <__udivmodsi4_ep>

00003008 <__udivmodsi4_loop>:
    3008:	aa 1f       	adc	r26, r26
    300a:	bb 1f       	adc	r27, r27
    300c:	ee 1f       	adc	r30, r30
    300e:	ff 1f       	adc	r31, r31
    3010:	a2 17       	cp	r26, r18
    3012:	b3 07       	cpc	r27, r19
    3014:	e4 07       	cpc	r30, r20
    3016:	f5 07       	cpc	r31, r21
    3018:	20 f0       	brcs	.+8      	; 0x3022 <__udivmodsi4_ep>
    301a:	a2 1b       	sub	r26, r18
    301c:	b3 0b       	sbc	r27, r19
    301e:	e4 0b       	sbc	r30, r20
    3020:	f5 0b       	sbc	r31, r21

00003022 <__udivmodsi4_ep>:
    3022:	66 1f       	adc	r22, r22
    3024:	77 1f       	adc	r23, r23
    3026:	88 1f       	adc	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	1a 94       	dec	r1
    302c:	69 f7       	brne	.-38     	; 0x3008 <__udivmodsi4_loop>
    302e:	60 95       	com	r22
    3030:	70 95       	com	r23
    3032:	80 95       	com	r24
    3034:	90 95       	com	r25
    3036:	9b 01       	movw	r18, r22
    3038:	ac 01       	movw	r20, r24
    303a:	bd 01       	movw	r22, r26
    303c:	cf 01       	movw	r24, r30
    303e:	08 95       	ret

00003040 <__tablejump2__>:
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	88 1f       	adc	r24, r24
    3046:	8b bf       	out	0x3b, r24	; 59
    3048:	07 90       	elpm	r0, Z+
    304a:	f6 91       	elpm	r31, Z
    304c:	e0 2d       	mov	r30, r0
    304e:	1b be       	out	0x3b, r1	; 59
    3050:	19 94       	eijmp

00003052 <__ftoa_engine>:
    3052:	28 30       	cpi	r18, 0x08	; 8
    3054:	08 f0       	brcs	.+2      	; 0x3058 <__ftoa_engine+0x6>
    3056:	27 e0       	ldi	r18, 0x07	; 7
    3058:	33 27       	eor	r19, r19
    305a:	da 01       	movw	r26, r20
    305c:	99 0f       	add	r25, r25
    305e:	31 1d       	adc	r19, r1
    3060:	87 fd       	sbrc	r24, 7
    3062:	91 60       	ori	r25, 0x01	; 1
    3064:	00 96       	adiw	r24, 0x00	; 0
    3066:	61 05       	cpc	r22, r1
    3068:	71 05       	cpc	r23, r1
    306a:	39 f4       	brne	.+14     	; 0x307a <__ftoa_engine+0x28>
    306c:	32 60       	ori	r19, 0x02	; 2
    306e:	2e 5f       	subi	r18, 0xFE	; 254
    3070:	3d 93       	st	X+, r19
    3072:	30 e3       	ldi	r19, 0x30	; 48
    3074:	2a 95       	dec	r18
    3076:	e1 f7       	brne	.-8      	; 0x3070 <__ftoa_engine+0x1e>
    3078:	08 95       	ret
    307a:	9f 3f       	cpi	r25, 0xFF	; 255
    307c:	30 f0       	brcs	.+12     	; 0x308a <__ftoa_engine+0x38>
    307e:	80 38       	cpi	r24, 0x80	; 128
    3080:	71 05       	cpc	r23, r1
    3082:	61 05       	cpc	r22, r1
    3084:	09 f0       	breq	.+2      	; 0x3088 <__ftoa_engine+0x36>
    3086:	3c 5f       	subi	r19, 0xFC	; 252
    3088:	3c 5f       	subi	r19, 0xFC	; 252
    308a:	3d 93       	st	X+, r19
    308c:	91 30       	cpi	r25, 0x01	; 1
    308e:	08 f0       	brcs	.+2      	; 0x3092 <__ftoa_engine+0x40>
    3090:	80 68       	ori	r24, 0x80	; 128
    3092:	91 1d       	adc	r25, r1
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	1f 93       	push	r17
    309a:	0f 93       	push	r16
    309c:	ff 92       	push	r15
    309e:	ef 92       	push	r14
    30a0:	19 2f       	mov	r17, r25
    30a2:	98 7f       	andi	r25, 0xF8	; 248
    30a4:	96 95       	lsr	r25
    30a6:	e9 2f       	mov	r30, r25
    30a8:	96 95       	lsr	r25
    30aa:	96 95       	lsr	r25
    30ac:	e9 0f       	add	r30, r25
    30ae:	ff 27       	eor	r31, r31
    30b0:	ee 58       	subi	r30, 0x8E	; 142
    30b2:	fd 4f       	sbci	r31, 0xFD	; 253
    30b4:	99 27       	eor	r25, r25
    30b6:	33 27       	eor	r19, r19
    30b8:	ee 24       	eor	r14, r14
    30ba:	ff 24       	eor	r15, r15
    30bc:	a7 01       	movw	r20, r14
    30be:	e7 01       	movw	r28, r14
    30c0:	05 90       	lpm	r0, Z+
    30c2:	08 94       	sec
    30c4:	07 94       	ror	r0
    30c6:	28 f4       	brcc	.+10     	; 0x30d2 <__ftoa_engine+0x80>
    30c8:	36 0f       	add	r19, r22
    30ca:	e7 1e       	adc	r14, r23
    30cc:	f8 1e       	adc	r15, r24
    30ce:	49 1f       	adc	r20, r25
    30d0:	51 1d       	adc	r21, r1
    30d2:	66 0f       	add	r22, r22
    30d4:	77 1f       	adc	r23, r23
    30d6:	88 1f       	adc	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	06 94       	lsr	r0
    30dc:	a1 f7       	brne	.-24     	; 0x30c6 <__ftoa_engine+0x74>
    30de:	05 90       	lpm	r0, Z+
    30e0:	07 94       	ror	r0
    30e2:	28 f4       	brcc	.+10     	; 0x30ee <__ftoa_engine+0x9c>
    30e4:	e7 0e       	add	r14, r23
    30e6:	f8 1e       	adc	r15, r24
    30e8:	49 1f       	adc	r20, r25
    30ea:	56 1f       	adc	r21, r22
    30ec:	c1 1d       	adc	r28, r1
    30ee:	77 0f       	add	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	66 1f       	adc	r22, r22
    30f6:	06 94       	lsr	r0
    30f8:	a1 f7       	brne	.-24     	; 0x30e2 <__ftoa_engine+0x90>
    30fa:	05 90       	lpm	r0, Z+
    30fc:	07 94       	ror	r0
    30fe:	28 f4       	brcc	.+10     	; 0x310a <__ftoa_engine+0xb8>
    3100:	f8 0e       	add	r15, r24
    3102:	49 1f       	adc	r20, r25
    3104:	56 1f       	adc	r21, r22
    3106:	c7 1f       	adc	r28, r23
    3108:	d1 1d       	adc	r29, r1
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	66 1f       	adc	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	06 94       	lsr	r0
    3114:	a1 f7       	brne	.-24     	; 0x30fe <__ftoa_engine+0xac>
    3116:	05 90       	lpm	r0, Z+
    3118:	07 94       	ror	r0
    311a:	20 f4       	brcc	.+8      	; 0x3124 <__ftoa_engine+0xd2>
    311c:	49 0f       	add	r20, r25
    311e:	56 1f       	adc	r21, r22
    3120:	c7 1f       	adc	r28, r23
    3122:	d8 1f       	adc	r29, r24
    3124:	99 0f       	add	r25, r25
    3126:	66 1f       	adc	r22, r22
    3128:	77 1f       	adc	r23, r23
    312a:	88 1f       	adc	r24, r24
    312c:	06 94       	lsr	r0
    312e:	a9 f7       	brne	.-22     	; 0x311a <__ftoa_engine+0xc8>
    3130:	84 91       	lpm	r24, Z
    3132:	10 95       	com	r17
    3134:	17 70       	andi	r17, 0x07	; 7
    3136:	41 f0       	breq	.+16     	; 0x3148 <__ftoa_engine+0xf6>
    3138:	d6 95       	lsr	r29
    313a:	c7 95       	ror	r28
    313c:	57 95       	ror	r21
    313e:	47 95       	ror	r20
    3140:	f7 94       	ror	r15
    3142:	e7 94       	ror	r14
    3144:	1a 95       	dec	r17
    3146:	c1 f7       	brne	.-16     	; 0x3138 <__ftoa_engine+0xe6>
    3148:	e8 e1       	ldi	r30, 0x18	; 24
    314a:	f2 e0       	ldi	r31, 0x02	; 2
    314c:	68 94       	set
    314e:	15 90       	lpm	r1, Z+
    3150:	15 91       	lpm	r17, Z+
    3152:	35 91       	lpm	r19, Z+
    3154:	65 91       	lpm	r22, Z+
    3156:	95 91       	lpm	r25, Z+
    3158:	05 90       	lpm	r0, Z+
    315a:	7f e2       	ldi	r23, 0x2F	; 47
    315c:	73 95       	inc	r23
    315e:	e1 18       	sub	r14, r1
    3160:	f1 0a       	sbc	r15, r17
    3162:	43 0b       	sbc	r20, r19
    3164:	56 0b       	sbc	r21, r22
    3166:	c9 0b       	sbc	r28, r25
    3168:	d0 09       	sbc	r29, r0
    316a:	c0 f7       	brcc	.-16     	; 0x315c <__ftoa_engine+0x10a>
    316c:	e1 0c       	add	r14, r1
    316e:	f1 1e       	adc	r15, r17
    3170:	43 1f       	adc	r20, r19
    3172:	56 1f       	adc	r21, r22
    3174:	c9 1f       	adc	r28, r25
    3176:	d0 1d       	adc	r29, r0
    3178:	7e f4       	brtc	.+30     	; 0x3198 <__ftoa_engine+0x146>
    317a:	70 33       	cpi	r23, 0x30	; 48
    317c:	11 f4       	brne	.+4      	; 0x3182 <__ftoa_engine+0x130>
    317e:	8a 95       	dec	r24
    3180:	e6 cf       	rjmp	.-52     	; 0x314e <__ftoa_engine+0xfc>
    3182:	e8 94       	clt
    3184:	01 50       	subi	r16, 0x01	; 1
    3186:	30 f0       	brcs	.+12     	; 0x3194 <__ftoa_engine+0x142>
    3188:	08 0f       	add	r16, r24
    318a:	0a f4       	brpl	.+2      	; 0x318e <__ftoa_engine+0x13c>
    318c:	00 27       	eor	r16, r16
    318e:	02 17       	cp	r16, r18
    3190:	08 f4       	brcc	.+2      	; 0x3194 <__ftoa_engine+0x142>
    3192:	20 2f       	mov	r18, r16
    3194:	23 95       	inc	r18
    3196:	02 2f       	mov	r16, r18
    3198:	7a 33       	cpi	r23, 0x3A	; 58
    319a:	28 f0       	brcs	.+10     	; 0x31a6 <__ftoa_engine+0x154>
    319c:	79 e3       	ldi	r23, 0x39	; 57
    319e:	7d 93       	st	X+, r23
    31a0:	2a 95       	dec	r18
    31a2:	e9 f7       	brne	.-6      	; 0x319e <__ftoa_engine+0x14c>
    31a4:	10 c0       	rjmp	.+32     	; 0x31c6 <__ftoa_engine+0x174>
    31a6:	7d 93       	st	X+, r23
    31a8:	2a 95       	dec	r18
    31aa:	89 f6       	brne	.-94     	; 0x314e <__ftoa_engine+0xfc>
    31ac:	06 94       	lsr	r0
    31ae:	97 95       	ror	r25
    31b0:	67 95       	ror	r22
    31b2:	37 95       	ror	r19
    31b4:	17 95       	ror	r17
    31b6:	17 94       	ror	r1
    31b8:	e1 18       	sub	r14, r1
    31ba:	f1 0a       	sbc	r15, r17
    31bc:	43 0b       	sbc	r20, r19
    31be:	56 0b       	sbc	r21, r22
    31c0:	c9 0b       	sbc	r28, r25
    31c2:	d0 09       	sbc	r29, r0
    31c4:	98 f0       	brcs	.+38     	; 0x31ec <__ftoa_engine+0x19a>
    31c6:	23 95       	inc	r18
    31c8:	7e 91       	ld	r23, -X
    31ca:	73 95       	inc	r23
    31cc:	7a 33       	cpi	r23, 0x3A	; 58
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <__ftoa_engine+0x180>
    31d0:	70 e3       	ldi	r23, 0x30	; 48
    31d2:	7c 93       	st	X, r23
    31d4:	20 13       	cpse	r18, r16
    31d6:	b8 f7       	brcc	.-18     	; 0x31c6 <__ftoa_engine+0x174>
    31d8:	7e 91       	ld	r23, -X
    31da:	70 61       	ori	r23, 0x10	; 16
    31dc:	7d 93       	st	X+, r23
    31de:	30 f0       	brcs	.+12     	; 0x31ec <__ftoa_engine+0x19a>
    31e0:	83 95       	inc	r24
    31e2:	71 e3       	ldi	r23, 0x31	; 49
    31e4:	7d 93       	st	X+, r23
    31e6:	70 e3       	ldi	r23, 0x30	; 48
    31e8:	2a 95       	dec	r18
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <__ftoa_engine+0x192>
    31ec:	11 24       	eor	r1, r1
    31ee:	ef 90       	pop	r14
    31f0:	ff 90       	pop	r15
    31f2:	0f 91       	pop	r16
    31f4:	1f 91       	pop	r17
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	99 27       	eor	r25, r25
    31fc:	87 fd       	sbrc	r24, 7
    31fe:	90 95       	com	r25
    3200:	08 95       	ret

00003202 <strnlen_P>:
    3202:	fc 01       	movw	r30, r24
    3204:	05 90       	lpm	r0, Z+
    3206:	61 50       	subi	r22, 0x01	; 1
    3208:	70 40       	sbci	r23, 0x00	; 0
    320a:	01 10       	cpse	r0, r1
    320c:	d8 f7       	brcc	.-10     	; 0x3204 <strnlen_P+0x2>
    320e:	80 95       	com	r24
    3210:	90 95       	com	r25
    3212:	8e 0f       	add	r24, r30
    3214:	9f 1f       	adc	r25, r31
    3216:	08 95       	ret

00003218 <memcmp>:
    3218:	fb 01       	movw	r30, r22
    321a:	dc 01       	movw	r26, r24
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <memcmp+0xe>
    321e:	8d 91       	ld	r24, X+
    3220:	01 90       	ld	r0, Z+
    3222:	80 19       	sub	r24, r0
    3224:	21 f4       	brne	.+8      	; 0x322e <memcmp+0x16>
    3226:	41 50       	subi	r20, 0x01	; 1
    3228:	50 40       	sbci	r21, 0x00	; 0
    322a:	c8 f7       	brcc	.-14     	; 0x321e <memcmp+0x6>
    322c:	88 1b       	sub	r24, r24
    322e:	99 0b       	sbc	r25, r25
    3230:	08 95       	ret

00003232 <strnlen>:
    3232:	fc 01       	movw	r30, r24
    3234:	61 50       	subi	r22, 0x01	; 1
    3236:	70 40       	sbci	r23, 0x00	; 0
    3238:	01 90       	ld	r0, Z+
    323a:	01 10       	cpse	r0, r1
    323c:	d8 f7       	brcc	.-10     	; 0x3234 <strnlen+0x2>
    323e:	80 95       	com	r24
    3240:	90 95       	com	r25
    3242:	8e 0f       	add	r24, r30
    3244:	9f 1f       	adc	r25, r31
    3246:	08 95       	ret

00003248 <fdevopen>:
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	31 f4       	brne	.+12     	; 0x3260 <fdevopen+0x18>
    3254:	61 15       	cp	r22, r1
    3256:	71 05       	cpc	r23, r1
    3258:	19 f4       	brne	.+6      	; 0x3260 <fdevopen+0x18>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	39 c0       	rjmp	.+114    	; 0x32d2 <fdevopen+0x8a>
    3260:	8b 01       	movw	r16, r22
    3262:	ec 01       	movw	r28, r24
    3264:	6e e0       	ldi	r22, 0x0E	; 14
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	14 d1       	rcall	.+552    	; 0x3496 <calloc>
    326e:	fc 01       	movw	r30, r24
    3270:	89 2b       	or	r24, r25
    3272:	99 f3       	breq	.-26     	; 0x325a <fdevopen+0x12>
    3274:	80 e8       	ldi	r24, 0x80	; 128
    3276:	83 83       	std	Z+3, r24	; 0x03
    3278:	01 15       	cp	r16, r1
    327a:	11 05       	cpc	r17, r1
    327c:	71 f0       	breq	.+28     	; 0x329a <fdevopen+0x52>
    327e:	02 87       	std	Z+10, r16	; 0x0a
    3280:	13 87       	std	Z+11, r17	; 0x0b
    3282:	81 e8       	ldi	r24, 0x81	; 129
    3284:	83 83       	std	Z+3, r24	; 0x03
    3286:	80 91 17 22 	lds	r24, 0x2217	; 0x802217 <__iob>
    328a:	90 91 18 22 	lds	r25, 0x2218	; 0x802218 <__iob+0x1>
    328e:	89 2b       	or	r24, r25
    3290:	21 f4       	brne	.+8      	; 0x329a <fdevopen+0x52>
    3292:	e0 93 17 22 	sts	0x2217, r30	; 0x802217 <__iob>
    3296:	f0 93 18 22 	sts	0x2218, r31	; 0x802218 <__iob+0x1>
    329a:	20 97       	sbiw	r28, 0x00	; 0
    329c:	c9 f0       	breq	.+50     	; 0x32d0 <fdevopen+0x88>
    329e:	c0 87       	std	Z+8, r28	; 0x08
    32a0:	d1 87       	std	Z+9, r29	; 0x09
    32a2:	83 81       	ldd	r24, Z+3	; 0x03
    32a4:	82 60       	ori	r24, 0x02	; 2
    32a6:	83 83       	std	Z+3, r24	; 0x03
    32a8:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <__iob+0x2>
    32ac:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <__iob+0x3>
    32b0:	89 2b       	or	r24, r25
    32b2:	71 f4       	brne	.+28     	; 0x32d0 <fdevopen+0x88>
    32b4:	e0 93 19 22 	sts	0x2219, r30	; 0x802219 <__iob+0x2>
    32b8:	f0 93 1a 22 	sts	0x221A, r31	; 0x80221a <__iob+0x3>
    32bc:	80 91 1b 22 	lds	r24, 0x221B	; 0x80221b <__iob+0x4>
    32c0:	90 91 1c 22 	lds	r25, 0x221C	; 0x80221c <__iob+0x5>
    32c4:	89 2b       	or	r24, r25
    32c6:	21 f4       	brne	.+8      	; 0x32d0 <fdevopen+0x88>
    32c8:	e0 93 1b 22 	sts	0x221B, r30	; 0x80221b <__iob+0x4>
    32cc:	f0 93 1c 22 	sts	0x221C, r31	; 0x80221c <__iob+0x5>
    32d0:	cf 01       	movw	r24, r30
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	08 95       	ret

000032dc <fputc>:
    32dc:	0f 93       	push	r16
    32de:	1f 93       	push	r17
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	fb 01       	movw	r30, r22
    32e6:	23 81       	ldd	r18, Z+3	; 0x03
    32e8:	21 fd       	sbrc	r18, 1
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <fputc+0x16>
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	9f ef       	ldi	r25, 0xFF	; 255
    32f0:	2c c0       	rjmp	.+88     	; 0x334a <fputc+0x6e>
    32f2:	22 ff       	sbrs	r18, 2
    32f4:	16 c0       	rjmp	.+44     	; 0x3322 <fputc+0x46>
    32f6:	46 81       	ldd	r20, Z+6	; 0x06
    32f8:	57 81       	ldd	r21, Z+7	; 0x07
    32fa:	24 81       	ldd	r18, Z+4	; 0x04
    32fc:	35 81       	ldd	r19, Z+5	; 0x05
    32fe:	42 17       	cp	r20, r18
    3300:	53 07       	cpc	r21, r19
    3302:	44 f4       	brge	.+16     	; 0x3314 <fputc+0x38>
    3304:	a0 81       	ld	r26, Z
    3306:	b1 81       	ldd	r27, Z+1	; 0x01
    3308:	9d 01       	movw	r18, r26
    330a:	2f 5f       	subi	r18, 0xFF	; 255
    330c:	3f 4f       	sbci	r19, 0xFF	; 255
    330e:	20 83       	st	Z, r18
    3310:	31 83       	std	Z+1, r19	; 0x01
    3312:	8c 93       	st	X, r24
    3314:	26 81       	ldd	r18, Z+6	; 0x06
    3316:	37 81       	ldd	r19, Z+7	; 0x07
    3318:	2f 5f       	subi	r18, 0xFF	; 255
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	26 83       	std	Z+6, r18	; 0x06
    331e:	37 83       	std	Z+7, r19	; 0x07
    3320:	14 c0       	rjmp	.+40     	; 0x334a <fputc+0x6e>
    3322:	8b 01       	movw	r16, r22
    3324:	ec 01       	movw	r28, r24
    3326:	fb 01       	movw	r30, r22
    3328:	00 84       	ldd	r0, Z+8	; 0x08
    332a:	f1 85       	ldd	r31, Z+9	; 0x09
    332c:	e0 2d       	mov	r30, r0
    332e:	19 95       	eicall
    3330:	89 2b       	or	r24, r25
    3332:	e1 f6       	brne	.-72     	; 0x32ec <fputc+0x10>
    3334:	d8 01       	movw	r26, r16
    3336:	16 96       	adiw	r26, 0x06	; 6
    3338:	8d 91       	ld	r24, X+
    333a:	9c 91       	ld	r25, X
    333c:	17 97       	sbiw	r26, 0x07	; 7
    333e:	01 96       	adiw	r24, 0x01	; 1
    3340:	16 96       	adiw	r26, 0x06	; 6
    3342:	8d 93       	st	X+, r24
    3344:	9c 93       	st	X, r25
    3346:	17 97       	sbiw	r26, 0x07	; 7
    3348:	ce 01       	movw	r24, r28
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	08 95       	ret

00003354 <printf>:
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	ae 01       	movw	r20, r28
    335e:	4a 5f       	subi	r20, 0xFA	; 250
    3360:	5f 4f       	sbci	r21, 0xFF	; 255
    3362:	fa 01       	movw	r30, r20
    3364:	61 91       	ld	r22, Z+
    3366:	71 91       	ld	r23, Z+
    3368:	af 01       	movw	r20, r30
    336a:	80 91 19 22 	lds	r24, 0x2219	; 0x802219 <__iob+0x2>
    336e:	90 91 1a 22 	lds	r25, 0x221A	; 0x80221a <__iob+0x3>
    3372:	c1 da       	rcall	.-2686   	; 0x28f6 <vfprintf>
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	08 95       	ret

0000337a <puts>:
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	e0 91 19 22 	lds	r30, 0x2219	; 0x802219 <__iob+0x2>
    3386:	f0 91 1a 22 	lds	r31, 0x221A	; 0x80221a <__iob+0x3>
    338a:	23 81       	ldd	r18, Z+3	; 0x03
    338c:	21 ff       	sbrs	r18, 1
    338e:	1b c0       	rjmp	.+54     	; 0x33c6 <puts+0x4c>
    3390:	8c 01       	movw	r16, r24
    3392:	d0 e0       	ldi	r29, 0x00	; 0
    3394:	c0 e0       	ldi	r28, 0x00	; 0
    3396:	f8 01       	movw	r30, r16
    3398:	81 91       	ld	r24, Z+
    339a:	8f 01       	movw	r16, r30
    339c:	60 91 19 22 	lds	r22, 0x2219	; 0x802219 <__iob+0x2>
    33a0:	70 91 1a 22 	lds	r23, 0x221A	; 0x80221a <__iob+0x3>
    33a4:	db 01       	movw	r26, r22
    33a6:	18 96       	adiw	r26, 0x08	; 8
    33a8:	ed 91       	ld	r30, X+
    33aa:	fc 91       	ld	r31, X
    33ac:	19 97       	sbiw	r26, 0x09	; 9
    33ae:	88 23       	and	r24, r24
    33b0:	31 f0       	breq	.+12     	; 0x33be <puts+0x44>
    33b2:	19 95       	eicall
    33b4:	89 2b       	or	r24, r25
    33b6:	79 f3       	breq	.-34     	; 0x3396 <puts+0x1c>
    33b8:	df ef       	ldi	r29, 0xFF	; 255
    33ba:	cf ef       	ldi	r28, 0xFF	; 255
    33bc:	ec cf       	rjmp	.-40     	; 0x3396 <puts+0x1c>
    33be:	8a e0       	ldi	r24, 0x0A	; 10
    33c0:	19 95       	eicall
    33c2:	89 2b       	or	r24, r25
    33c4:	19 f0       	breq	.+6      	; 0x33cc <puts+0x52>
    33c6:	8f ef       	ldi	r24, 0xFF	; 255
    33c8:	9f ef       	ldi	r25, 0xFF	; 255
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <puts+0x56>
    33cc:	8d 2f       	mov	r24, r29
    33ce:	9c 2f       	mov	r25, r28
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	08 95       	ret

000033da <__ultoa_invert>:
    33da:	fa 01       	movw	r30, r20
    33dc:	aa 27       	eor	r26, r26
    33de:	28 30       	cpi	r18, 0x08	; 8
    33e0:	51 f1       	breq	.+84     	; 0x3436 <__ultoa_invert+0x5c>
    33e2:	20 31       	cpi	r18, 0x10	; 16
    33e4:	81 f1       	breq	.+96     	; 0x3446 <__ultoa_invert+0x6c>
    33e6:	e8 94       	clt
    33e8:	6f 93       	push	r22
    33ea:	6e 7f       	andi	r22, 0xFE	; 254
    33ec:	6e 5f       	subi	r22, 0xFE	; 254
    33ee:	7f 4f       	sbci	r23, 0xFF	; 255
    33f0:	8f 4f       	sbci	r24, 0xFF	; 255
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	af 4f       	sbci	r26, 0xFF	; 255
    33f6:	b1 e0       	ldi	r27, 0x01	; 1
    33f8:	3e d0       	rcall	.+124    	; 0x3476 <__ultoa_invert+0x9c>
    33fa:	b4 e0       	ldi	r27, 0x04	; 4
    33fc:	3c d0       	rcall	.+120    	; 0x3476 <__ultoa_invert+0x9c>
    33fe:	67 0f       	add	r22, r23
    3400:	78 1f       	adc	r23, r24
    3402:	89 1f       	adc	r24, r25
    3404:	9a 1f       	adc	r25, r26
    3406:	a1 1d       	adc	r26, r1
    3408:	68 0f       	add	r22, r24
    340a:	79 1f       	adc	r23, r25
    340c:	8a 1f       	adc	r24, r26
    340e:	91 1d       	adc	r25, r1
    3410:	a1 1d       	adc	r26, r1
    3412:	6a 0f       	add	r22, r26
    3414:	71 1d       	adc	r23, r1
    3416:	81 1d       	adc	r24, r1
    3418:	91 1d       	adc	r25, r1
    341a:	a1 1d       	adc	r26, r1
    341c:	20 d0       	rcall	.+64     	; 0x345e <__ultoa_invert+0x84>
    341e:	09 f4       	brne	.+2      	; 0x3422 <__ultoa_invert+0x48>
    3420:	68 94       	set
    3422:	3f 91       	pop	r19
    3424:	2a e0       	ldi	r18, 0x0A	; 10
    3426:	26 9f       	mul	r18, r22
    3428:	11 24       	eor	r1, r1
    342a:	30 19       	sub	r19, r0
    342c:	30 5d       	subi	r19, 0xD0	; 208
    342e:	31 93       	st	Z+, r19
    3430:	de f6       	brtc	.-74     	; 0x33e8 <__ultoa_invert+0xe>
    3432:	cf 01       	movw	r24, r30
    3434:	08 95       	ret
    3436:	46 2f       	mov	r20, r22
    3438:	47 70       	andi	r20, 0x07	; 7
    343a:	40 5d       	subi	r20, 0xD0	; 208
    343c:	41 93       	st	Z+, r20
    343e:	b3 e0       	ldi	r27, 0x03	; 3
    3440:	0f d0       	rcall	.+30     	; 0x3460 <__ultoa_invert+0x86>
    3442:	c9 f7       	brne	.-14     	; 0x3436 <__ultoa_invert+0x5c>
    3444:	f6 cf       	rjmp	.-20     	; 0x3432 <__ultoa_invert+0x58>
    3446:	46 2f       	mov	r20, r22
    3448:	4f 70       	andi	r20, 0x0F	; 15
    344a:	40 5d       	subi	r20, 0xD0	; 208
    344c:	4a 33       	cpi	r20, 0x3A	; 58
    344e:	18 f0       	brcs	.+6      	; 0x3456 <__ultoa_invert+0x7c>
    3450:	49 5d       	subi	r20, 0xD9	; 217
    3452:	31 fd       	sbrc	r19, 1
    3454:	40 52       	subi	r20, 0x20	; 32
    3456:	41 93       	st	Z+, r20
    3458:	02 d0       	rcall	.+4      	; 0x345e <__ultoa_invert+0x84>
    345a:	a9 f7       	brne	.-22     	; 0x3446 <__ultoa_invert+0x6c>
    345c:	ea cf       	rjmp	.-44     	; 0x3432 <__ultoa_invert+0x58>
    345e:	b4 e0       	ldi	r27, 0x04	; 4
    3460:	a6 95       	lsr	r26
    3462:	97 95       	ror	r25
    3464:	87 95       	ror	r24
    3466:	77 95       	ror	r23
    3468:	67 95       	ror	r22
    346a:	ba 95       	dec	r27
    346c:	c9 f7       	brne	.-14     	; 0x3460 <__ultoa_invert+0x86>
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	61 05       	cpc	r22, r1
    3472:	71 05       	cpc	r23, r1
    3474:	08 95       	ret
    3476:	9b 01       	movw	r18, r22
    3478:	ac 01       	movw	r20, r24
    347a:	0a 2e       	mov	r0, r26
    347c:	06 94       	lsr	r0
    347e:	57 95       	ror	r21
    3480:	47 95       	ror	r20
    3482:	37 95       	ror	r19
    3484:	27 95       	ror	r18
    3486:	ba 95       	dec	r27
    3488:	c9 f7       	brne	.-14     	; 0x347c <__ultoa_invert+0xa2>
    348a:	62 0f       	add	r22, r18
    348c:	73 1f       	adc	r23, r19
    348e:	84 1f       	adc	r24, r20
    3490:	95 1f       	adc	r25, r21
    3492:	a0 1d       	adc	r26, r0
    3494:	08 95       	ret

00003496 <calloc>:
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	86 9f       	mul	r24, r22
    34a0:	80 01       	movw	r16, r0
    34a2:	87 9f       	mul	r24, r23
    34a4:	10 0d       	add	r17, r0
    34a6:	96 9f       	mul	r25, r22
    34a8:	10 0d       	add	r17, r0
    34aa:	11 24       	eor	r1, r1
    34ac:	c8 01       	movw	r24, r16
    34ae:	0d d0       	rcall	.+26     	; 0x34ca <malloc>
    34b0:	ec 01       	movw	r28, r24
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	21 f0       	breq	.+8      	; 0x34be <calloc+0x28>
    34b6:	a8 01       	movw	r20, r16
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	27 d1       	rcall	.+590    	; 0x370c <memset>
    34be:	ce 01       	movw	r24, r28
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	08 95       	ret

000034ca <malloc>:
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	82 30       	cpi	r24, 0x02	; 2
    34d4:	91 05       	cpc	r25, r1
    34d6:	10 f4       	brcc	.+4      	; 0x34dc <malloc+0x12>
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	e0 91 1f 22 	lds	r30, 0x221F	; 0x80221f <__flp>
    34e0:	f0 91 20 22 	lds	r31, 0x2220	; 0x802220 <__flp+0x1>
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	a0 e0       	ldi	r26, 0x00	; 0
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	30 97       	sbiw	r30, 0x00	; 0
    34ee:	19 f1       	breq	.+70     	; 0x3536 <malloc+0x6c>
    34f0:	40 81       	ld	r20, Z
    34f2:	51 81       	ldd	r21, Z+1	; 0x01
    34f4:	02 81       	ldd	r16, Z+2	; 0x02
    34f6:	13 81       	ldd	r17, Z+3	; 0x03
    34f8:	48 17       	cp	r20, r24
    34fa:	59 07       	cpc	r21, r25
    34fc:	c8 f0       	brcs	.+50     	; 0x3530 <malloc+0x66>
    34fe:	84 17       	cp	r24, r20
    3500:	95 07       	cpc	r25, r21
    3502:	69 f4       	brne	.+26     	; 0x351e <malloc+0x54>
    3504:	10 97       	sbiw	r26, 0x00	; 0
    3506:	31 f0       	breq	.+12     	; 0x3514 <malloc+0x4a>
    3508:	12 96       	adiw	r26, 0x02	; 2
    350a:	0c 93       	st	X, r16
    350c:	12 97       	sbiw	r26, 0x02	; 2
    350e:	13 96       	adiw	r26, 0x03	; 3
    3510:	1c 93       	st	X, r17
    3512:	27 c0       	rjmp	.+78     	; 0x3562 <malloc+0x98>
    3514:	00 93 1f 22 	sts	0x221F, r16	; 0x80221f <__flp>
    3518:	10 93 20 22 	sts	0x2220, r17	; 0x802220 <__flp+0x1>
    351c:	22 c0       	rjmp	.+68     	; 0x3562 <malloc+0x98>
    351e:	21 15       	cp	r18, r1
    3520:	31 05       	cpc	r19, r1
    3522:	19 f0       	breq	.+6      	; 0x352a <malloc+0x60>
    3524:	42 17       	cp	r20, r18
    3526:	53 07       	cpc	r21, r19
    3528:	18 f4       	brcc	.+6      	; 0x3530 <malloc+0x66>
    352a:	9a 01       	movw	r18, r20
    352c:	bd 01       	movw	r22, r26
    352e:	ef 01       	movw	r28, r30
    3530:	df 01       	movw	r26, r30
    3532:	f8 01       	movw	r30, r16
    3534:	db cf       	rjmp	.-74     	; 0x34ec <malloc+0x22>
    3536:	21 15       	cp	r18, r1
    3538:	31 05       	cpc	r19, r1
    353a:	f9 f0       	breq	.+62     	; 0x357a <malloc+0xb0>
    353c:	28 1b       	sub	r18, r24
    353e:	39 0b       	sbc	r19, r25
    3540:	24 30       	cpi	r18, 0x04	; 4
    3542:	31 05       	cpc	r19, r1
    3544:	80 f4       	brcc	.+32     	; 0x3566 <malloc+0x9c>
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	61 15       	cp	r22, r1
    354c:	71 05       	cpc	r23, r1
    354e:	21 f0       	breq	.+8      	; 0x3558 <malloc+0x8e>
    3550:	fb 01       	movw	r30, r22
    3552:	82 83       	std	Z+2, r24	; 0x02
    3554:	93 83       	std	Z+3, r25	; 0x03
    3556:	04 c0       	rjmp	.+8      	; 0x3560 <malloc+0x96>
    3558:	80 93 1f 22 	sts	0x221F, r24	; 0x80221f <__flp>
    355c:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <__flp+0x1>
    3560:	fe 01       	movw	r30, r28
    3562:	32 96       	adiw	r30, 0x02	; 2
    3564:	44 c0       	rjmp	.+136    	; 0x35ee <malloc+0x124>
    3566:	fe 01       	movw	r30, r28
    3568:	e2 0f       	add	r30, r18
    356a:	f3 1f       	adc	r31, r19
    356c:	81 93       	st	Z+, r24
    356e:	91 93       	st	Z+, r25
    3570:	22 50       	subi	r18, 0x02	; 2
    3572:	31 09       	sbc	r19, r1
    3574:	28 83       	st	Y, r18
    3576:	39 83       	std	Y+1, r19	; 0x01
    3578:	3a c0       	rjmp	.+116    	; 0x35ee <malloc+0x124>
    357a:	20 91 1d 22 	lds	r18, 0x221D	; 0x80221d <__brkval>
    357e:	30 91 1e 22 	lds	r19, 0x221E	; 0x80221e <__brkval+0x1>
    3582:	23 2b       	or	r18, r19
    3584:	41 f4       	brne	.+16     	; 0x3596 <malloc+0xcc>
    3586:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    358a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    358e:	20 93 1d 22 	sts	0x221D, r18	; 0x80221d <__brkval>
    3592:	30 93 1e 22 	sts	0x221E, r19	; 0x80221e <__brkval+0x1>
    3596:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    359a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    359e:	21 15       	cp	r18, r1
    35a0:	31 05       	cpc	r19, r1
    35a2:	41 f4       	brne	.+16     	; 0x35b4 <malloc+0xea>
    35a4:	2d b7       	in	r18, 0x3d	; 61
    35a6:	3e b7       	in	r19, 0x3e	; 62
    35a8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    35ac:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    35b0:	24 1b       	sub	r18, r20
    35b2:	35 0b       	sbc	r19, r21
    35b4:	e0 91 1d 22 	lds	r30, 0x221D	; 0x80221d <__brkval>
    35b8:	f0 91 1e 22 	lds	r31, 0x221E	; 0x80221e <__brkval+0x1>
    35bc:	e2 17       	cp	r30, r18
    35be:	f3 07       	cpc	r31, r19
    35c0:	a0 f4       	brcc	.+40     	; 0x35ea <malloc+0x120>
    35c2:	2e 1b       	sub	r18, r30
    35c4:	3f 0b       	sbc	r19, r31
    35c6:	28 17       	cp	r18, r24
    35c8:	39 07       	cpc	r19, r25
    35ca:	78 f0       	brcs	.+30     	; 0x35ea <malloc+0x120>
    35cc:	ac 01       	movw	r20, r24
    35ce:	4e 5f       	subi	r20, 0xFE	; 254
    35d0:	5f 4f       	sbci	r21, 0xFF	; 255
    35d2:	24 17       	cp	r18, r20
    35d4:	35 07       	cpc	r19, r21
    35d6:	48 f0       	brcs	.+18     	; 0x35ea <malloc+0x120>
    35d8:	4e 0f       	add	r20, r30
    35da:	5f 1f       	adc	r21, r31
    35dc:	40 93 1d 22 	sts	0x221D, r20	; 0x80221d <__brkval>
    35e0:	50 93 1e 22 	sts	0x221E, r21	; 0x80221e <__brkval+0x1>
    35e4:	81 93       	st	Z+, r24
    35e6:	91 93       	st	Z+, r25
    35e8:	02 c0       	rjmp	.+4      	; 0x35ee <malloc+0x124>
    35ea:	e0 e0       	ldi	r30, 0x00	; 0
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	cf 01       	movw	r24, r30
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <free>:
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	09 f4       	brne	.+2      	; 0x3604 <free+0xa>
    3602:	81 c0       	rjmp	.+258    	; 0x3706 <free+0x10c>
    3604:	fc 01       	movw	r30, r24
    3606:	32 97       	sbiw	r30, 0x02	; 2
    3608:	12 82       	std	Z+2, r1	; 0x02
    360a:	13 82       	std	Z+3, r1	; 0x03
    360c:	a0 91 1f 22 	lds	r26, 0x221F	; 0x80221f <__flp>
    3610:	b0 91 20 22 	lds	r27, 0x2220	; 0x802220 <__flp+0x1>
    3614:	10 97       	sbiw	r26, 0x00	; 0
    3616:	81 f4       	brne	.+32     	; 0x3638 <free+0x3e>
    3618:	20 81       	ld	r18, Z
    361a:	31 81       	ldd	r19, Z+1	; 0x01
    361c:	82 0f       	add	r24, r18
    361e:	93 1f       	adc	r25, r19
    3620:	20 91 1d 22 	lds	r18, 0x221D	; 0x80221d <__brkval>
    3624:	30 91 1e 22 	lds	r19, 0x221E	; 0x80221e <__brkval+0x1>
    3628:	28 17       	cp	r18, r24
    362a:	39 07       	cpc	r19, r25
    362c:	51 f5       	brne	.+84     	; 0x3682 <free+0x88>
    362e:	e0 93 1d 22 	sts	0x221D, r30	; 0x80221d <__brkval>
    3632:	f0 93 1e 22 	sts	0x221E, r31	; 0x80221e <__brkval+0x1>
    3636:	67 c0       	rjmp	.+206    	; 0x3706 <free+0x10c>
    3638:	ed 01       	movw	r28, r26
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	ce 17       	cp	r28, r30
    3640:	df 07       	cpc	r29, r31
    3642:	40 f4       	brcc	.+16     	; 0x3654 <free+0x5a>
    3644:	4a 81       	ldd	r20, Y+2	; 0x02
    3646:	5b 81       	ldd	r21, Y+3	; 0x03
    3648:	9e 01       	movw	r18, r28
    364a:	41 15       	cp	r20, r1
    364c:	51 05       	cpc	r21, r1
    364e:	f1 f0       	breq	.+60     	; 0x368c <free+0x92>
    3650:	ea 01       	movw	r28, r20
    3652:	f5 cf       	rjmp	.-22     	; 0x363e <free+0x44>
    3654:	c2 83       	std	Z+2, r28	; 0x02
    3656:	d3 83       	std	Z+3, r29	; 0x03
    3658:	40 81       	ld	r20, Z
    365a:	51 81       	ldd	r21, Z+1	; 0x01
    365c:	84 0f       	add	r24, r20
    365e:	95 1f       	adc	r25, r21
    3660:	c8 17       	cp	r28, r24
    3662:	d9 07       	cpc	r29, r25
    3664:	59 f4       	brne	.+22     	; 0x367c <free+0x82>
    3666:	88 81       	ld	r24, Y
    3668:	99 81       	ldd	r25, Y+1	; 0x01
    366a:	84 0f       	add	r24, r20
    366c:	95 1f       	adc	r25, r21
    366e:	02 96       	adiw	r24, 0x02	; 2
    3670:	80 83       	st	Z, r24
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	82 83       	std	Z+2, r24	; 0x02
    367a:	93 83       	std	Z+3, r25	; 0x03
    367c:	21 15       	cp	r18, r1
    367e:	31 05       	cpc	r19, r1
    3680:	29 f4       	brne	.+10     	; 0x368c <free+0x92>
    3682:	e0 93 1f 22 	sts	0x221F, r30	; 0x80221f <__flp>
    3686:	f0 93 20 22 	sts	0x2220, r31	; 0x802220 <__flp+0x1>
    368a:	3d c0       	rjmp	.+122    	; 0x3706 <free+0x10c>
    368c:	e9 01       	movw	r28, r18
    368e:	ea 83       	std	Y+2, r30	; 0x02
    3690:	fb 83       	std	Y+3, r31	; 0x03
    3692:	49 91       	ld	r20, Y+
    3694:	59 91       	ld	r21, Y+
    3696:	c4 0f       	add	r28, r20
    3698:	d5 1f       	adc	r29, r21
    369a:	ec 17       	cp	r30, r28
    369c:	fd 07       	cpc	r31, r29
    369e:	61 f4       	brne	.+24     	; 0x36b8 <free+0xbe>
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	84 0f       	add	r24, r20
    36a6:	95 1f       	adc	r25, r21
    36a8:	02 96       	adiw	r24, 0x02	; 2
    36aa:	e9 01       	movw	r28, r18
    36ac:	88 83       	st	Y, r24
    36ae:	99 83       	std	Y+1, r25	; 0x01
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	8a 83       	std	Y+2, r24	; 0x02
    36b6:	9b 83       	std	Y+3, r25	; 0x03
    36b8:	e0 e0       	ldi	r30, 0x00	; 0
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	12 96       	adiw	r26, 0x02	; 2
    36be:	8d 91       	ld	r24, X+
    36c0:	9c 91       	ld	r25, X
    36c2:	13 97       	sbiw	r26, 0x03	; 3
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	19 f0       	breq	.+6      	; 0x36ce <free+0xd4>
    36c8:	fd 01       	movw	r30, r26
    36ca:	dc 01       	movw	r26, r24
    36cc:	f7 cf       	rjmp	.-18     	; 0x36bc <free+0xc2>
    36ce:	8d 91       	ld	r24, X+
    36d0:	9c 91       	ld	r25, X
    36d2:	11 97       	sbiw	r26, 0x01	; 1
    36d4:	9d 01       	movw	r18, r26
    36d6:	2e 5f       	subi	r18, 0xFE	; 254
    36d8:	3f 4f       	sbci	r19, 0xFF	; 255
    36da:	82 0f       	add	r24, r18
    36dc:	93 1f       	adc	r25, r19
    36de:	20 91 1d 22 	lds	r18, 0x221D	; 0x80221d <__brkval>
    36e2:	30 91 1e 22 	lds	r19, 0x221E	; 0x80221e <__brkval+0x1>
    36e6:	28 17       	cp	r18, r24
    36e8:	39 07       	cpc	r19, r25
    36ea:	69 f4       	brne	.+26     	; 0x3706 <free+0x10c>
    36ec:	30 97       	sbiw	r30, 0x00	; 0
    36ee:	29 f4       	brne	.+10     	; 0x36fa <free+0x100>
    36f0:	10 92 1f 22 	sts	0x221F, r1	; 0x80221f <__flp>
    36f4:	10 92 20 22 	sts	0x2220, r1	; 0x802220 <__flp+0x1>
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <free+0x104>
    36fa:	12 82       	std	Z+2, r1	; 0x02
    36fc:	13 82       	std	Z+3, r1	; 0x03
    36fe:	a0 93 1d 22 	sts	0x221D, r26	; 0x80221d <__brkval>
    3702:	b0 93 1e 22 	sts	0x221E, r27	; 0x80221e <__brkval+0x1>
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <memset>:
    370c:	dc 01       	movw	r26, r24
    370e:	01 c0       	rjmp	.+2      	; 0x3712 <memset+0x6>
    3710:	6d 93       	st	X+, r22
    3712:	41 50       	subi	r20, 0x01	; 1
    3714:	50 40       	sbci	r21, 0x00	; 0
    3716:	e0 f7       	brcc	.-8      	; 0x3710 <memset+0x4>
    3718:	08 95       	ret

0000371a <_exit>:
    371a:	f8 94       	cli

0000371c <__stop_program>:
    371c:	ff cf       	rjmp	.-2      	; 0x371c <__stop_program>

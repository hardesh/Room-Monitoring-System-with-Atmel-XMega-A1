
ADC_EXAMPLE10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00802006  00802006  00000b36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007565  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fa3  00000000  00000000  0000826d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003265  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  0000f478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c346  00000000  00000000  0000f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141e  00000000  00000000  0003bb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009763  00000000  00000000  0003d098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	d9 c0       	rjmp	.+434    	; 0x2d0 <__vector_71>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	83 c0       	rjmp	.+262    	; 0x23c <__bad_interrupt>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e9       	ldi	r30, 0x9C	; 156
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	a6 e0       	ldi	r26, 0x06	; 6
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a4 31       	cpi	r26, 0x14	; 20
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	bb d0       	rcall	.+374    	; 0x3b0 <main>
 23a:	2e c4       	rjmp	.+2140   	; 0xa98 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <get_mean_sample_value>:
 * and computes the mean value of the resulting sample values.
 *
 * \return Mean sample value.
 */
static uint16_t get_mean_sample_value(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	20 e4       	ldi	r18, 0x40	; 64
 24a:	30 e0       	ldi	r19, 0x00	; 0
	uint32_t sum = 0;
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	ba 01       	movw	r22, r20
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 252:	e0 e0       	ldi	r30, 0x00	; 0
 254:	f2 e0       	ldi	r31, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
 256:	a1 e0       	ldi	r26, 0x01	; 1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 258:	8f b7       	in	r24, 0x3f	; 63
 25a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 25c:	f8 94       	cli
	return flags;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 260:	90 81       	ld	r25, Z
 262:	94 60       	ori	r25, 0x04	; 4
 264:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 266:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
 268:	96 81       	ldd	r25, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
 26a:	90 ff       	sbrs	r25, 0
 26c:	fd cf       	rjmp	.-6      	; 0x268 <get_mean_sample_value+0x2a>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
 26e:	a6 83       	std	Z+6, r26	; 0x06
	// Sum the configured number of samples.
	for (i = 0; i < (1 << OVERSAMPLING_FACTOR); i++) {
		adc_start_conversion(&ADCA, ADC_CH0);
		adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);

		sum += adc_get_result(&ADCA, ADC_CH0);
 270:	84 a1       	ldd	r24, Z+36	; 0x24
 272:	95 a1       	ldd	r25, Z+37	; 0x25
 274:	48 0f       	add	r20, r24
 276:	59 1f       	adc	r21, r25
 278:	61 1d       	adc	r22, r1
 27a:	71 1d       	adc	r23, r1
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	31 09       	sbc	r19, r1
{
	uint32_t sum = 0;
	uint16_t i;

	// Sum the configured number of samples.
	for (i = 0; i < (1 << OVERSAMPLING_FACTOR); i++) {
 280:	59 f7       	brne	.-42     	; 0x258 <get_mean_sample_value+0x1a>
	}

	// Compute sample mean by scaling down according to oversampling factor.
	sum >>= OVERSAMPLING_FACTOR;

	return sum;
 282:	db 01       	movw	r26, r22
 284:	ca 01       	movw	r24, r20
 286:	68 94       	set
 288:	15 f8       	bld	r1, 5
 28a:	b6 95       	lsr	r27
 28c:	a7 95       	ror	r26
 28e:	97 95       	ror	r25
 290:	87 95       	ror	r24
 292:	16 94       	lsr	r1
 294:	d1 f7       	brne	.-12     	; 0x28a <get_mean_sample_value+0x4c>
}
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <wait_for_button>:

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
 29e:	e0 e6       	ldi	r30, 0x60	; 96
 2a0:	f6 e0       	ldi	r31, 0x06	; 6
 2a2:	80 85       	ldd	r24, Z+8	; 0x08
 * Debouncing is done with an approximate 20 ms delay after both the press and
 * the release.
 */
static void wait_for_button(void)
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
 2a4:	80 fd       	sbrc	r24, 0
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <wait_for_button+0x4>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
	count = sysclk_get_cpu_hz() / 1000;
	count *= ms;
	count /= 6;

	do {
		asm("");
 2ac:	01 96       	adiw	r24, 0x01	; 1
	} while (--count);
 2ae:	8a 30       	cpi	r24, 0x0A	; 10
 2b0:	2a e1       	ldi	r18, 0x1A	; 26
 2b2:	92 07       	cpc	r25, r18
 2b4:	d9 f7       	brne	.-10     	; 0x2ac <wait_for_button+0xe>
 2b6:	e0 e6       	ldi	r30, 0x60	; 96
 2b8:	f6 e0       	ldi	r31, 0x06	; 6
 2ba:	80 85       	ldd	r24, Z+8	; 0x08
 */
static void wait_for_button(void)
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
	mdelay(20);
	do {} while (ioport_pin_is_low(BUTTON_PIN));
 2bc:	80 ff       	sbrs	r24, 0
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <wait_for_button+0x1c>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
	count = sysclk_get_cpu_hz() / 1000;
	count *= ms;
	count /= 6;

	do {
		asm("");
 2c4:	01 96       	adiw	r24, 0x01	; 1
	} while (--count);
 2c6:	8a 30       	cpi	r24, 0x0A	; 10
 2c8:	2a e1       	ldi	r18, 0x1A	; 26
 2ca:	92 07       	cpc	r25, r18
 2cc:	d9 f7       	brne	.-10     	; 0x2c4 <wait_for_button+0x26>
{
	do {} while (ioport_pin_is_high(BUTTON_PIN));
	mdelay(20);
	do {} while (ioport_pin_is_low(BUTTON_PIN));
	mdelay(20);
}
 2ce:	08 95       	ret

000002d0 <__vector_71>:
 * Upon completed AD conversion, this ISR computes a calibrated sample from the
 * ADC result, then stores it in a global variable before triggering a new
 * conversion.
 */
ISR(ADCA_CH0_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	08 b6       	in	r0, 0x38	; 56
 2dc:	0f 92       	push	r0
 2de:	18 be       	out	0x38, r1	; 56
 2e0:	09 b6       	in	r0, 0x39	; 57
 2e2:	0f 92       	push	r0
 2e4:	19 be       	out	0x39, r1	; 57
 2e6:	0a b6       	in	r0, 0x3a	; 58
 2e8:	0f 92       	push	r0
 2ea:	1a be       	out	0x3a, r1	; 58
 2ec:	0b b6       	in	r0, 0x3b	; 59
 2ee:	0f 92       	push	r0
 2f0:	1b be       	out	0x3b, r1	; 59
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	int32_t sample;

	sample = adc_get_result(&ADCA, ADC_CH0);
 314:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
 318:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
 31c:	a9 01       	movw	r20, r18
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0

	// Compensate for offset error.
	sample -= cal_data.offset;
 322:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <cal_data>
 326:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <cal_data+0x1>
 32a:	9a 01       	movw	r18, r20
 32c:	ab 01       	movw	r20, r22
 32e:	28 1b       	sub	r18, r24
 330:	39 0b       	sbc	r19, r25
 332:	41 09       	sbc	r20, r1
 334:	51 09       	sbc	r21, r1

	/* Some samples may become negative after compensation due to noise.
	 * Clamp these to 0 since we are doing unsigned conversions.
	 */
	if (sample > 0) {
 336:	12 16       	cp	r1, r18
 338:	13 06       	cpc	r1, r19
 33a:	14 06       	cpc	r1, r20
 33c:	15 06       	cpc	r1, r21
 33e:	5c f4       	brge	.+22     	; 0x356 <__vector_71+0x86>
		// Compensate for gain error.
		sample *= IDEAL_GAIN_RESULT;
 340:	a6 e6       	ldi	r26, 0x66	; 102
 342:	be e0       	ldi	r27, 0x0E	; 14
 344:	6e d3       	rcall	.+1756   	; 0xa22 <__muluhisi3>
		sample /= cal_data.gain;
 346:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <cal_data+0x2>
 34a:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <cal_data+0x3>
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	4b d3       	rcall	.+1686   	; 0x9ea <__divmodsi4>
 354:	03 c0       	rjmp	.+6      	; 0x35c <__vector_71+0x8c>
	} else {
		sample = 0;
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
	}

	// Store the calibrated sample value.
	last_sample = sample;
 35c:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <__data_end>
 360:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <__data_end+0x1>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 364:	8f b7       	in	r24, 0x3f	; 63
 366:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 368:	f8 94       	cli
	return flags;
 36a:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f2 e0       	ldi	r31, 0x02	; 2
 370:	80 81       	ld	r24, Z
 372:	84 60       	ori	r24, 0x04	; 4
 374:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 376:	9f bf       	out	0x3f, r25	; 63

	// Manually start the next conversion.
	adc_start_conversion(&ADCA, ADC_CH0);
}
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0b be       	out	0x3b, r0	; 59
 39a:	0f 90       	pop	r0
 39c:	0a be       	out	0x3a, r0	; 58
 39e:	0f 90       	pop	r0
 3a0:	09 be       	out	0x39, r0	; 57
 3a2:	0f 90       	pop	r0
 3a4:	08 be       	out	0x38, r0	; 56
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <main>:
	do {} while (ioport_pin_is_low(BUTTON_PIN));
	mdelay(20);
}

int main(void)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	2d 97       	sbiw	r28, 0x0d	; 13
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	de bf       	out	0x3e, r29	; 62
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;

	board_init();
 3be:	0d d1       	rcall	.+538    	; 0x5da <board_init>
	sysclk_init();
 3c0:	aa d0       	rcall	.+340    	; 0x516 <sysclk_init>
 3c2:	ee e0       	ldi	r30, 0x0E	; 14
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
 3c4:	f0 e2       	ldi	r31, 0x20	; 32
 3c6:	10 82       	st	Z, r1
 3c8:	11 82       	std	Z+1, r1	; 0x01
 3ca:	12 82       	std	Z+2, r1	; 0x02
 3cc:	13 82       	std	Z+3, r1	; 0x03
 3ce:	14 82       	std	Z+4, r1	; 0x04
 3d0:	11 e0       	ldi	r17, 0x01	; 1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 3d2:	15 83       	std	Z+5, r17	; 0x05
 3d4:	87 e0       	ldi	r24, 0x07	; 7
	sleepmgr_init();
	irq_initialize_vectors();
 3d6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 3da:	78 94       	sei
	cpu_irq_enable();
 3dc:	be 01       	movw	r22, r28

	// Initialize configuration structures.
	adc_read_configuration(&ADCA, &adc_conf);
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	28 d2       	rcall	.+1104   	; 0x838 <adc_read_configuration>
 3e8:	ae 01       	movw	r20, r28
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
 3ea:	48 5f       	subi	r20, 0xF8	; 248
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	a5 d2       	rcall	.+1354   	; 0x940 <adcch_read_configuration>
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
 3f8:	9b 81       	ldd	r25, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
 3fa:	9f 7c       	andi	r25, 0xCF	; 207
 3fc:	9b 83       	std	Y+3, r25	; 0x03
 3fe:	92 e0       	ldi	r25, 0x02	; 2
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
 400:	9d 83       	std	Y+5, r25	; 0x05
 402:	81 7e       	andi	r24, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
 404:	8a 83       	std	Y+2, r24	; 0x02
 406:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
 408:	be 01       	movw	r22, r28
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12,
			ADC_REF_BANDGAP);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);

	adc_write_configuration(&ADCA, &adc_conf);
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	ac d1       	rcall	.+856    	; 0x76c <adc_write_configuration>
 414:	18 87       	std	Y+8, r17	; 0x08
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 416:	19 86       	std	Y+9, r1	; 0x09
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
 418:	8a 85       	ldd	r24, Y+10	; 0x0a
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_disable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
 41a:	80 7f       	andi	r24, 0xF0	; 240
 41c:	8a 87       	std	Y+10, r24	; 0x0a
 41e:	ae 01       	movw	r20, r28
	adcch_set_input(&adcch_conf, INPUT_PIN, ADCCH_NEG_NONE,
			1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_disable_interrupt(&adcch_conf);

	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
 420:	48 5f       	subi	r20, 0xF8	; 248
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	3f d2       	rcall	.+1150   	; 0x8aa <adcch_write_configuration>

	// Enable the ADC and do one dummy conversion.
	adc_enable(&ADCA);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	92 e0       	ldi	r25, 0x02	; 2
 430:	71 d1       	rcall	.+738    	; 0x714 <adc_enable>
 432:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 434:	8c 87       	std	Y+12, r24	; 0x0c
 436:	f8 94       	cli
	cpu_irq_disable();
 438:	9c 85       	ldd	r25, Y+12	; 0x0c
	return flags;
 43a:	e0 e0       	ldi	r30, 0x00	; 0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 43c:	f2 e0       	ldi	r31, 0x02	; 2
 43e:	80 81       	ld	r24, Z
 440:	84 60       	ori	r24, 0x04	; 4
 442:	80 83       	st	Z, r24
 444:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 446:	86 81       	ldd	r24, Z+6	; 0x06
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
 448:	80 ff       	sbrs	r24, 0
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
 44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44c:	e1 2c       	mov	r14, r1
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
 44e:	68 94       	set
 450:	ff 24       	eor	r15, r15
 452:	f1 f8       	bld	r15, 1
 454:	dd 24       	eor	r13, r13
 456:	d3 94       	inc	r13
 458:	d7 01       	movw	r26, r14
 45a:	16 96       	adiw	r26, 0x06	; 6
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
 45c:	dc 92       	st	X, r13
 45e:	00 e8       	ldi	r16, 0x80	; 128
 460:	16 e0       	ldi	r17, 0x06	; 6
 462:	f8 01       	movw	r30, r16
	adc_start_conversion(&ADCA, ADC_CH0);
	adc_wait_for_interrupt_flag(&ADCA, ADC_CH0);

	// Light up LED 1, wait for button press.
	ioport_set_pin_low(LED1_PIN);
	wait_for_button();
 464:	d6 82       	std	Z+6, r13	; 0x06
 466:	1b df       	rcall	.-458    	; 0x29e <wait_for_button>

	// Perform oversampling of offset.
	cal_data.offset = get_mean_sample_value();
 468:	ea de       	rcall	.-556    	; 0x23e <get_mean_sample_value>
 46a:	5c 01       	movw	r10, r24
 46c:	0f 2e       	mov	r0, r31
 46e:	f8 e0       	ldi	r31, 0x08	; 8
 470:	8f 2e       	mov	r8, r31
 472:	f0 e2       	ldi	r31, 0x20	; 32
 474:	9f 2e       	mov	r9, r31
 476:	f0 2d       	mov	r31, r0
 478:	d4 01       	movw	r26, r8
 47a:	8d 93       	st	X+, r24
 47c:	9c 93       	st	X, r25
 47e:	68 94       	set
 480:	cc 24       	eor	r12, r12
 482:	c1 f8       	bld	r12, 1
 484:	f8 01       	movw	r30, r16

	// Light up LED 2, wait for button press.
	ioport_set_pin_low(LED2_PIN);
	wait_for_button();
 486:	c6 82       	std	Z+6, r12	; 0x06
 488:	0a df       	rcall	.-492    	; 0x29e <wait_for_button>

	// Perform oversampling of 0.9 V for gain calibration.
	cal_data.gain = get_mean_sample_value() - cal_data.offset;
 48a:	d9 de       	rcall	.-590    	; 0x23e <get_mean_sample_value>
 48c:	8a 19       	sub	r24, r10
 48e:	9b 09       	sbc	r25, r11
 490:	d4 01       	movw	r26, r8
 492:	12 96       	adiw	r26, 0x02	; 2
 494:	8d 93       	st	X+, r24
 496:	9c 93       	st	X, r25
 498:	13 97       	sbiw	r26, 0x03	; 3
 49a:	f8 01       	movw	r30, r16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
 49c:	d5 82       	std	Z+5, r13	; 0x05
 49e:	c5 82       	std	Z+5, r12	; 0x05
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
 4a0:	8a 85       	ldd	r24, Y+10	; 0x0a
 4a2:	8c 7f       	andi	r24, 0xFC	; 252
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	8a 87       	std	Y+10, r24	; 0x0a
	ioport_set_pin_high(LED1_PIN);
	ioport_set_pin_high(LED2_PIN);

	// Enable interrupts on ADC channel, then trigger first conversion.
	adcch_enable_interrupt(&adcch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
 4a8:	ae 01       	movw	r20, r28
 4aa:	48 5f       	subi	r20, 0xF8	; 248
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	92 e0       	ldi	r25, 0x02	; 2
 4b4:	fa d1       	rcall	.+1012   	; 0x8aa <adcch_write_configuration>
 4b6:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 4b8:	8d 87       	std	Y+13, r24	; 0x0d
 4ba:	f8 94       	cli
	cpu_irq_disable();
 4bc:	9d 85       	ldd	r25, Y+13	; 0x0d
	return flags;
 4be:	d7 01       	movw	r26, r14
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
 4c0:	8c 91       	ld	r24, X
 4c2:	84 60       	ori	r24, 0x04	; 4
 4c4:	8c 93       	st	X, r24
 4c6:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 4c8:	4e e0       	ldi	r20, 0x0E	; 14

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 4ca:	50 e2       	ldi	r21, 0x20	; 32
 4cc:	28 e4       	ldi	r18, 0x48	; 72
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f8 94       	cli
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
 4d2:	fa 01       	movw	r30, r20

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 4d4:	80 81       	ld	r24, Z
 4d6:	81 11       	cpse	r24, r1
 4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4da:	af e0       	ldi	r26, 0x0F	; 15
 4dc:	b0 e2       	ldi	r27, 0x20	; 32
 4de:	e0 e0       	ldi	r30, 0x00	; 0
 4e0:	ef 5f       	subi	r30, 0xFF	; 255
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 4e2:	8d 91       	ld	r24, X+

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
 4e4:	88 23       	and	r24, r24
 4e6:	e1 f3       	breq	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	e1 11       	cpse	r30, r1
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ec:	78 94       	sei
		cpu_irq_enable();
 4ee:	f0 cf       	rjmp	.-32     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4f0:	d9 01       	movw	r26, r18
 4f2:	8c 91       	ld	r24, X
 4f4:	f0 e0       	ldi	r31, 0x00	; 0

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
 4f6:	e1 50       	subi	r30, 0x01	; 1
 4f8:	f0 4e       	sbci	r31, 0xE0	; 224
 4fa:	81 7f       	andi	r24, 0xF1	; 241
 4fc:	90 81       	ld	r25, Z
 4fe:	89 2b       	or	r24, r25
 500:	8c 93       	st	X, r24
 502:	8c 91       	ld	r24, X
	sleep_enable();
 504:	81 60       	ori	r24, 0x01	; 1
 506:	8c 93       	st	X, r24
 508:	78 94       	sei

	cpu_irq_enable();
 50a:	88 95       	sleep
	sleep_enter();
 50c:	f9 01       	movw	r30, r18

	sleep_disable();
 50e:	80 81       	ld	r24, Z
 510:	8e 7f       	andi	r24, 0xFE	; 254
 512:	80 83       	st	Z, r24
 514:	dd cf       	rjmp	.-70     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>

00000516 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 51c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 520:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
 524:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 528:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
 52c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
 530:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 534:	08 95       	ret

00000536 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	1f 92       	push	r1
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 540:	9f b7       	in	r25, 0x3f	; 63
 542:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 544:	f8 94       	cli
	return flags;
 546:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 548:	e8 2f       	mov	r30, r24
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e0 59       	subi	r30, 0x90	; 144
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	60 95       	com	r22
 552:	80 81       	ld	r24, Z
 554:	68 23       	and	r22, r24
 556:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 558:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 55a:	0f 90       	pop	r0
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	1f 92       	push	r1
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 56c:	9f b7       	in	r25, 0x3f	; 63
 56e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 570:	f8 94       	cli
	return flags;
 572:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
 574:	e8 2f       	mov	r30, r24
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	e0 59       	subi	r30, 0x90	; 144
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	80 81       	ld	r24, Z
 57e:	68 2b       	or	r22, r24
 580:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 582:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
 584:	0f 90       	pop	r0
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 596:	c6 2f       	mov	r28, r22
 598:	d0 e0       	ldi	r29, 0x00	; 0
 59a:	de 01       	movw	r26, r28
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <ioport_configure_port_pin+0x18>
 5a0:	b5 95       	asr	r27
 5a2:	a7 95       	ror	r26
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <ioport_configure_port_pin+0x14>
 5a8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 5aa:	50 8b       	std	Z+16, r21	; 0x10
 5ac:	2f 5f       	subi	r18, 0xFF	; 255
 5ae:	3f 4f       	sbci	r19, 0xFF	; 255
 5b0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 5b2:	28 30       	cpi	r18, 0x08	; 8
 5b4:	31 05       	cpc	r19, r1
 5b6:	89 f7       	brne	.-30     	; 0x59a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 5b8:	40 ff       	sbrs	r20, 0
 5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
 5bc:	41 ff       	sbrs	r20, 1
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 5c0:	fc 01       	movw	r30, r24
 5c2:	65 83       	std	Z+5, r22	; 0x05
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 5c6:	fc 01       	movw	r30, r24
 5c8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 5ca:	fc 01       	movw	r30, r24
 5cc:	61 83       	std	Z+1, r22	; 0x01
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 5d0:	fc 01       	movw	r30, r24
 5d2:	62 83       	std	Z+2, r22	; 0x02
	}
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 5da:	43 e0       	ldi	r20, 0x03	; 3
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	80 e8       	ldi	r24, 0x80	; 128
 5e2:	96 e0       	ldi	r25, 0x06	; 6
 5e4:	d3 df       	rcall	.-90     	; 0x58c <ioport_configure_port_pin>
 5e6:	43 e0       	ldi	r20, 0x03	; 3
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	80 e8       	ldi	r24, 0x80	; 128
 5ee:	96 e0       	ldi	r25, 0x06	; 6
 5f0:	cd df       	rcall	.-102    	; 0x58c <ioport_configure_port_pin>
 5f2:	43 e0       	ldi	r20, 0x03	; 3
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	64 e0       	ldi	r22, 0x04	; 4
 5f8:	80 e8       	ldi	r24, 0x80	; 128
 5fa:	96 e0       	ldi	r25, 0x06	; 6
 5fc:	c7 df       	rcall	.-114    	; 0x58c <ioport_configure_port_pin>
 5fe:	43 e0       	ldi	r20, 0x03	; 3
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	68 e0       	ldi	r22, 0x08	; 8
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	96 e0       	ldi	r25, 0x06	; 6
 608:	c1 df       	rcall	.-126    	; 0x58c <ioport_configure_port_pin>
 60a:	43 e0       	ldi	r20, 0x03	; 3
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	60 e1       	ldi	r22, 0x10	; 16
 610:	80 e8       	ldi	r24, 0x80	; 128
 612:	96 e0       	ldi	r25, 0x06	; 6
 614:	bb df       	rcall	.-138    	; 0x58c <ioport_configure_port_pin>
 616:	43 e0       	ldi	r20, 0x03	; 3
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	60 e2       	ldi	r22, 0x20	; 32
 61c:	80 e8       	ldi	r24, 0x80	; 128
 61e:	96 e0       	ldi	r25, 0x06	; 6
 620:	b5 df       	rcall	.-150    	; 0x58c <ioport_configure_port_pin>
 622:	43 e0       	ldi	r20, 0x03	; 3
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	60 e4       	ldi	r22, 0x40	; 64
 628:	80 e8       	ldi	r24, 0x80	; 128
 62a:	96 e0       	ldi	r25, 0x06	; 6
 62c:	af df       	rcall	.-162    	; 0x58c <ioport_configure_port_pin>
 62e:	43 e0       	ldi	r20, 0x03	; 3
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	60 e8       	ldi	r22, 0x80	; 128
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	96 e0       	ldi	r25, 0x06	; 6
 638:	a9 df       	rcall	.-174    	; 0x58c <ioport_configure_port_pin>
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	58 e1       	ldi	r21, 0x18	; 24
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	80 e6       	ldi	r24, 0x60	; 96
 642:	96 e0       	ldi	r25, 0x06	; 6
 644:	a3 df       	rcall	.-186    	; 0x58c <ioport_configure_port_pin>
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	58 e1       	ldi	r21, 0x18	; 24
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	80 e6       	ldi	r24, 0x60	; 96
 64e:	96 e0       	ldi	r25, 0x06	; 6
 650:	9d df       	rcall	.-198    	; 0x58c <ioport_configure_port_pin>
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	58 e1       	ldi	r21, 0x18	; 24
 656:	64 e0       	ldi	r22, 0x04	; 4
 658:	80 e6       	ldi	r24, 0x60	; 96
 65a:	96 e0       	ldi	r25, 0x06	; 6
 65c:	97 df       	rcall	.-210    	; 0x58c <ioport_configure_port_pin>
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	58 e1       	ldi	r21, 0x18	; 24
 662:	68 e0       	ldi	r22, 0x08	; 8
 664:	80 e6       	ldi	r24, 0x60	; 96
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	91 df       	rcall	.-222    	; 0x58c <ioport_configure_port_pin>
 66a:	40 e0       	ldi	r20, 0x00	; 0
 66c:	58 e1       	ldi	r21, 0x18	; 24
 66e:	60 e1       	ldi	r22, 0x10	; 16
 670:	80 e6       	ldi	r24, 0x60	; 96
 672:	96 e0       	ldi	r25, 0x06	; 6
 674:	8b df       	rcall	.-234    	; 0x58c <ioport_configure_port_pin>
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	58 e1       	ldi	r21, 0x18	; 24
 67a:	60 e2       	ldi	r22, 0x20	; 32
 67c:	80 e6       	ldi	r24, 0x60	; 96
 67e:	96 e0       	ldi	r25, 0x06	; 6
 680:	85 df       	rcall	.-246    	; 0x58c <ioport_configure_port_pin>
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	58 e1       	ldi	r21, 0x18	; 24
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	80 ee       	ldi	r24, 0xE0	; 224
 68a:	97 e0       	ldi	r25, 0x07	; 7
 68c:	7f df       	rcall	.-258    	; 0x58c <ioport_configure_port_pin>
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	58 e1       	ldi	r21, 0x18	; 24
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	80 ee       	ldi	r24, 0xE0	; 224
 696:	97 e0       	ldi	r25, 0x07	; 7
 698:	79 cf       	rjmp	.-270    	; 0x58c <ioport_configure_port_pin>
 69a:	08 95       	ret

0000069c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
 69c:	81 15       	cp	r24, r1
 69e:	22 e0       	ldi	r18, 0x02	; 2
 6a0:	92 07       	cpc	r25, r18
 6a2:	61 f4       	brne	.+24     	; 0x6bc <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
 6a4:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <adca_enable_count>
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	98 0f       	add	r25, r24
 6ac:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <adca_enable_count>
 6b0:	81 11       	cpse	r24, r1
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 6b4:	62 e0       	ldi	r22, 0x02	; 2
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	3e cf       	rjmp	.-388    	; 0x536 <sysclk_enable_module>
 6ba:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
 6bc:	80 34       	cpi	r24, 0x40	; 64
 6be:	92 40       	sbci	r25, 0x02	; 2
 6c0:	59 f4       	brne	.+22     	; 0x6d8 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
 6c2:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <adcb_enable_count>
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	98 0f       	add	r25, r24
 6ca:	90 93 0c 20 	sts	0x200C, r25	; 0x80200c <adcb_enable_count>
 6ce:	81 11       	cpse	r24, r1
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	2f cf       	rjmp	.-418    	; 0x536 <sysclk_enable_module>
 6d8:	08 95       	ret

000006da <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
 6da:	81 15       	cp	r24, r1
 6dc:	22 e0       	ldi	r18, 0x02	; 2
 6de:	92 07       	cpc	r25, r18
 6e0:	59 f4       	brne	.+22     	; 0x6f8 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
 6e2:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <adca_enable_count>
 6e6:	81 50       	subi	r24, 0x01	; 1
 6e8:	80 93 0d 20 	sts	0x200D, r24	; 0x80200d <adca_enable_count>
 6ec:	81 11       	cpse	r24, r1
 6ee:	11 c0       	rjmp	.+34     	; 0x712 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	36 cf       	rjmp	.-404    	; 0x562 <sysclk_disable_module>
 6f6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
 6f8:	80 34       	cpi	r24, 0x40	; 64
 6fa:	92 40       	sbci	r25, 0x02	; 2
 6fc:	51 f4       	brne	.+20     	; 0x712 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
 6fe:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <adcb_enable_count>
 702:	81 50       	subi	r24, 0x01	; 1
 704:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <adcb_enable_count>
 708:	81 11       	cpse	r24, r1
 70a:	03 c0       	rjmp	.+6      	; 0x712 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 70c:	62 e0       	ldi	r22, 0x02	; 2
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	28 cf       	rjmp	.-432    	; 0x562 <sysclk_disable_module>
 712:	08 95       	ret

00000714 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	1f 92       	push	r1
 720:	1f 92       	push	r1
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 728:	8f b7       	in	r24, 0x3f	; 63
 72a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 72c:	f8 94       	cli
	return flags;
 72e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
 730:	c7 01       	movw	r24, r14
 732:	b4 df       	rcall	.-152    	; 0x69c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
 734:	f7 01       	movw	r30, r14
 736:	80 81       	ld	r24, Z
 738:	81 60       	ori	r24, 0x01	; 1
 73a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 73c:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
 73e:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <sleepmgr_locks+0x1>
 742:	8f 3f       	cpi	r24, 0xFF	; 255
 744:	09 f4       	brne	.+2      	; 0x748 <adc_enable+0x34>
 746:	ff cf       	rjmp	.-2      	; 0x746 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 748:	8f b7       	in	r24, 0x3f	; 63
 74a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 74c:	f8 94       	cli
	return flags;
 74e:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
 750:	ee e0       	ldi	r30, 0x0E	; 14
 752:	f0 e2       	ldi	r31, 0x20	; 32
 754:	81 81       	ldd	r24, Z+1	; 0x01
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 75a:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	08 95       	ret

0000076c <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
 76c:	bf 92       	push	r11
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	1f 92       	push	r1
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	8c 01       	movw	r16, r24
 786:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
 788:	81 15       	cp	r24, r1
 78a:	22 e0       	ldi	r18, 0x02	; 2
 78c:	92 07       	cpc	r25, r18
 78e:	71 f4       	brne	.+28     	; 0x7ac <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
 790:	61 e2       	ldi	r22, 0x21	; 33
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	1f d1       	rcall	.+574    	; 0x9d6 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
 798:	c8 2e       	mov	r12, r24
 79a:	d1 2c       	mov	r13, r1
 79c:	60 e2       	ldi	r22, 0x20	; 32
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	19 d1       	rcall	.+562    	; 0x9d6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
 7a4:	dc 2c       	mov	r13, r12
 7a6:	cc 24       	eor	r12, r12
 7a8:	c8 2a       	or	r12, r24
 7aa:	10 c0       	rjmp	.+32     	; 0x7cc <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
 7ac:	80 34       	cpi	r24, 0x40	; 64
 7ae:	92 40       	sbci	r25, 0x02	; 2
 7b0:	c1 f5       	brne	.+112    	; 0x822 <adc_write_configuration+0xb6>
 7b2:	65 e2       	ldi	r22, 0x25	; 37
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	0e d1       	rcall	.+540    	; 0x9d6 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
 7ba:	c8 2e       	mov	r12, r24
 7bc:	d1 2c       	mov	r13, r1
 7be:	64 e2       	ldi	r22, 0x24	; 36
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	08 d1       	rcall	.+528    	; 0x9d6 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
 7c6:	dc 2c       	mov	r13, r12
 7c8:	cc 24       	eor	r12, r12
 7ca:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 7cc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 7ce:	89 83       	std	Y+1, r24	; 0x01
	return flags;
 7d0:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
 7d2:	b9 80       	ldd	r11, Y+1	; 0x01
 7d4:	c8 01       	movw	r24, r16
 7d6:	62 df       	rcall	.-316    	; 0x69c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
 7d8:	f8 01       	movw	r30, r16
 7da:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
 7dc:	92 e0       	ldi	r25, 0x02	; 2
 7de:	90 83       	st	Z, r25
	adc->CAL = cal;
 7e0:	c4 86       	std	Z+12, r12	; 0x0c
 7e2:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
 7e4:	f7 01       	movw	r30, r14
 7e6:	25 81       	ldd	r18, Z+5	; 0x05
 7e8:	36 81       	ldd	r19, Z+6	; 0x06
 7ea:	f8 01       	movw	r30, r16
 7ec:	20 8f       	std	Z+24, r18	; 0x18
 7ee:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
 7f0:	f7 01       	movw	r30, r14
 7f2:	92 81       	ldd	r25, Z+2	; 0x02
 7f4:	f8 01       	movw	r30, r16
 7f6:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
 7f8:	f7 01       	movw	r30, r14
 7fa:	94 81       	ldd	r25, Z+4	; 0x04
 7fc:	f8 01       	movw	r30, r16
 7fe:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
 800:	f7 01       	movw	r30, r14
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	f8 01       	movw	r30, r16
 806:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
 808:	f7 01       	movw	r30, r14
 80a:	91 81       	ldd	r25, Z+1	; 0x01
 80c:	f8 01       	movw	r30, r16
 80e:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
 810:	81 70       	andi	r24, 0x01	; 1
 812:	f7 01       	movw	r30, r14
 814:	90 81       	ld	r25, Z
 816:	89 2b       	or	r24, r25
 818:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
 81a:	80 83       	st	Z, r24
 81c:	c8 01       	movw	r24, r16
 81e:	5d df       	rcall	.-326    	; 0x6da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 820:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
 822:	0f 90       	pop	r0
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	ff 90       	pop	r15
 82e:	ef 90       	pop	r14
 830:	df 90       	pop	r13
 832:	cf 90       	pop	r12
 834:	bf 90       	pop	r11
 836:	08 95       	ret

00000838 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	1f 92       	push	r1
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	8c 01       	movw	r16, r24
 84e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 850:	8f b7       	in	r24, 0x3f	; 63
 852:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 854:	f8 94       	cli
	return flags;
 856:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
 858:	c8 01       	movw	r24, r16
 85a:	20 df       	rcall	.-448    	; 0x69c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
 85c:	f8 01       	movw	r30, r16
 85e:	80 81       	ld	r24, Z
 860:	80 7c       	andi	r24, 0xC0	; 192
 862:	f7 01       	movw	r30, r14
 864:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
 866:	f8 01       	movw	r30, r16
 868:	80 8d       	ldd	r24, Z+24	; 0x18
 86a:	91 8d       	ldd	r25, Z+25	; 0x19
 86c:	f7 01       	movw	r30, r14
 86e:	85 83       	std	Z+5, r24	; 0x05
 870:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
 872:	f8 01       	movw	r30, r16
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	f7 01       	movw	r30, r14
 878:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
 87a:	f8 01       	movw	r30, r16
 87c:	84 81       	ldd	r24, Z+4	; 0x04
 87e:	f7 01       	movw	r30, r14
 880:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
 882:	f8 01       	movw	r30, r16
 884:	83 81       	ldd	r24, Z+3	; 0x03
 886:	f7 01       	movw	r30, r14
 888:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
 88a:	f8 01       	movw	r30, r16
 88c:	81 81       	ldd	r24, Z+1	; 0x01
 88e:	f7 01       	movw	r30, r14
 890:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
 892:	c8 01       	movw	r24, r16
 894:	22 df       	rcall	.-444    	; 0x6da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 896:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
 898:	0f 90       	pop	r0
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	ff 90       	pop	r15
 8a4:	ef 90       	pop	r14
 8a6:	df 90       	pop	r13
 8a8:	08 95       	ret

000008aa <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
 8aa:	af 92       	push	r10
 8ac:	bf 92       	push	r11
 8ae:	cf 92       	push	r12
 8b0:	df 92       	push	r13
 8b2:	ef 92       	push	r14
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	1f 92       	push	r1
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	6c 01       	movw	r12, r24
 8c6:	b6 2e       	mov	r11, r22
 8c8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 8ca:	86 2f       	mov	r24, r22
 8cc:	83 70       	andi	r24, 0x03	; 3
 8ce:	29 f4       	brne	.+10     	; 0x8da <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
 8d0:	96 2f       	mov	r25, r22
 8d2:	96 95       	lsr	r25
 8d4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 8da:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
 8dc:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
 8de:	90 ff       	sbrs	r25, 0
		index++;
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
 8e2:	86 01       	movw	r16, r12
 8e4:	00 5e       	subi	r16, 0xE0	; 224
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	98 e0       	ldi	r25, 0x08	; 8
 8ea:	89 9f       	mul	r24, r25
 8ec:	00 0d       	add	r16, r0
 8ee:	11 1d       	adc	r17, r1
 8f0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 8f2:	8f b7       	in	r24, 0x3f	; 63
 8f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 8f6:	f8 94       	cli
	return flags;
 8f8:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
 8fa:	c6 01       	movw	r24, r12
 8fc:	cf de       	rcall	.-610    	; 0x69c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
 8fe:	f7 01       	movw	r30, r14
 900:	80 81       	ld	r24, Z
 902:	f8 01       	movw	r30, r16
 904:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
 906:	f7 01       	movw	r30, r14
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	f8 01       	movw	r30, r16
 90c:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
 90e:	f7 01       	movw	r30, r14
 910:	81 81       	ldd	r24, Z+1	; 0x01
 912:	f8 01       	movw	r30, r16
 914:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
 916:	b0 fe       	sbrs	r11, 0
 918:	04 c0       	rjmp	.+8      	; 0x922 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
 91a:	f7 01       	movw	r30, r14
 91c:	83 81       	ldd	r24, Z+3	; 0x03
 91e:	f8 01       	movw	r30, r16
 920:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
 922:	c6 01       	movw	r24, r12
 924:	da de       	rcall	.-588    	; 0x6da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 926:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
 928:	0f 90       	pop	r0
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	ff 90       	pop	r15
 934:	ef 90       	pop	r14
 936:	df 90       	pop	r13
 938:	cf 90       	pop	r12
 93a:	bf 90       	pop	r11
 93c:	af 90       	pop	r10
 93e:	08 95       	ret

00000940 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
 940:	af 92       	push	r10
 942:	bf 92       	push	r11
 944:	cf 92       	push	r12
 946:	df 92       	push	r13
 948:	ef 92       	push	r14
 94a:	ff 92       	push	r15
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	1f 92       	push	r1
 956:	cd b7       	in	r28, 0x3d	; 61
 958:	de b7       	in	r29, 0x3e	; 62
 95a:	6c 01       	movw	r12, r24
 95c:	b6 2e       	mov	r11, r22
 95e:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 960:	86 2f       	mov	r24, r22
 962:	83 70       	andi	r24, 0x03	; 3
 964:	29 f4       	brne	.+10     	; 0x970 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
 966:	96 2f       	mov	r25, r22
 968:	96 95       	lsr	r25
 96a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
 96c:	82 e0       	ldi	r24, 0x02	; 2
 96e:	02 c0       	rjmp	.+4      	; 0x974 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
 970:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
 972:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
 974:	90 ff       	sbrs	r25, 0
		index++;
 976:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
 978:	86 01       	movw	r16, r12
 97a:	00 5e       	subi	r16, 0xE0	; 224
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	98 e0       	ldi	r25, 0x08	; 8
 980:	89 9f       	mul	r24, r25
 982:	00 0d       	add	r16, r0
 984:	11 1d       	adc	r17, r1
 986:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 988:	8f b7       	in	r24, 0x3f	; 63
 98a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 98c:	f8 94       	cli
	return flags;
 98e:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
 990:	c6 01       	movw	r24, r12
 992:	84 de       	rcall	.-760    	; 0x69c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
 994:	f8 01       	movw	r30, r16
 996:	80 81       	ld	r24, Z
 998:	f7 01       	movw	r30, r14
 99a:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
 99c:	f8 01       	movw	r30, r16
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	f7 01       	movw	r30, r14
 9a2:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
 9a4:	f8 01       	movw	r30, r16
 9a6:	81 81       	ldd	r24, Z+1	; 0x01
 9a8:	f7 01       	movw	r30, r14
 9aa:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
 9ac:	b0 fe       	sbrs	r11, 0
 9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
 9b0:	f8 01       	movw	r30, r16
 9b2:	86 81       	ldd	r24, Z+6	; 0x06
 9b4:	f7 01       	movw	r30, r14
 9b6:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
 9b8:	c6 01       	movw	r24, r12
 9ba:	8f de       	rcall	.-738    	; 0x6da <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 9bc:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
 9be:	0f 90       	pop	r0
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	ff 90       	pop	r15
 9ca:	ef 90       	pop	r14
 9cc:	df 90       	pop	r13
 9ce:	cf 90       	pop	r12
 9d0:	bf 90       	pop	r11
 9d2:	af 90       	pop	r10
 9d4:	08 95       	ret

000009d6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
 9d6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
 9da:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
 9dc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
 9de:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
 9e2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
 9e4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
 9e8:	08 95       	ret

000009ea <__divmodsi4>:
 9ea:	05 2e       	mov	r0, r21
 9ec:	97 fb       	bst	r25, 7
 9ee:	16 f4       	brtc	.+4      	; 0x9f4 <__divmodsi4+0xa>
 9f0:	00 94       	com	r0
 9f2:	0f d0       	rcall	.+30     	; 0xa12 <__negsi2>
 9f4:	57 fd       	sbrc	r21, 7
 9f6:	05 d0       	rcall	.+10     	; 0xa02 <__divmodsi4_neg2>
 9f8:	1e d0       	rcall	.+60     	; 0xa36 <__udivmodsi4>
 9fa:	07 fc       	sbrc	r0, 7
 9fc:	02 d0       	rcall	.+4      	; 0xa02 <__divmodsi4_neg2>
 9fe:	46 f4       	brtc	.+16     	; 0xa10 <__divmodsi4_exit>
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <__negsi2>

00000a02 <__divmodsi4_neg2>:
 a02:	50 95       	com	r21
 a04:	40 95       	com	r20
 a06:	30 95       	com	r19
 a08:	21 95       	neg	r18
 a0a:	3f 4f       	sbci	r19, 0xFF	; 255
 a0c:	4f 4f       	sbci	r20, 0xFF	; 255
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255

00000a10 <__divmodsi4_exit>:
 a10:	08 95       	ret

00000a12 <__negsi2>:
 a12:	90 95       	com	r25
 a14:	80 95       	com	r24
 a16:	70 95       	com	r23
 a18:	61 95       	neg	r22
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__muluhisi3>:
 a22:	2b d0       	rcall	.+86     	; 0xa7a <__umulhisi3>
 a24:	a5 9f       	mul	r26, r21
 a26:	90 0d       	add	r25, r0
 a28:	b4 9f       	mul	r27, r20
 a2a:	90 0d       	add	r25, r0
 a2c:	a4 9f       	mul	r26, r20
 a2e:	80 0d       	add	r24, r0
 a30:	91 1d       	adc	r25, r1
 a32:	11 24       	eor	r1, r1
 a34:	08 95       	ret

00000a36 <__udivmodsi4>:
 a36:	a1 e2       	ldi	r26, 0x21	; 33
 a38:	1a 2e       	mov	r1, r26
 a3a:	aa 1b       	sub	r26, r26
 a3c:	bb 1b       	sub	r27, r27
 a3e:	fd 01       	movw	r30, r26
 a40:	0d c0       	rjmp	.+26     	; 0xa5c <__udivmodsi4_ep>

00000a42 <__udivmodsi4_loop>:
 a42:	aa 1f       	adc	r26, r26
 a44:	bb 1f       	adc	r27, r27
 a46:	ee 1f       	adc	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	a2 17       	cp	r26, r18
 a4c:	b3 07       	cpc	r27, r19
 a4e:	e4 07       	cpc	r30, r20
 a50:	f5 07       	cpc	r31, r21
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__udivmodsi4_ep>
 a54:	a2 1b       	sub	r26, r18
 a56:	b3 0b       	sbc	r27, r19
 a58:	e4 0b       	sbc	r30, r20
 a5a:	f5 0b       	sbc	r31, r21

00000a5c <__udivmodsi4_ep>:
 a5c:	66 1f       	adc	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	1a 94       	dec	r1
 a66:	69 f7       	brne	.-38     	; 0xa42 <__udivmodsi4_loop>
 a68:	60 95       	com	r22
 a6a:	70 95       	com	r23
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	9b 01       	movw	r18, r22
 a72:	ac 01       	movw	r20, r24
 a74:	bd 01       	movw	r22, r26
 a76:	cf 01       	movw	r24, r30
 a78:	08 95       	ret

00000a7a <__umulhisi3>:
 a7a:	a2 9f       	mul	r26, r18
 a7c:	b0 01       	movw	r22, r0
 a7e:	b3 9f       	mul	r27, r19
 a80:	c0 01       	movw	r24, r0
 a82:	a3 9f       	mul	r26, r19
 a84:	70 0d       	add	r23, r0
 a86:	81 1d       	adc	r24, r1
 a88:	11 24       	eor	r1, r1
 a8a:	91 1d       	adc	r25, r1
 a8c:	b2 9f       	mul	r27, r18
 a8e:	70 0d       	add	r23, r0
 a90:	81 1d       	adc	r24, r1
 a92:	11 24       	eor	r1, r1
 a94:	91 1d       	adc	r25, r1
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
